<Type Name="ModelSource" FullName="Microsoft.EntityFrameworkCore.Infrastructure.ModelSource">
  <TypeSignature Language="C#" Value="public class ModelSource : Microsoft.EntityFrameworkCore.Infrastructure.IModelSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ModelSource extends System.Object implements class Microsoft.EntityFrameworkCore.Infrastructure.IModelSource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource" />
  <TypeSignature Language="VB.NET" Value="Public Class ModelSource&#xA;Implements IModelSource" />
  <TypeSignature Language="F#" Value="type ModelSource = class&#xA;    interface IModelSource" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Infrastructure.IModelSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    An implementation of <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IModelSource" /> that produces a model based on
                    the <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties exposed on the context. The model is cached to avoid
                    recreating it every time it is requested.
                </para>
      <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ModelSource (Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As ModelSourceDependencies)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Infrastructure.ModelSource : Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies -&gt; Microsoft.EntityFrameworkCore.Infrastructure.ModelSource" Usage="new Microsoft.EntityFrameworkCore.Infrastructure.ModelSource dependencies" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConventionSet">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet CreateConventionSet (Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers loggers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet CreateConventionSet(class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, valuetype Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers loggers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateConventionSet(Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateConventionSet (conventionSetBuilder As IConventionSetBuilder, loggers As DiagnosticsLoggers) As ConventionSet" />
      <MemberSignature Language="F#" Value="abstract member CreateConventionSet : Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet&#xA;override this.CreateConventionSet : Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" Usage="modelSource.CreateConventionSet (conventionSetBuilder, loggers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conventionSetBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder" />
        <Parameter Name="loggers" Type="Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers" />
      </Parameters>
      <Docs>
        <param name="conventionSetBuilder"> The provider convention set builder to be used. </param>
        <param name="loggers"> The logger to use. </param>
        <summary>
                Creates the convention set to be used for the model. Only uses the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.CoreConventionSetBuilder" />
                if <paramref name="conventionSetBuilder" /> is null.
            </summary>
        <returns> The convention set to be used. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateModel">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Metadata.IModel CreateModel (Microsoft.EntityFrameworkCore.DbContext context, Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator validator, Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers loggers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IModel CreateModel(class Microsoft.EntityFrameworkCore.DbContext context, class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, class Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator validator, valuetype Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers loggers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.CreateModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator,Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateModel (context As DbContext, conventionSetBuilder As IConventionSetBuilder, validator As IModelValidator, loggers As DiagnosticsLoggers) As IModel" />
      <MemberSignature Language="F#" Value="abstract member CreateModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator * Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel&#xA;override this.CreateModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator * Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="modelSource.CreateModel (context, conventionSetBuilder, validator, loggers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
        <Parameter Name="conventionSetBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder" />
        <Parameter Name="validator" Type="Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator" />
        <Parameter Name="loggers" Type="Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers" />
      </Parameters>
      <Docs>
        <param name="context"> The context the model is being produced for. </param>
        <param name="conventionSetBuilder"> The convention set to use when creating the model. </param>
        <param name="validator"> The validator to verify the model can be successfully used with the context. </param>
        <param name="loggers"> The loggers to use. </param>
        <summary>
                Creates the model. This method is called when the model was not found in the cache.
            </summary>
        <returns> The model to be used. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies Dependencies" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.Dependencies" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Dependencies As ModelSourceDependencies" />
      <MemberSignature Language="F#" Value="member this.Dependencies : Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies" Usage="Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Dependencies used to create a <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource" /></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModel">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.IModel GetModel (Microsoft.EntityFrameworkCore.DbContext context, Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator validator, Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers loggers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.IModel GetModel(class Microsoft.EntityFrameworkCore.DbContext context, class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder conventionSetBuilder, class Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator validator, valuetype Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers loggers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator,Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetModel (context As DbContext, conventionSetBuilder As IConventionSetBuilder, validator As IModelValidator, loggers As DiagnosticsLoggers) As IModel" />
      <MemberSignature Language="F#" Value="abstract member GetModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator * Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel&#xA;override this.GetModel : Microsoft.EntityFrameworkCore.DbContext * Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder * Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator * Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers -&gt; Microsoft.EntityFrameworkCore.Metadata.IModel" Usage="modelSource.GetModel (context, conventionSetBuilder, validator, loggers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Infrastructure.IModelSource.GetModel(Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator,Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.IModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.EntityFrameworkCore.DbContext" />
        <Parameter Name="conventionSetBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder" />
        <Parameter Name="validator" Type="Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator" />
        <Parameter Name="loggers" Type="Microsoft.EntityFrameworkCore.Diagnostics.DiagnosticsLoggers" />
      </Parameters>
      <Docs>
        <param name="context"> The context the model is being produced for. </param>
        <param name="conventionSetBuilder"> The convention set to use when creating the model. </param>
        <param name="validator"> The validator to verify the model can be successfully used with the context. </param>
        <param name="loggers"> The loggers to use. </param>
        <summary>
                Returns the model from the cache, or creates a model if it is not present in the cache.
            </summary>
        <returns> The model to be used. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
