<Type Name="MaterializerFactory" FullName="Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MaterializerFactory">
  <TypeSignature Language="C#" Value="public class MaterializerFactory : Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMaterializerFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MaterializerFactory extends System.Object implements class Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMaterializerFactory" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MaterializerFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class MaterializerFactory&#xA;Implements IMaterializerFactory" />
  <TypeSignature Language="F#" Value="type MaterializerFactory = class&#xA;    interface IMaterializerFactory" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMaterializerFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    This API supports the Entity Framework Core infrastructure and is not intended to be used
                    directly from your code. This API may change or be removed in future releases.
                </para>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaterializerFactory (Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource entityMaterializerSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource entityMaterializerSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MaterializerFactory.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (entityMaterializerSource As IEntityMaterializerSource)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MaterializerFactory : Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource -&gt; Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MaterializerFactory" Usage="new Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MaterializerFactory entityMaterializerSource" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="entityMaterializerSource" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.IEntityMaterializerSource" />
      </Parameters>
      <Docs>
        <param name="entityMaterializerSource">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMaterializer">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.LambdaExpression CreateMaterializer (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,int&gt; projectionAdder, out System.Collections.Generic.Dictionary&lt;Type,int[]&gt; typeIndexMap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.LambdaExpression CreateMaterializer(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression, class System.Func`3&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression, int32&gt; projectionAdder, [out] class System.Collections.Generic.Dictionary`2&lt;class System.Type, int32[]&gt;&amp; typeIndexMap) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.MaterializerFactory.CreateMaterializer(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Int32},System.Collections.Generic.Dictionary{System.Type,System.Int32[]}@)" />
      <MemberSignature Language="F#" Value="abstract member CreateMaterializer : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression, int&gt; *  -&gt; System.Linq.Expressions.LambdaExpression&#xA;override this.CreateMaterializer : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression, int&gt; *  -&gt; System.Linq.Expressions.LambdaExpression" Usage="materializerFactory.CreateMaterializer (entityType, selectExpression, projectionAdder, typeIndexMap)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.Internal.IMaterializerFactory.CreateMaterializer(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Int32},System.Collections.Generic.Dictionary{System.Type,System.Int32[]}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression" />
        <Parameter Name="projectionAdder" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,System.Int32&gt;" />
        <Parameter Name="typeIndexMap" Type="System.Collections.Generic.Dictionary&lt;System.Type,System.Int32[]&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="selectExpression">To be added.</param>
        <param name="projectionAdder">To be added.</param>
        <param name="typeIndexMap">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>