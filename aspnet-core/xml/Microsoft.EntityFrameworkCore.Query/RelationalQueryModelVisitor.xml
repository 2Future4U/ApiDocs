<Type Name="RelationalQueryModelVisitor" FullName="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor">
  <TypeSignature Language="C#" Value="public class RelationalQueryModelVisitor : Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RelationalQueryModelVisitor extends Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor" />
  <TypeSignature Language="VB.NET" Value="Public Class RelationalQueryModelVisitor&#xA;Inherits EntityQueryModelVisitor" />
  <TypeSignature Language="F#" Value="type RelationalQueryModelVisitor = class&#xA;    inherit EntityQueryModelVisitor" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                The default relational <see cref="T:Remotion.Linq.QueryModel" /> visitor.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RelationalQueryModelVisitor (Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies dependencies, Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitorDependencies relationalDependencies, Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext queryCompilationContext, Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor parentQueryModelVisitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies dependencies, class Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitorDependencies relationalDependencies, class Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext queryCompilationContext, class Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor parentQueryModelVisitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext,Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dependencies As EntityQueryModelVisitorDependencies, relationalDependencies As RelationalQueryModelVisitorDependencies, queryCompilationContext As RelationalQueryCompilationContext, parentQueryModelVisitor As RelationalQueryModelVisitor)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor : Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies * Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitorDependencies * Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext * Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor -&gt; Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor" Usage="new Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor (dependencies, relationalDependencies, queryCompilationContext, parentQueryModelVisitor)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dependencies" Type="Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitorDependencies" />
        <Parameter Name="relationalDependencies" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitorDependencies" />
        <Parameter Name="queryCompilationContext" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext" />
        <Parameter Name="parentQueryModelVisitor" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor" />
      </Parameters>
      <Docs>
        <param name="dependencies">To be added.</param>
        <param name="relationalDependencies">To be added.</param>
        <param name="queryCompilationContext">To be added.</param>
        <param name="parentQueryModelVisitor">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddQuery">
      <MemberSignature Language="C#" Value="public virtual void AddQuery (Remotion.Linq.Clauses.IQuerySource querySource, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddQuery(class Remotion.Linq.Clauses.IQuerySource querySource, class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression selectExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.AddQuery(Remotion.Linq.Clauses.IQuerySource,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression)" />
      <MemberSignature Language="F#" Value="abstract member AddQuery : Remotion.Linq.Clauses.IQuerySource * Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression -&gt; unit&#xA;override this.AddQuery : Remotion.Linq.Clauses.IQuerySource * Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression -&gt; unit" Usage="relationalQueryModelVisitor.AddQuery (querySource, selectExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
        <Parameter Name="selectExpression" Type="Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression" />
      </Parameters>
      <Docs>
        <param name="querySource"> The query source. </param>
        <param name="selectExpression"> The select expression. </param>
        <summary>
                Adds a SelectExpression to this query.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindLocalMethodCallExpression">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression BindLocalMethodCallExpression (System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression BindLocalMethodCallExpression(class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.BindLocalMethodCallExpression(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="F#" Value="abstract member BindLocalMethodCallExpression : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.BindLocalMethodCallExpression : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="relationalQueryModelVisitor.BindLocalMethodCallExpression methodCallExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression"> The local method call expression. </param>
        <summary>
                Bind a local method call expression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindMemberExpression&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual TResult BindMemberExpression&lt;TResult&gt; (System.Linq.Expressions.MemberExpression memberExpression, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,TResult&gt; memberBinder, bool bindSubQueries = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult BindMemberExpression&lt;TResult&gt;(class System.Linq.Expressions.MemberExpression memberExpression, class System.Func`4&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Remotion.Linq.Clauses.IQuerySource, class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression, !!TResult&gt; memberBinder, bool bindSubQueries) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.BindMemberExpression``1(System.Linq.Expressions.MemberExpression,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,``0},System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.BindMemberExpression : System.Linq.Expressions.MemberExpression * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Remotion.Linq.Clauses.IQuerySource, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression, 'Result&gt; * bool -&gt; 'Result" Usage="relationalQueryModelVisitor.BindMemberExpression (memberExpression, memberBinder, bindSubQueries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memberExpression" Type="System.Linq.Expressions.MemberExpression" />
        <Parameter Name="memberBinder" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,TResult&gt;" />
        <Parameter Name="bindSubQueries" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"> Type of the result. </typeparam>
        <param name="memberExpression"> The member access expression. </param>
        <param name="memberBinder"> The member binder. </param>
        <param name="bindSubQueries"> true to bind sub queries. </param>
        <summary>
                Bind a member expression.
            </summary>
        <returns>
                A TResult.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindMemberToOuterQueryParameter">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression BindMemberToOuterQueryParameter (System.Linq.Expressions.MemberExpression memberExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression BindMemberToOuterQueryParameter(class System.Linq.Expressions.MemberExpression memberExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.BindMemberToOuterQueryParameter(System.Linq.Expressions.MemberExpression)" />
      <MemberSignature Language="F#" Value="abstract member BindMemberToOuterQueryParameter : System.Linq.Expressions.MemberExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.BindMemberToOuterQueryParameter : System.Linq.Expressions.MemberExpression -&gt; System.Linq.Expressions.Expression" Usage="relationalQueryModelVisitor.BindMemberToOuterQueryParameter memberExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberExpression" Type="System.Linq.Expressions.MemberExpression" />
      </Parameters>
      <Docs>
        <param name="memberExpression"> The expression to bind. </param>
        <summary>
                Bind a member to a parameter from the outer query.
            </summary>
        <returns> The bound expression. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindMemberToValueBuffer">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression BindMemberToValueBuffer (System.Linq.Expressions.MemberExpression memberExpression, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression BindMemberToValueBuffer(class System.Linq.Expressions.MemberExpression memberExpression, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.BindMemberToValueBuffer(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="F#" Value="override this.BindMemberToValueBuffer : System.Linq.Expressions.MemberExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="relationalQueryModelVisitor.BindMemberToValueBuffer (memberExpression, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberExpression" Type="System.Linq.Expressions.MemberExpression" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="memberExpression"> The member access expression. </param>
        <param name="expression"> The target expression. </param>
        <summary>
                Bind a member expression to a value buffer access.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindMethodCallExpression&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public virtual TResult BindMethodCallExpression&lt;TResult&gt; (System.Linq.Expressions.MethodCallExpression methodCallExpression, Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,TResult&gt; memberBinder, bool bindSubQueries = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult BindMethodCallExpression&lt;TResult&gt;(class System.Linq.Expressions.MethodCallExpression methodCallExpression, class System.Func`4&lt;class Microsoft.EntityFrameworkCore.Metadata.IProperty, class Remotion.Linq.Clauses.IQuerySource, class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression, !!TResult&gt; memberBinder, bool bindSubQueries) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.BindMethodCallExpression``1(System.Linq.Expressions.MethodCallExpression,System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,``0},System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.BindMethodCallExpression : System.Linq.Expressions.MethodCallExpression * Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty, Remotion.Linq.Clauses.IQuerySource, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression, 'Result&gt; * bool -&gt; 'Result" Usage="relationalQueryModelVisitor.BindMethodCallExpression (methodCallExpression, memberBinder, bindSubQueries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
        <Parameter Name="memberBinder" Type="System.Func&lt;Microsoft.EntityFrameworkCore.Metadata.IProperty,Remotion.Linq.Clauses.IQuerySource,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression,TResult&gt;" />
        <Parameter Name="bindSubQueries" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"> Type of the result. </typeparam>
        <param name="methodCallExpression"> The method call expression. </param>
        <param name="memberBinder"> The member binder. </param>
        <param name="bindSubQueries"> true to bind sub queries. </param>
        <summary>
                Bind a method call expression.
            </summary>
        <returns>
                A TResult.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindMethodCallToValueBuffer">
      <MemberSignature Language="C#" Value="public override System.Linq.Expressions.Expression BindMethodCallToValueBuffer (System.Linq.Expressions.MethodCallExpression methodCallExpression, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.Expressions.Expression BindMethodCallToValueBuffer(class System.Linq.Expressions.MethodCallExpression methodCallExpression, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.BindMethodCallToValueBuffer(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="F#" Value="override this.BindMethodCallToValueBuffer : System.Linq.Expressions.MethodCallExpression * System.Linq.Expressions.Expression -&gt; System.Linq.Expressions.Expression" Usage="relationalQueryModelVisitor.BindMethodCallToValueBuffer (methodCallExpression, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression"> The method call expression. </param>
        <param name="expression"> The target expression. </param>
        <summary>
                Bind a method call expression to a value buffer access.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindMethodToOuterQueryParameter">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression BindMethodToOuterQueryParameter (System.Linq.Expressions.MethodCallExpression methodCallExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression BindMethodToOuterQueryParameter(class System.Linq.Expressions.MethodCallExpression methodCallExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.BindMethodToOuterQueryParameter(System.Linq.Expressions.MethodCallExpression)" />
      <MemberSignature Language="F#" Value="abstract member BindMethodToOuterQueryParameter : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression&#xA;override this.BindMethodToOuterQueryParameter : System.Linq.Expressions.MethodCallExpression -&gt; System.Linq.Expressions.Expression" Usage="relationalQueryModelVisitor.BindMethodToOuterQueryParameter methodCallExpression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodCallExpression" Type="System.Linq.Expressions.MethodCallExpression" />
      </Parameters>
      <Docs>
        <param name="methodCallExpression"> The expression to bind. </param>
        <summary>
                Bind a method call  to a parameter from the outer query.
            </summary>
        <returns> The bound expression. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBindToParentQueryModel">
      <MemberSignature Language="C#" Value="public virtual bool CanBindToParentQueryModel { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanBindToParentQueryModel" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.CanBindToParentQueryModel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CanBindToParentQueryModel As Boolean" />
      <MemberSignature Language="F#" Value="member this.CanBindToParentQueryModel : bool with get, set" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.CanBindToParentQueryModel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating whether this query model visitor will be
                able to bind directly to properties from its parent query without requiring
                parameter injection.
            </summary>
        <value>
                true if the query model visitor can bind to its parent's properties, false if not.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanOptimizeCorrelatedCollections">
      <MemberSignature Language="C#" Value="protected override bool CanOptimizeCorrelatedCollections ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool CanOptimizeCorrelatedCollections() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.CanOptimizeCorrelatedCollections" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CanOptimizeCorrelatedCollections () As Boolean" />
      <MemberSignature Language="F#" Value="override this.CanOptimizeCorrelatedCollections : unit -&gt; bool" Usage="relationalQueryModelVisitor.CanOptimizeCorrelatedCollections " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
                Determines whether correlated collections (if any) can be optimized.
            </summary>
        <returns>True if optimization is allowed, false otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileAdditionalFromClauseExpression">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression CompileAdditionalFromClauseExpression (Remotion.Linq.Clauses.AdditionalFromClause additionalFromClause, Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression CompileAdditionalFromClauseExpression(class Remotion.Linq.Clauses.AdditionalFromClause additionalFromClause, class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.CompileAdditionalFromClauseExpression(Remotion.Linq.Clauses.AdditionalFromClause,Remotion.Linq.QueryModel)" />
      <MemberSignature Language="F#" Value="override this.CompileAdditionalFromClauseExpression : Remotion.Linq.Clauses.AdditionalFromClause * Remotion.Linq.QueryModel -&gt; System.Linq.Expressions.Expression" Usage="relationalQueryModelVisitor.CompileAdditionalFromClauseExpression (additionalFromClause, queryModel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="additionalFromClause" Type="Remotion.Linq.Clauses.AdditionalFromClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="additionalFromClause"> The additional from clause being compiled. </param>
        <param name="queryModel"> The query model. </param>
        <summary>
                Compile an additional from clause expression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileGroupJoinInnerSequenceExpression">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression CompileGroupJoinInnerSequenceExpression (Remotion.Linq.Clauses.GroupJoinClause groupJoinClause, Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression CompileGroupJoinInnerSequenceExpression(class Remotion.Linq.Clauses.GroupJoinClause groupJoinClause, class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.CompileGroupJoinInnerSequenceExpression(Remotion.Linq.Clauses.GroupJoinClause,Remotion.Linq.QueryModel)" />
      <MemberSignature Language="F#" Value="override this.CompileGroupJoinInnerSequenceExpression : Remotion.Linq.Clauses.GroupJoinClause * Remotion.Linq.QueryModel -&gt; System.Linq.Expressions.Expression" Usage="relationalQueryModelVisitor.CompileGroupJoinInnerSequenceExpression (groupJoinClause, queryModel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupJoinClause" Type="Remotion.Linq.Clauses.GroupJoinClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="groupJoinClause"> The group join clause being compiled. </param>
        <param name="queryModel"> The query model. </param>
        <summary>
                Compile a group join inner sequence expression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileJoinClauseInnerSequenceExpression">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression CompileJoinClauseInnerSequenceExpression (Remotion.Linq.Clauses.JoinClause joinClause, Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression CompileJoinClauseInnerSequenceExpression(class Remotion.Linq.Clauses.JoinClause joinClause, class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.CompileJoinClauseInnerSequenceExpression(Remotion.Linq.Clauses.JoinClause,Remotion.Linq.QueryModel)" />
      <MemberSignature Language="F#" Value="override this.CompileJoinClauseInnerSequenceExpression : Remotion.Linq.Clauses.JoinClause * Remotion.Linq.QueryModel -&gt; System.Linq.Expressions.Expression" Usage="relationalQueryModelVisitor.CompileJoinClauseInnerSequenceExpression (joinClause, queryModel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinClause" Type="Remotion.Linq.Clauses.JoinClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="joinClause"> The join clause being compiled. </param>
        <param name="queryModel"> The query model. </param>
        <summary>
                Compile a join clause inner sequence expression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileMainFromClauseExpression">
      <MemberSignature Language="C#" Value="protected override System.Linq.Expressions.Expression CompileMainFromClauseExpression (Remotion.Linq.Clauses.MainFromClause mainFromClause, Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Linq.Expressions.Expression CompileMainFromClauseExpression(class Remotion.Linq.Clauses.MainFromClause mainFromClause, class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.CompileMainFromClauseExpression(Remotion.Linq.Clauses.MainFromClause,Remotion.Linq.QueryModel)" />
      <MemberSignature Language="F#" Value="override this.CompileMainFromClauseExpression : Remotion.Linq.Clauses.MainFromClause * Remotion.Linq.QueryModel -&gt; System.Linq.Expressions.Expression" Usage="relationalQueryModelVisitor.CompileMainFromClauseExpression (mainFromClause, queryModel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mainFromClause" Type="Remotion.Linq.Clauses.MainFromClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="mainFromClause"> The main from clause. </param>
        <param name="queryModel"> The query model. </param>
        <summary>
                Compile main from clause expression.
            </summary>
        <returns>
                An Expression.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextOptions">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions ContextOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions ContextOptions" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.ContextOptions" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ContextOptions As IDbContextOptions" />
      <MemberSignature Language="F#" Value="member this.ContextOptions : Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.ContextOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the options for the target context.
            </summary>
        <value>
                Options for the target context.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateExecutorLambda&lt;TResults&gt;">
      <MemberSignature Language="C#" Value="protected override Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResults&gt; CreateExecutorLambda&lt;TResults&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Func`2&lt;class Microsoft.EntityFrameworkCore.Query.QueryContext, !!TResults&gt; CreateExecutorLambda&lt;TResults&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.CreateExecutorLambda``1" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateExecutorLambda(Of TResults) () As Func(Of QueryContext, TResults)" />
      <MemberSignature Language="F#" Value="override this.CreateExecutorLambda : unit -&gt; Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext, 'Results&gt;" Usage="relationalQueryModelVisitor.CreateExecutorLambda " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.EntityFrameworkCore.Query.QueryContext,TResults&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResults" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResults"> The type of results that the query returns. </typeparam>
        <summary>
                Creates an action to execute this query.
            </summary>
        <returns> An action that returns the results of the query. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLiftable">
      <MemberSignature Language="C#" Value="public virtual bool IsLiftable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLiftable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.IsLiftable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsLiftable As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsLiftable : bool" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.IsLiftable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets a value indicating whether query model visitor's resulting expression
                can be lifted into the parent query. Liftable queries contain a single SelectExpression.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LiftInjectedParameters">
      <MemberSignature Language="C#" Value="public virtual void LiftInjectedParameters (Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor subQueryModelVisitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LiftInjectedParameters(class Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor subQueryModelVisitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.LiftInjectedParameters(Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LiftInjectedParameters (subQueryModelVisitor As RelationalQueryModelVisitor)" />
      <MemberSignature Language="F#" Value="abstract member LiftInjectedParameters : Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor -&gt; unit&#xA;override this.LiftInjectedParameters : Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor -&gt; unit" Usage="relationalQueryModelVisitor.LiftInjectedParameters subQueryModelVisitor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subQueryModelVisitor" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor" />
      </Parameters>
      <Docs>
        <param name="subQueryModelVisitor"> The query model visitor for the subquery being lifted. </param>
        <summary>
                Lifts the outer parameters injected into a subquery into the query
                expression that is being built by this query model visitor, so that
                the subquery can be lifted.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeNavigationRewrite">
      <MemberSignature Language="C#" Value="protected override void OnBeforeNavigationRewrite (Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBeforeNavigationRewrite(class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.OnBeforeNavigationRewrite(Remotion.Linq.QueryModel)" />
      <MemberSignature Language="F#" Value="override this.OnBeforeNavigationRewrite : Remotion.Linq.QueryModel -&gt; unit" Usage="relationalQueryModelVisitor.OnBeforeNavigationRewrite queryModel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="queryModel">Query model to process. </param>
        <summary>
                Pre-processes query model before we rewrite its navigations.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OptimizeQueryModel">
      <MemberSignature Language="C#" Value="protected override void OptimizeQueryModel (Remotion.Linq.QueryModel queryModel, bool asyncQuery);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OptimizeQueryModel(class Remotion.Linq.QueryModel queryModel, bool asyncQuery) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.OptimizeQueryModel(Remotion.Linq.QueryModel,System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.OptimizeQueryModel : Remotion.Linq.QueryModel * bool -&gt; unit" Usage="relationalQueryModelVisitor.OptimizeQueryModel (queryModel, asyncQuery)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        <Parameter Name="asyncQuery" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="queryModel"> The query. </param>
        <param name="asyncQuery"> True if we are compiling an async query; otherwise false. </param>
        <summary>
                Applies optimizations to the query.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentQueryModelVisitor">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor ParentQueryModelVisitor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor ParentQueryModelVisitor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.ParentQueryModelVisitor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ParentQueryModelVisitor As RelationalQueryModelVisitor" />
      <MemberSignature Language="F#" Value="member this.ParentQueryModelVisitor : Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.ParentQueryModelVisitor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets the parent query model visitor, or null if there is no parent.
            </summary>
        <value>
                The parent query model visitor, or null if there is no parent.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Queries">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.ICollection&lt;Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression&gt; Queries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression&gt; Queries" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.Queries" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Queries As ICollection(Of SelectExpression)" />
      <MemberSignature Language="F#" Value="member this.Queries : System.Collections.Generic.ICollection&lt;Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression&gt;" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.Queries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The SelectExpressions active in the current query compilation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueriesBySource">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.Dictionary&lt;Remotion.Linq.Clauses.IQuerySource,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression&gt; QueriesBySource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.Dictionary`2&lt;class Remotion.Linq.Clauses.IQuerySource, class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression&gt; QueriesBySource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.QueriesBySource" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property QueriesBySource As Dictionary(Of IQuerySource, SelectExpression)" />
      <MemberSignature Language="F#" Value="member this.QueriesBySource : System.Collections.Generic.Dictionary&lt;Remotion.Linq.Clauses.IQuerySource, Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression&gt;" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.QueriesBySource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;Remotion.Linq.Clauses.IQuerySource,Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                The SelectExpressions for this query, mapped by query source.
            </summary>
        <value>
                A map of query source to select expression.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCompilationContext">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext QueryCompilationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext QueryCompilationContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.QueryCompilationContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property QueryCompilationContext As RelationalQueryCompilationContext" />
      <MemberSignature Language="F#" Value="member this.QueryCompilationContext : Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.QueryCompilationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Context for the query compilation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterSubQueryVisitor">
      <MemberSignature Language="C#" Value="public virtual void RegisterSubQueryVisitor (Remotion.Linq.Clauses.IQuerySource querySource, Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor queryModelVisitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterSubQueryVisitor(class Remotion.Linq.Clauses.IQuerySource querySource, class Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor queryModelVisitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RegisterSubQueryVisitor(Remotion.Linq.Clauses.IQuerySource,Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RegisterSubQueryVisitor (querySource As IQuerySource, queryModelVisitor As RelationalQueryModelVisitor)" />
      <MemberSignature Language="F#" Value="abstract member RegisterSubQueryVisitor : Remotion.Linq.Clauses.IQuerySource * Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor -&gt; unit&#xA;override this.RegisterSubQueryVisitor : Remotion.Linq.Clauses.IQuerySource * Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor -&gt; unit" Usage="relationalQueryModelVisitor.RegisterSubQueryVisitor (querySource, queryModelVisitor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
        <Parameter Name="queryModelVisitor" Type="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor" />
      </Parameters>
      <Docs>
        <param name="querySource"> The query source. </param>
        <param name="queryModelVisitor"> The query model visitor. </param>
        <summary>
                Registers a sub query visitor.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOrderings">
      <MemberSignature Language="C#" Value="protected override void RemoveOrderings (Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RemoveOrderings(class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RemoveOrderings(Remotion.Linq.QueryModel)" />
      <MemberSignature Language="F#" Value="override this.RemoveOrderings : Remotion.Linq.QueryModel -&gt; unit" Usage="relationalQueryModelVisitor.RemoveOrderings queryModel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="queryModel">Query model to remove orderings on.</param>
        <summary>
                Removes orderings for a given query model.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresClientEval">
      <MemberSignature Language="C#" Value="public virtual bool RequiresClientEval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequiresClientEval" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RequiresClientEval" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RequiresClientEval As Boolean" />
      <MemberSignature Language="F#" Value="member this.RequiresClientEval : bool with get, set" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RequiresClientEval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating whether the query requires client eval.
            </summary>
        <value>
                true if the query requires client eval, false if not.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresClientFilter">
      <MemberSignature Language="C#" Value="public virtual bool RequiresClientFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequiresClientFilter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RequiresClientFilter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RequiresClientFilter As Boolean" />
      <MemberSignature Language="F#" Value="member this.RequiresClientFilter : bool with get, set" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RequiresClientFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating whether the query requires client filter.
            </summary>
        <value>
                true if the query requires client filter, false if not.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresClientJoin">
      <MemberSignature Language="C#" Value="public virtual bool RequiresClientJoin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequiresClientJoin" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RequiresClientJoin" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RequiresClientJoin As Boolean" />
      <MemberSignature Language="F#" Value="member this.RequiresClientJoin : bool with get, set" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RequiresClientJoin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating whether the query requires client join.
            </summary>
        <value>
                true if the query requires client join, false if not.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresClientOrderBy">
      <MemberSignature Language="C#" Value="public virtual bool RequiresClientOrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequiresClientOrderBy" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RequiresClientOrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RequiresClientOrderBy As Boolean" />
      <MemberSignature Language="F#" Value="member this.RequiresClientOrderBy : bool with get, set" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RequiresClientOrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating whether the query requires client order by.
            </summary>
        <value>
                true if the query requires client order by, false if not.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresClientProjection">
      <MemberSignature Language="C#" Value="public virtual bool RequiresClientProjection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequiresClientProjection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RequiresClientProjection" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RequiresClientProjection As Boolean" />
      <MemberSignature Language="F#" Value="member this.RequiresClientProjection : bool with get, set" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RequiresClientProjection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating whether the query requires client projection.
            </summary>
        <value>
                true if the query requires client projection, false if not.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresClientResultOperator">
      <MemberSignature Language="C#" Value="public virtual bool RequiresClientResultOperator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequiresClientResultOperator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RequiresClientResultOperator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RequiresClientResultOperator As Boolean" />
      <MemberSignature Language="F#" Value="member this.RequiresClientResultOperator : bool with get, set" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RequiresClientResultOperator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating whether the query requires client result operator.
            </summary>
        <value>
                true if the query requires client result operator, false if not.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresClientSelectMany">
      <MemberSignature Language="C#" Value="public virtual bool RequiresClientSelectMany { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequiresClientSelectMany" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RequiresClientSelectMany" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RequiresClientSelectMany As Boolean" />
      <MemberSignature Language="F#" Value="member this.RequiresClientSelectMany : bool with get, set" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RequiresClientSelectMany" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating whether the query requires client select many.
            </summary>
        <value>
                true if the query requires client select many, false if not.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresStreamingGroupResultOperator">
      <MemberSignature Language="C#" Value="public virtual bool RequiresStreamingGroupResultOperator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequiresStreamingGroupResultOperator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RequiresStreamingGroupResultOperator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RequiresStreamingGroupResultOperator As Boolean" />
      <MemberSignature Language="F#" Value="member this.RequiresStreamingGroupResultOperator : bool with get, set" Usage="Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.RequiresStreamingGroupResultOperator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
                Gets or sets a value indicating whether the query requires streaming group result operator.
            </summary>
        <value>
                true if the query requires streaming result operator, false if not.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldApplyDefiningQuery">
      <MemberSignature Language="C#" Value="public override bool ShouldApplyDefiningQuery (Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, Remotion.Linq.Clauses.IQuerySource querySource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ShouldApplyDefiningQuery(class Microsoft.EntityFrameworkCore.Metadata.IEntityType entityType, class Remotion.Linq.Clauses.IQuerySource querySource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.ShouldApplyDefiningQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Remotion.Linq.Clauses.IQuerySource)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ShouldApplyDefiningQuery (entityType As IEntityType, querySource As IQuerySource) As Boolean" />
      <MemberSignature Language="F#" Value="override this.ShouldApplyDefiningQuery : Microsoft.EntityFrameworkCore.Metadata.IEntityType * Remotion.Linq.Clauses.IQuerySource -&gt; bool" Usage="relationalQueryModelVisitor.ShouldApplyDefiningQuery (entityType, querySource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Microsoft.EntityFrameworkCore.Metadata.IEntityType" />
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
      </Parameters>
      <Docs>
        <param name="entityType">The target entity type.</param>
        <param name="querySource">The target query source.</param>
        <summary>
                Determine whether a defining query should be applied when querying the target entity type.
            </summary>
        <returns>true if the target type should have a defining query applied.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetQuery">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression TryGetQuery (Remotion.Linq.Clauses.IQuerySource querySource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression TryGetQuery(class Remotion.Linq.Clauses.IQuerySource querySource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.TryGetQuery(Remotion.Linq.Clauses.IQuerySource)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TryGetQuery (querySource As IQuerySource) As SelectExpression" />
      <MemberSignature Language="F#" Value="abstract member TryGetQuery : Remotion.Linq.Clauses.IQuerySource -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression&#xA;override this.TryGetQuery : Remotion.Linq.Clauses.IQuerySource -&gt; Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression" Usage="relationalQueryModelVisitor.TryGetQuery querySource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Expressions.SelectExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="querySource" Type="Remotion.Linq.Clauses.IQuerySource" />
      </Parameters>
      <Docs>
        <param name="querySource"> The query source. </param>
        <summary>
                Try and get the active SelectExpression for a given query source.
            </summary>
        <returns>
                A SelectExpression, or null.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitAdditionalFromClause">
      <MemberSignature Language="C#" Value="public override void VisitAdditionalFromClause (Remotion.Linq.Clauses.AdditionalFromClause fromClause, Remotion.Linq.QueryModel queryModel, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitAdditionalFromClause(class Remotion.Linq.Clauses.AdditionalFromClause fromClause, class Remotion.Linq.QueryModel queryModel, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitAdditionalFromClause(Remotion.Linq.Clauses.AdditionalFromClause,Remotion.Linq.QueryModel,System.Int32)" />
      <MemberSignature Language="F#" Value="override this.VisitAdditionalFromClause : Remotion.Linq.Clauses.AdditionalFromClause * Remotion.Linq.QueryModel * int -&gt; unit" Usage="relationalQueryModelVisitor.VisitAdditionalFromClause (fromClause, queryModel, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromClause" Type="Remotion.Linq.Clauses.AdditionalFromClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fromClause"> The from clause being visited. </param>
        <param name="queryModel"> The query model. </param>
        <param name="index"> Index of the node being visited. </param>
        <summary>
                Visit an additional from clause.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitGroupJoinClause">
      <MemberSignature Language="C#" Value="public override void VisitGroupJoinClause (Remotion.Linq.Clauses.GroupJoinClause groupJoinClause, Remotion.Linq.QueryModel queryModel, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitGroupJoinClause(class Remotion.Linq.Clauses.GroupJoinClause groupJoinClause, class Remotion.Linq.QueryModel queryModel, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitGroupJoinClause(Remotion.Linq.Clauses.GroupJoinClause,Remotion.Linq.QueryModel,System.Int32)" />
      <MemberSignature Language="F#" Value="override this.VisitGroupJoinClause : Remotion.Linq.Clauses.GroupJoinClause * Remotion.Linq.QueryModel * int -&gt; unit" Usage="relationalQueryModelVisitor.VisitGroupJoinClause (groupJoinClause, queryModel, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupJoinClause" Type="Remotion.Linq.Clauses.GroupJoinClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="groupJoinClause"> The group join being visited. </param>
        <param name="queryModel"> The query model. </param>
        <param name="index"> Index of the node being visited. </param>
        <summary>
                Visit a group join clause.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitJoinClause">
      <MemberSignature Language="C#" Value="public override void VisitJoinClause (Remotion.Linq.Clauses.JoinClause joinClause, Remotion.Linq.QueryModel queryModel, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitJoinClause(class Remotion.Linq.Clauses.JoinClause joinClause, class Remotion.Linq.QueryModel queryModel, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitJoinClause(Remotion.Linq.Clauses.JoinClause,Remotion.Linq.QueryModel,System.Int32)" />
      <MemberSignature Language="F#" Value="override this.VisitJoinClause : Remotion.Linq.Clauses.JoinClause * Remotion.Linq.QueryModel * int -&gt; unit" Usage="relationalQueryModelVisitor.VisitJoinClause (joinClause, queryModel, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joinClause" Type="Remotion.Linq.Clauses.JoinClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="joinClause"> The join clause being visited. </param>
        <param name="queryModel"> The query model. </param>
        <param name="index"> Index of the node being visited. </param>
        <summary>
                Visit a join clause.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitOrderByClause">
      <MemberSignature Language="C#" Value="public override void VisitOrderByClause (Remotion.Linq.Clauses.OrderByClause orderByClause, Remotion.Linq.QueryModel queryModel, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitOrderByClause(class Remotion.Linq.Clauses.OrderByClause orderByClause, class Remotion.Linq.QueryModel queryModel, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitOrderByClause(Remotion.Linq.Clauses.OrderByClause,Remotion.Linq.QueryModel,System.Int32)" />
      <MemberSignature Language="F#" Value="override this.VisitOrderByClause : Remotion.Linq.Clauses.OrderByClause * Remotion.Linq.QueryModel * int -&gt; unit" Usage="relationalQueryModelVisitor.VisitOrderByClause (orderByClause, queryModel, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orderByClause" Type="Remotion.Linq.Clauses.OrderByClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="orderByClause"> The order by clause. </param>
        <param name="queryModel"> The query model. </param>
        <param name="index"> Index of the node being visited. </param>
        <summary>
                Visit an order by clause.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitQueryModel">
      <MemberSignature Language="C#" Value="public override void VisitQueryModel (Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitQueryModel(class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel(Remotion.Linq.QueryModel)" />
      <MemberSignature Language="F#" Value="override this.VisitQueryModel : Remotion.Linq.QueryModel -&gt; unit" Usage="relationalQueryModelVisitor.VisitQueryModel queryModel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="queryModel"> The query model. </param>
        <summary>
                Visit a query model.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitResultOperator">
      <MemberSignature Language="C#" Value="public override void VisitResultOperator (Remotion.Linq.Clauses.ResultOperatorBase resultOperator, Remotion.Linq.QueryModel queryModel, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitResultOperator(class Remotion.Linq.Clauses.ResultOperatorBase resultOperator, class Remotion.Linq.QueryModel queryModel, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitResultOperator(Remotion.Linq.Clauses.ResultOperatorBase,Remotion.Linq.QueryModel,System.Int32)" />
      <MemberSignature Language="F#" Value="override this.VisitResultOperator : Remotion.Linq.Clauses.ResultOperatorBase * Remotion.Linq.QueryModel * int -&gt; unit" Usage="relationalQueryModelVisitor.VisitResultOperator (resultOperator, queryModel, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resultOperator" Type="Remotion.Linq.Clauses.ResultOperatorBase" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="resultOperator"> The result operator being visited. </param>
        <param name="queryModel"> The query model. </param>
        <param name="index"> Index of the node being visited. </param>
        <summary>
                Visit a result operator.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSelectClause">
      <MemberSignature Language="C#" Value="public override void VisitSelectClause (Remotion.Linq.Clauses.SelectClause selectClause, Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitSelectClause(class Remotion.Linq.Clauses.SelectClause selectClause, class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitSelectClause(Remotion.Linq.Clauses.SelectClause,Remotion.Linq.QueryModel)" />
      <MemberSignature Language="F#" Value="override this.VisitSelectClause : Remotion.Linq.Clauses.SelectClause * Remotion.Linq.QueryModel -&gt; unit" Usage="relationalQueryModelVisitor.VisitSelectClause (selectClause, queryModel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectClause" Type="Remotion.Linq.Clauses.SelectClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="selectClause"> The node being visited. </param>
        <param name="queryModel"> The query. </param>
        <summary>
                Visits <see cref="T:Remotion.Linq.Clauses.SelectClause" /> nodes.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitSubQueryModel">
      <MemberSignature Language="C#" Value="public virtual void VisitSubQueryModel (Remotion.Linq.QueryModel queryModel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void VisitSubQueryModel(class Remotion.Linq.QueryModel queryModel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitSubQueryModel(Remotion.Linq.QueryModel)" />
      <MemberSignature Language="F#" Value="abstract member VisitSubQueryModel : Remotion.Linq.QueryModel -&gt; unit&#xA;override this.VisitSubQueryModel : Remotion.Linq.QueryModel -&gt; unit" Usage="relationalQueryModelVisitor.VisitSubQueryModel queryModel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
      </Parameters>
      <Docs>
        <param name="queryModel"> The sub-query model. </param>
        <summary>
                Visit a sub-query model.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitWhereClause">
      <MemberSignature Language="C#" Value="public override void VisitWhereClause (Remotion.Linq.Clauses.WhereClause whereClause, Remotion.Linq.QueryModel queryModel, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void VisitWhereClause(class Remotion.Linq.Clauses.WhereClause whereClause, class Remotion.Linq.QueryModel queryModel, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitWhereClause(Remotion.Linq.Clauses.WhereClause,Remotion.Linq.QueryModel,System.Int32)" />
      <MemberSignature Language="F#" Value="override this.VisitWhereClause : Remotion.Linq.Clauses.WhereClause * Remotion.Linq.QueryModel * int -&gt; unit" Usage="relationalQueryModelVisitor.VisitWhereClause (whereClause, queryModel, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="whereClause" Type="Remotion.Linq.Clauses.WhereClause" />
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="whereClause"> The where clause being visited. </param>
        <param name="queryModel"> The query model. </param>
        <param name="index"> Index of the node being visited. </param>
        <summary>
                Visit a where clause.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WarnClientEval">
      <MemberSignature Language="C#" Value="protected virtual void WarnClientEval (Remotion.Linq.QueryModel queryModel, object queryModelElement);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WarnClientEval(class Remotion.Linq.QueryModel queryModel, object queryModelElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.WarnClientEval(Remotion.Linq.QueryModel,System.Object)" />
      <MemberSignature Language="F#" Value="abstract member WarnClientEval : Remotion.Linq.QueryModel * obj -&gt; unit&#xA;override this.WarnClientEval : Remotion.Linq.QueryModel * obj -&gt; unit" Usage="relationalQueryModelVisitor.WarnClientEval (queryModel, queryModelElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryModel" Type="Remotion.Linq.QueryModel" />
        <Parameter Name="queryModelElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="queryModel"> The query model </param>
        <param name="queryModelElement"> The expression being evaluated by the client. </param>
        <summary>
                Generated a client-eval warning
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>