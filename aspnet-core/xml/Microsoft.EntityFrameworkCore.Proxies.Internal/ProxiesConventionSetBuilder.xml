<Type Name="ProxiesConventionSetBuilder" FullName="Microsoft.EntityFrameworkCore.Proxies.Internal.ProxiesConventionSetBuilder">
  <TypeSignature Language="C#" Value="public class ProxiesConventionSetBuilder : Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ProxiesConventionSetBuilder extends System.Object implements class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Proxies.Internal.ProxiesConventionSetBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class ProxiesConventionSetBuilder&#xA;Implements IConventionSetBuilder" />
  <TypeSignature Language="F#" Value="type ProxiesConventionSetBuilder = class&#xA;    interface IConventionSetBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    This API supports the Entity Framework Core infrastructure and is not intended to be used
                    directly from your code. This API may change or be removed in future releases.
                </para>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> and multiple registrations
                    are allowed. This means that each <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own
                    set of instances of this service.
                    The implementations may depend on other services registered with any lifetime.
                    The implementations do not need to be thread-safe.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProxiesConventionSetBuilder (Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions options, Microsoft.EntityFrameworkCore.Metadata.Internal.IConstructorBindingFactory constructorBindingFactory, Microsoft.EntityFrameworkCore.Proxies.Internal.IProxyFactory proxyFactory, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; logger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions options, class Microsoft.EntityFrameworkCore.Metadata.Internal.IConstructorBindingFactory constructorBindingFactory, class Microsoft.EntityFrameworkCore.Proxies.Internal.IProxyFactory proxyFactory, class Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1&lt;class Microsoft.EntityFrameworkCore.DbLoggerCategory/Model&gt; logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Proxies.Internal.ProxiesConventionSetBuilder.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,Microsoft.EntityFrameworkCore.Metadata.Internal.IConstructorBindingFactory,Microsoft.EntityFrameworkCore.Proxies.Internal.IProxyFactory,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As IDbContextOptions, constructorBindingFactory As IConstructorBindingFactory, proxyFactory As IProxyFactory, logger As IDiagnosticsLogger(Of DbLoggerCategory.Model))" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Proxies.Internal.ProxiesConventionSetBuilder : Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions * Microsoft.EntityFrameworkCore.Metadata.Internal.IConstructorBindingFactory * Microsoft.EntityFrameworkCore.Proxies.Internal.IProxyFactory * Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory.Model&gt; -&gt; Microsoft.EntityFrameworkCore.Proxies.Internal.ProxiesConventionSetBuilder" Usage="new Microsoft.EntityFrameworkCore.Proxies.Internal.ProxiesConventionSetBuilder (options, constructorBindingFactory, proxyFactory, logger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions" />
        <Parameter Name="constructorBindingFactory" Type="Microsoft.EntityFrameworkCore.Metadata.Internal.IConstructorBindingFactory" />
        <Parameter Name="proxyFactory" Type="Microsoft.EntityFrameworkCore.Proxies.Internal.IProxyFactory" />
        <Parameter Name="logger" Type="Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger&lt;Microsoft.EntityFrameworkCore.DbLoggerCategory+Model&gt;" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <param name="constructorBindingFactory">To be added.</param>
        <param name="proxyFactory">To be added.</param>
        <param name="logger">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddConventions">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet AddConventions (Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet conventionSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet AddConventions(class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet conventionSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Proxies.Internal.ProxiesConventionSetBuilder.AddConventions(Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet)" />
      <MemberSignature Language="F#" Value="abstract member AddConventions : Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet&#xA;override this.AddConventions : Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet -&gt; Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" Usage="proxiesConventionSetBuilder.AddConventions conventionSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IConventionSetBuilder.AddConventions(Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Proxies</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conventionSet" Type="Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" />
      </Parameters>
      <Docs>
        <param name="conventionSet">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>