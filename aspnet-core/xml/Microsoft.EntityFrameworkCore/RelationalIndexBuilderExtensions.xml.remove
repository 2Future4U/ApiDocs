<Type Name="RelationalIndexBuilderExtensions" FullName="Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class RelationalIndexBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit RelationalIndexBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module RelationalIndexBuilderExtensions" />
  <TypeSignature Language="F#" Value="type RelationalIndexBuilderExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
                Relational database specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="HasFilter">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder HasFilter (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, string sql);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder HasFilter(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, string sql) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasFilter(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String)" />
      <MemberSignature Language="F#" Value="static member HasFilter : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasFilter (indexBuilder, sql)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" RefType="this" />
        <Parameter Name="sql" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="sql"> The filter expression for the index. </param>
        <summary>
                Determines whether the specified index has filter expression.
            </summary>
        <returns>A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasFilter&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; HasFilter&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; indexBuilder, string sql);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!!TEntity&gt; HasFilter&lt;TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!!TEntity&gt; indexBuilder, string sql) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasFilter``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasFilter(Of TEntity) (indexBuilder As IndexBuilder(Of TEntity), sql As String) As IndexBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member HasFilter : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasFilter (indexBuilder, sql)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;" RefType="this" />
        <Parameter Name="sql" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The entity type being configured. </typeparam>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="sql"> The filter expression for the index. </param>
        <summary>
                Determines whether the specified index has filter expression.
            </summary>
        <returns>A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasName">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder HasName (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder HasName(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder indexBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasName(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String)" />
      <MemberSignature Language="F#" Value="static member HasName : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" Usage="Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasName (indexBuilder, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="name"> The name of the index. </param>
        <summary>
                Configures the name of the index in the database when targeting a relational database.
            </summary>
        <returns> A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasName&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; HasName&lt;TEntity&gt; (this Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt; indexBuilder, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!!TEntity&gt; HasName&lt;TEntity&gt;(class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1&lt;!!TEntity&gt; indexBuilder, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function HasName(Of TEntity) (indexBuilder As IndexBuilder(Of TEntity), name As String) As IndexBuilder(Of TEntity)" />
      <MemberSignature Language="F#" Value="static member HasName : Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity&gt; * string -&gt; Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;'Entity&gt;" Usage="Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasName (indexBuilder, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore.Relational</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="indexBuilder" Type="Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder&lt;TEntity&gt;" RefType="this" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"> The entity type being configured. </typeparam>
        <param name="indexBuilder"> The builder for the index being configured. </param>
        <param name="name"> The name of the index. </param>
        <summary>
                Configures the name of the index in the database when targeting a relational database.
            </summary>
        <returns> A builder to further configure the index. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
