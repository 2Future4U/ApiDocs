<Type Name="Renderer" FullName="Microsoft.AspNetCore.Components.Rendering.Renderer">
  <TypeSignature Language="C#" Value="public abstract class Renderer : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Renderer extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Components.Rendering.Renderer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Renderer&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Renderer abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type Renderer = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Provides mechanisms for rendering hierarchies of <see cref="T:Microsoft.AspNetCore.Components.IComponent" /> instances,
            dispatching events to them, and notifying when the user interface is being updated.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Renderer (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Rendering.Renderer.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Renderer(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Components.Rendering.Renderer : IServiceProvider -&gt; Microsoft.AspNetCore.Components.Rendering.Renderer" Usage="new Microsoft.AspNetCore.Components.Rendering.Renderer serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> to be used when initializing components.</param>
        <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Renderer (IServiceProvider serviceProvider, Microsoft.AspNetCore.Components.Rendering.IDispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider, class Microsoft.AspNetCore.Components.Rendering.IDispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Rendering.Renderer.#ctor(System.IServiceProvider,Microsoft.AspNetCore.Components.Rendering.IDispatcher)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider, dispatcher As IDispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Renderer(IServiceProvider ^ serviceProvider, Microsoft::AspNetCore::Components::Rendering::IDispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Components.Rendering.Renderer : IServiceProvider * Microsoft.AspNetCore.Components.Rendering.IDispatcher -&gt; Microsoft.AspNetCore.Components.Rendering.Renderer" Usage="new Microsoft.AspNetCore.Components.Rendering.Renderer (serviceProvider, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        <Parameter Name="dispatcher" Type="Microsoft.AspNetCore.Components.Rendering.IDispatcher" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> to be used when initializing components.</param>
        <param name="dispatcher">The <see cref="T:Microsoft.AspNetCore.Components.Rendering.IDispatcher" /> to be for invoking user actions into the <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer" /> context.</param>
        <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToRenderQueue">
      <MemberSignature Language="C#" Value="protected internal virtual void AddToRenderQueue (int componentId, Microsoft.AspNetCore.Components.RenderFragment renderFragment);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void AddToRenderQueue(int32 componentId, class Microsoft.AspNetCore.Components.RenderFragment renderFragment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Rendering.Renderer.AddToRenderQueue(System.Int32,Microsoft.AspNetCore.Components.RenderFragment)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void AddToRenderQueue(int componentId, Microsoft::AspNetCore::Components::RenderFragment ^ renderFragment);" />
      <MemberSignature Language="F#" Value="abstract member AddToRenderQueue : int * Microsoft.AspNetCore.Components.RenderFragment -&gt; unit&#xA;override this.AddToRenderQueue : int * Microsoft.AspNetCore.Components.RenderFragment -&gt; unit" Usage="renderer.AddToRenderQueue (componentId, renderFragment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="componentId" Type="System.Int32" />
        <Parameter Name="renderFragment" Type="Microsoft.AspNetCore.Components.RenderFragment" />
      </Parameters>
      <Docs>
        <param name="componentId">The ID of the component to render.</param>
        <param name="renderFragment">A <see cref="T:Microsoft.AspNetCore.Components.RenderFragment" /> that will supply the updated UI contents.</param>
        <summary>
            Schedules a render for the specified <paramref name="componentId" />. Its display
            will be populated using the specified <paramref name="renderFragment" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignRootComponentId">
      <MemberSignature Language="C#" Value="protected internal int AssignRootComponentId (Microsoft.AspNetCore.Components.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance int32 AssignRootComponentId(class Microsoft.AspNetCore.Components.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Rendering.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function AssignRootComponentId (component As IComponent) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; int AssignRootComponentId(Microsoft::AspNetCore::Components::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="member this.AssignRootComponentId : Microsoft.AspNetCore.Components.IComponent -&gt; int" Usage="renderer.AssignRootComponentId component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="Microsoft.AspNetCore.Components.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">The component.</param>
        <summary>
            Associates the <see cref="T:Microsoft.AspNetCore.Components.IComponent" /> with the <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer" />, assigning
            an identifier that is unique within the scope of the <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer" />.
            </summary>
        <returns>The component's assigned identifier.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultDispatcher">
      <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Components.Rendering.IDispatcher CreateDefaultDispatcher ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Components.Rendering.IDispatcher CreateDefaultDispatcher() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Rendering.Renderer.CreateDefaultDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDefaultDispatcher () As IDispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::AspNetCore::Components::Rendering::IDispatcher ^ CreateDefaultDispatcher();" />
      <MemberSignature Language="F#" Value="static member CreateDefaultDispatcher : unit -&gt; Microsoft.AspNetCore.Components.Rendering.IDispatcher" Usage="Microsoft.AspNetCore.Components.Rendering.Renderer.CreateDefaultDispatcher " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Components.Rendering.IDispatcher</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates an <see cref="T:Microsoft.AspNetCore.Components.Rendering.IDispatcher" /> that can be used with one or more <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer" />.
            </summary>
        <returns>The <see cref="T:Microsoft.AspNetCore.Components.Rendering.IDispatcher" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchEventAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DispatchEventAsync (int eventHandlerId, Microsoft.AspNetCore.Components.Rendering.EventFieldInfo fieldInfo, Microsoft.AspNetCore.Components.UIEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DispatchEventAsync(int32 eventHandlerId, class Microsoft.AspNetCore.Components.Rendering.EventFieldInfo fieldInfo, class Microsoft.AspNetCore.Components.UIEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Rendering.Renderer.DispatchEventAsync(System.Int32,Microsoft.AspNetCore.Components.Rendering.EventFieldInfo,Microsoft.AspNetCore.Components.UIEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DispatchEventAsync (eventHandlerId As Integer, fieldInfo As EventFieldInfo, eventArgs As UIEventArgs) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ DispatchEventAsync(int eventHandlerId, Microsoft::AspNetCore::Components::Rendering::EventFieldInfo ^ fieldInfo, Microsoft::AspNetCore::Components::UIEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="abstract member DispatchEventAsync : int * Microsoft.AspNetCore.Components.Rendering.EventFieldInfo * Microsoft.AspNetCore.Components.UIEventArgs -&gt; System.Threading.Tasks.Task&#xA;override this.DispatchEventAsync : int * Microsoft.AspNetCore.Components.Rendering.EventFieldInfo * Microsoft.AspNetCore.Components.UIEventArgs -&gt; System.Threading.Tasks.Task" Usage="renderer.DispatchEventAsync (eventHandlerId, fieldInfo, eventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHandlerId" Type="System.Int32" />
        <Parameter Name="fieldInfo" Type="Microsoft.AspNetCore.Components.Rendering.EventFieldInfo" />
        <Parameter Name="eventArgs" Type="Microsoft.AspNetCore.Components.UIEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventHandlerId">The <see cref="F:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeEventHandlerId" /> value from the original event attribute.</param>
        <param name="fieldInfo">Information that the renderer can use to update the state of the existing render tree to match the UI.</param>
        <param name="eventArgs">Arguments to be passed to the event handler.</param>
        <summary>
            Notifies the renderer that an event has occurred.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> which will complete once all asynchronous processing related to the event
            has completed.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Rendering.Renderer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="renderer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Releases all resources currently used by this <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Rendering.Renderer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="renderer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> if this method is being invoked by <see cref="M:System.IDisposable.Dispose" />, otherwise <see langword="false" />.</param>
        <summary>
            Releases all resources currently used by this <see cref="T:Microsoft.AspNetCore.Components.Rendering.Renderer" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleException">
      <MemberSignature Language="C#" Value="protected abstract void HandleException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void HandleException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Rendering.Renderer.HandleException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void HandleException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="abstract member HandleException : Exception -&gt; unit" Usage="renderer.HandleException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">The <see cref="T:System.Exception" />.</param>
        <summary>
            Allows derived types to handle exceptions during rendering. Defaults to rethrowing the original exception.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstantiateComponent">
      <MemberSignature Language="C#" Value="protected Microsoft.AspNetCore.Components.IComponent InstantiateComponent (Type componentType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.AspNetCore.Components.IComponent InstantiateComponent(class System.Type componentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Rendering.Renderer.InstantiateComponent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function InstantiateComponent (componentType As Type) As IComponent" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Microsoft::AspNetCore::Components::IComponent ^ InstantiateComponent(Type ^ componentType);" />
      <MemberSignature Language="F#" Value="member this.InstantiateComponent : Type -&gt; Microsoft.AspNetCore.Components.IComponent" Usage="renderer.InstantiateComponent componentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Components.IComponent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="componentType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="componentType">The type of the component to instantiate.</param>
        <summary>
            Constructs a new component of the specified type.
            </summary>
        <returns>The component instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task Invoke (Action workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Invoke(class System.Action workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Rendering.Renderer.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Invoke (workItem As Action) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ Invoke(Action ^ workItem);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Action -&gt; System.Threading.Tasks.Task&#xA;override this.Invoke : Action -&gt; System.Threading.Tasks.Task" Usage="renderer.Invoke workItem" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workItem" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="workItem">The work item to execute.</param>
        <summary>
            Executes the supplied work item on the renderer's
            synchronization context.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task InvokeAsync (Func&lt;System.Threading.Tasks.Task&gt; workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task InvokeAsync(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Rendering.Renderer.InvokeAsync(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function InvokeAsync (workItem As Func(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ InvokeAsync(Func&lt;System::Threading::Tasks::Task ^&gt; ^ workItem);" />
      <MemberSignature Language="F#" Value="abstract member InvokeAsync : Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task&#xA;override this.InvokeAsync : Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="renderer.InvokeAsync workItem" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workItem" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="workItem">The work item to execute.</param>
        <summary>
            Executes the supplied work item on the renderer's
            synchronization context.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderRootComponentAsync">
      <MemberSignature Language="C#" Value="protected System.Threading.Tasks.Task RenderRootComponentAsync (int componentId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Threading.Tasks.Task RenderRootComponentAsync(int32 componentId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Rendering.Renderer.RenderRootComponentAsync(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RenderRootComponentAsync (componentId As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Threading::Tasks::Task ^ RenderRootComponentAsync(int componentId);" />
      <MemberSignature Language="F#" Value="member this.RenderRootComponentAsync : int -&gt; System.Threading.Tasks.Task" Usage="renderer.RenderRootComponentAsync componentId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="componentId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="componentId">The ID returned by <see cref="M:Microsoft.AspNetCore.Components.Rendering.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent)" />.</param>
        <summary>
            Performs the first render for a root component, waiting for this component and all
            children components to finish rendering in case there is any asynchronous work being
            done by any of the components. After this, the root component
            makes its own decisions about when to re-render, so there is no need to call
            this more than once.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Rendering a root component is an asynchronous operation. Clients may choose to not await the returned task to
            start, but not wait for the entire render to complete.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderRootComponentAsync">
      <MemberSignature Language="C#" Value="protected System.Threading.Tasks.Task RenderRootComponentAsync (int componentId, Microsoft.AspNetCore.Components.ParameterCollection initialParameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Threading.Tasks.Task RenderRootComponentAsync(int32 componentId, valuetype Microsoft.AspNetCore.Components.ParameterCollection initialParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Rendering.Renderer.RenderRootComponentAsync(System.Int32,Microsoft.AspNetCore.Components.ParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RenderRootComponentAsync (componentId As Integer, initialParameters As ParameterCollection) As Task" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Threading::Tasks::Task ^ RenderRootComponentAsync(int componentId, Microsoft::AspNetCore::Components::ParameterCollection initialParameters);" />
      <MemberSignature Language="F#" Value="member this.RenderRootComponentAsync : int * Microsoft.AspNetCore.Components.ParameterCollection -&gt; System.Threading.Tasks.Task" Usage="renderer.RenderRootComponentAsync (componentId, initialParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="componentId" Type="System.Int32" />
        <Parameter Name="initialParameters" Type="Microsoft.AspNetCore.Components.ParameterCollection" />
      </Parameters>
      <Docs>
        <param name="componentId">The ID returned by <see cref="M:Microsoft.AspNetCore.Components.Rendering.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent)" />.</param>
        <param name="initialParameters">The <see cref="T:Microsoft.AspNetCore.Components.ParameterCollection" />with the initial parameters to use for rendering.</param>
        <summary>
            Performs the first render for a root component, waiting for this component and all
            children components to finish rendering in case there is any asynchronous work being
            done by any of the components. After this, the root component
            makes its own decisions about when to re-render, so there is no need to call
            this more than once.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Rendering a root component is an asynchronous operation. Clients may choose to not await the returned task to
            start, but not wait for the entire render to complete.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledSynchronizationException">
      <MemberSignature Language="C#" Value="public event UnhandledExceptionEventHandler UnhandledSynchronizationException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.UnhandledExceptionEventHandler UnhandledSynchronizationException" />
      <MemberSignature Language="DocId" Value="E:Microsoft.AspNetCore.Components.Rendering.Renderer.UnhandledSynchronizationException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledSynchronizationException As UnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event UnhandledExceptionEventHandler ^ UnhandledSynchronizationException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledSynchronizationException : UnhandledExceptionEventHandler " Usage="member this.UnhandledSynchronizationException : System.UnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Allows the caller to handle exceptions from the SynchronizationContext when one is available.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateDisplayAsync">
      <MemberSignature Language="C#" Value="protected abstract System.Threading.Tasks.Task UpdateDisplayAsync (Microsoft.AspNetCore.Components.Rendering.RenderBatch renderBatch);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task UpdateDisplayAsync([in]class Microsoft.AspNetCore.Components.Rendering.RenderBatch renderBatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Rendering.Renderer.UpdateDisplayAsync(Microsoft.AspNetCore.Components.Rendering.RenderBatch@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function UpdateDisplayAsync (renderBatch As RenderBatch) As Task" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Threading::Tasks::Task ^ UpdateDisplayAsync(Microsoft::AspNetCore::Components::Rendering::RenderBatch ^ renderBatch);" />
      <MemberSignature Language="F#" Value="abstract member UpdateDisplayAsync : Microsoft.AspNetCore.Components.Rendering.RenderBatch -&gt; System.Threading.Tasks.Task" Usage="renderer.UpdateDisplayAsync renderBatch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="renderBatch" Type="Microsoft.AspNetCore.Components.Rendering.RenderBatch" />
      </Parameters>
      <Docs>
        <param name="renderBatch">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
