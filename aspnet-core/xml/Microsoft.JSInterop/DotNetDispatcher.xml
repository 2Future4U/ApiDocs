<Type Name="DotNetDispatcher" FullName="Microsoft.JSInterop.DotNetDispatcher">
  <TypeSignature Language="C#" Value="public static class DotNetDispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DotNetDispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.JSInterop.DotNetDispatcher" />
  <TypeSignature Language="VB.NET" Value="Public Class DotNetDispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class DotNetDispatcher abstract sealed" />
  <TypeSignature Language="F#" Value="type DotNetDispatcher = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JSInterop</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides methods that receive incoming calls from JS to .NET.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public static void BeginInvoke (string callId, string assemblyName, string methodIdentifier, long dotNetObjectId, string argsJson);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BeginInvoke(string callId, string assemblyName, string methodIdentifier, int64 dotNetObjectId, string argsJson) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JSInterop.DotNetDispatcher.BeginInvoke(System.String,System.String,System.String,System.Int64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BeginInvoke (callId As String, assemblyName As String, methodIdentifier As String, dotNetObjectId As Long, argsJson As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BeginInvoke(System::String ^ callId, System::String ^ assemblyName, System::String ^ methodIdentifier, long dotNetObjectId, System::String ^ argsJson);" />
      <MemberSignature Language="F#" Value="static member BeginInvoke : string * string * string * int64 * string -&gt; unit" Usage="Microsoft.JSInterop.DotNetDispatcher.BeginInvoke (callId, assemblyName, methodIdentifier, dotNetObjectId, argsJson)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JSInterop</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callId" Type="System.String" />
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="methodIdentifier" Type="System.String" />
        <Parameter Name="dotNetObjectId" Type="System.Int64" />
        <Parameter Name="argsJson" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="callId">A value identifying the asynchronous call that should be passed back with the result, or null if no result notification is required.</param>
        <param name="assemblyName">The assembly containing the method to be invoked.</param>
        <param name="methodIdentifier">The identifier of the method to be invoked. The method must be annotated with a <see cref="T:Microsoft.JSInterop.JSInvokableAttribute" /> matching this identifier string.</param>
        <param name="dotNetObjectId">For instance method calls, identifies the target object.</param>
        <param name="argsJson">A JSON representation of the parameters.</param>
        <summary>
            Receives a call from JS to .NET, locating and invoking the specified method asynchronously.
            </summary>
        <returns>A JSON representation of the return value, or null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public static void EndInvoke (long asyncHandle, bool succeeded, Microsoft.JSInterop.Internal.JSAsyncCallResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndInvoke(int64 asyncHandle, bool succeeded, class Microsoft.JSInterop.Internal.JSAsyncCallResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JSInterop.DotNetDispatcher.EndInvoke(System.Int64,System.Boolean,Microsoft.JSInterop.Internal.JSAsyncCallResult)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndInvoke (asyncHandle As Long, succeeded As Boolean, result As JSAsyncCallResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndInvoke(long asyncHandle, bool succeeded, Microsoft::JSInterop::Internal::JSAsyncCallResult ^ result);" />
      <MemberSignature Language="F#" Value="static member EndInvoke : int64 * bool * Microsoft.JSInterop.Internal.JSAsyncCallResult -&gt; unit" Usage="Microsoft.JSInterop.DotNetDispatcher.EndInvoke (asyncHandle, succeeded, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JSInterop</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.JSInterop.JSInvokable("DotNetDispatcher.EndInvoke")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncHandle" Type="System.Int64" />
        <Parameter Name="succeeded" Type="System.Boolean" />
        <Parameter Name="result" Type="Microsoft.JSInterop.Internal.JSAsyncCallResult" />
      </Parameters>
      <Docs>
        <param name="asyncHandle">The identifier for the function invocation.</param>
        <param name="succeeded">A flag to indicate whether the invocation succeeded.</param>
        <param name="result">If <paramref name="succeeded" /> is <c>true</c>, specifies the invocation result. If <paramref name="succeeded" /> is <c>false</c>, gives the <see cref="T:System.Exception" /> corresponding to the invocation failure.</param>
        <summary>
            Receives notification that a call from .NET to JS has finished, marking the
            associated <see cref="T:System.Threading.Tasks.Task" /> as completed.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static string Invoke (string assemblyName, string methodIdentifier, long dotNetObjectId, string argsJson);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Invoke(string assemblyName, string methodIdentifier, int64 dotNetObjectId, string argsJson) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JSInterop.DotNetDispatcher.Invoke(System.String,System.String,System.Int64,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (assemblyName As String, methodIdentifier As String, dotNetObjectId As Long, argsJson As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Invoke(System::String ^ assemblyName, System::String ^ methodIdentifier, long dotNetObjectId, System::String ^ argsJson);" />
      <MemberSignature Language="F#" Value="static member Invoke : string * string * int64 * string -&gt; string" Usage="Microsoft.JSInterop.DotNetDispatcher.Invoke (assemblyName, methodIdentifier, dotNetObjectId, argsJson)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JSInterop</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="methodIdentifier" Type="System.String" />
        <Parameter Name="dotNetObjectId" Type="System.Int64" />
        <Parameter Name="argsJson" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">The assembly containing the method to be invoked.</param>
        <param name="methodIdentifier">The identifier of the method to be invoked. The method must be annotated with a <see cref="T:Microsoft.JSInterop.JSInvokableAttribute" /> matching this identifier string.</param>
        <param name="dotNetObjectId">For instance method calls, identifies the target object.</param>
        <param name="argsJson">A JSON representation of the parameters.</param>
        <summary>
            Receives a call from JS to .NET, locating and invoking the specified method.
            </summary>
        <returns>A JSON representation of the return value, or null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseDotNetObject">
      <MemberSignature Language="C#" Value="public static void ReleaseDotNetObject (long dotNetObjectId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReleaseDotNetObject(int64 dotNetObjectId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JSInterop.DotNetDispatcher.ReleaseDotNetObject(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReleaseDotNetObject (dotNetObjectId As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReleaseDotNetObject(long dotNetObjectId);" />
      <MemberSignature Language="F#" Value="static member ReleaseDotNetObject : int64 -&gt; unit" Usage="Microsoft.JSInterop.DotNetDispatcher.ReleaseDotNetObject dotNetObjectId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JSInterop</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Microsoft.JSInterop.JSInvokable("DotNetDispatcher.ReleaseDotNetObject")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dotNetObjectId" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dotNetObjectId">The identifier previously passed to JavaScript code.</param>
        <summary>
             Releases the reference to the specified .NET object. This allows the .NET runtime
             to garbage collect that object if there are no other references to it.
            
             To avoid leaking memory, the JavaScript side code must call this for every .NET
             object it obtains a reference to. The exception is if that object is used for
             the entire lifetime of a given user's session, in which case it is released
             automatically when the JavaScript runtime is disposed.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
