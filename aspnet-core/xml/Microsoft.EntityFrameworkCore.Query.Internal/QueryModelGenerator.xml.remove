<Type Name="QueryModelGenerator" FullName="Microsoft.EntityFrameworkCore.Query.Internal.QueryModelGenerator">
  <TypeSignature Language="C#" Value="public class QueryModelGenerator : Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit QueryModelGenerator extends System.Object implements class Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelGenerator" />
  <TypeSignature Language="VB.NET" Value="Public Class QueryModelGenerator&#xA;Implements IQueryModelGenerator" />
  <TypeSignature Language="F#" Value="type QueryModelGenerator = class&#xA;    interface IQueryModelGenerator" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <para>
                    This API supports the Entity Framework Core infrastructure and is not intended to be used
                    directly from your code. This API may change or be removed in future releases.
                </para>
      <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QueryModelGenerator (Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory nodeTypeProviderFactory, Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter reLinqEvaluatableExpressionFilter, Microsoft.EntityFrameworkCore.Query.Internal.IEvaluatableExpressionFilter evaluatableExpressionFilter, Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext currentDbContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory nodeTypeProviderFactory, class Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter reLinqEvaluatableExpressionFilter, class Microsoft.EntityFrameworkCore.Query.Internal.IEvaluatableExpressionFilter evaluatableExpressionFilter, class Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext currentDbContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelGenerator.#ctor(Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory,Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter,Microsoft.EntityFrameworkCore.Query.Internal.IEvaluatableExpressionFilter,Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (nodeTypeProviderFactory As INodeTypeProviderFactory, reLinqEvaluatableExpressionFilter As IEvaluatableExpressionFilter, evaluatableExpressionFilter As IEvaluatableExpressionFilter, currentDbContext As ICurrentDbContext)" />
      <MemberSignature Language="F#" Value="new Microsoft.EntityFrameworkCore.Query.Internal.QueryModelGenerator : Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory * Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter * Microsoft.EntityFrameworkCore.Query.Internal.IEvaluatableExpressionFilter * Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext -&gt; Microsoft.EntityFrameworkCore.Query.Internal.QueryModelGenerator" Usage="new Microsoft.EntityFrameworkCore.Query.Internal.QueryModelGenerator (nodeTypeProviderFactory, reLinqEvaluatableExpressionFilter, evaluatableExpressionFilter, currentDbContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nodeTypeProviderFactory" Type="Microsoft.EntityFrameworkCore.Query.Internal.INodeTypeProviderFactory" />
        <Parameter Name="reLinqEvaluatableExpressionFilter" Type="Remotion.Linq.Parsing.ExpressionVisitors.TreeEvaluation.IEvaluatableExpressionFilter" />
        <Parameter Name="evaluatableExpressionFilter" Type="Microsoft.EntityFrameworkCore.Query.Internal.IEvaluatableExpressionFilter" />
        <Parameter Name="currentDbContext" Type="Microsoft.EntityFrameworkCore.Internal.ICurrentDbContext" />
      </Parameters>
      <Docs>
        <param name="nodeTypeProviderFactory">To be added.</param>
        <param name="reLinqEvaluatableExpressionFilter">To be added.</param>
        <param name="evaluatableExpressionFilter">To be added.</param>
        <param name="currentDbContext">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluatableExpressionFilter">
      <MemberSignature Language="C#" Value="public virtual Microsoft.EntityFrameworkCore.Query.Internal.IEvaluatableExpressionFilter EvaluatableExpressionFilter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.Query.Internal.IEvaluatableExpressionFilter EvaluatableExpressionFilter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelGenerator.EvaluatableExpressionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EvaluatableExpressionFilter As IEvaluatableExpressionFilter" />
      <MemberSignature Language="F#" Value="member this.EvaluatableExpressionFilter : Microsoft.EntityFrameworkCore.Query.Internal.IEvaluatableExpressionFilter" Usage="Microsoft.EntityFrameworkCore.Query.Internal.QueryModelGenerator.EvaluatableExpressionFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.Query.Internal.IEvaluatableExpressionFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseQuery">
      <MemberSignature Language="C#" Value="public virtual Remotion.Linq.QueryModel ParseQuery (System.Linq.Expressions.Expression query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Remotion.Linq.QueryModel ParseQuery(class System.Linq.Expressions.Expression query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.EntityFrameworkCore.Query.Internal.QueryModelGenerator.ParseQuery(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ParseQuery (query As Expression) As QueryModel" />
      <MemberSignature Language="F#" Value="abstract member ParseQuery : System.Linq.Expressions.Expression -&gt; Remotion.Linq.QueryModel&#xA;override this.ParseQuery : System.Linq.Expressions.Expression -&gt; Remotion.Linq.QueryModel" Usage="queryModelGenerator.ParseQuery query" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator.ParseQuery(System.Linq.Expressions.Expression)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Remotion.Linq.QueryModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="query">To be added.</param>
        <summary>
                This API supports the Entity Framework Core infrastructure and is not intended to be used
                directly from your code. This API may change or be removed in future releases.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
