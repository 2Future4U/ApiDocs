<Type Name="MediaTypeFormatter" FullName="System.Net.Http.Formatting.MediaTypeFormatter">
  <TypeSignature Language="C#" Value="public abstract class MediaTypeFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MediaTypeFormatter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Http.Formatting.MediaTypeFormatter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MediaTypeFormatter" />
  <TypeSignature Language="F#" Value="type MediaTypeFormatter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Http.Formatting</AssemblyName>
    <AssemblyVersion>5.2.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> Base class to handle serializing and deserializing strongly-typed objects using <see cref="T:System.Net.Http.ObjectContent" />. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MediaTypeFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MediaTypeFormatter (System.Net.Http.Formatting.MediaTypeFormatter formatter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Net.Http.Formatting.MediaTypeFormatter formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatter.#ctor(System.Net.Http.Formatting.MediaTypeFormatter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (formatter As MediaTypeFormatter)" />
      <MemberSignature Language="F#" Value="new System.Net.Http.Formatting.MediaTypeFormatter : System.Net.Http.Formatting.MediaTypeFormatter -&gt; System.Net.Http.Formatting.MediaTypeFormatter" Usage="new System.Net.Http.Formatting.MediaTypeFormatter formatter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
      </Parameters>
      <Docs>
        <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> instance to copy settings from.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReadType">
      <MemberSignature Language="C#" Value="public abstract bool CanReadType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatter.CanReadType(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member CanReadType : Type -&gt; bool" Usage="mediaTypeFormatter.CanReadType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type to deserialize.</param>
        <summary>Queries whether this <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> can deserializean object of the specified type.</summary>
        <returns>true if the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> can deserialize the type; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWriteType">
      <MemberSignature Language="C#" Value="public abstract bool CanWriteType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanWriteType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member CanWriteType : Type -&gt; bool" Usage="mediaTypeFormatter.CanWriteType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type to serialize.</param>
        <summary>Queries whether this <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> can serializean object of the specified type.</summary>
        <returns>true if the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> can serialize the type; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultValueForType">
      <MemberSignature Language="C#" Value="public static object GetDefaultValueForType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetDefaultValueForType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType(System.Type)" />
      <MemberSignature Language="F#" Value="static member GetDefaultValueForType : Type -&gt; obj" Usage="System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type for which to get the default value.</param>
        <summary>Gets the default value for the specified type.</summary>
        <returns>The default value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPerRequestFormatterInstance">
      <MemberSignature Language="C#" Value="public virtual System.Net.Http.Formatting.MediaTypeFormatter GetPerRequestFormatterInstance (Type type, System.Net.Http.HttpRequestMessage request, System.Net.Http.Headers.MediaTypeHeaderValue mediaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Net.Http.Formatting.MediaTypeFormatter GetPerRequestFormatterInstance(class System.Type type, class System.Net.Http.HttpRequestMessage request, class System.Net.Http.Headers.MediaTypeHeaderValue mediaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)" />
      <MemberSignature Language="F#" Value="abstract member GetPerRequestFormatterInstance : Type * System.Net.Http.HttpRequestMessage * System.Net.Http.Headers.MediaTypeHeaderValue -&gt; System.Net.Http.Formatting.MediaTypeFormatter&#xA;override this.GetPerRequestFormatterInstance : Type * System.Net.Http.HttpRequestMessage * System.Net.Http.Headers.MediaTypeHeaderValue -&gt; System.Net.Http.Formatting.MediaTypeFormatter" Usage="mediaTypeFormatter.GetPerRequestFormatterInstance (type, request, mediaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Formatting.MediaTypeFormatter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="mediaType" Type="System.Net.Http.Headers.MediaTypeHeaderValue" />
      </Parameters>
      <Docs>
        <param name="type">The type to format.</param>
        <param name="request">The request.</param>
        <param name="mediaType">The media type.</param>
        <summary>Returns a specialized instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> that can format a response for the given parameters.</summary>
        <returns>Returns <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHttpCollectionKeys">
      <MemberSignature Language="C#" Value="public static int MaxHttpCollectionKeys { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxHttpCollectionKeys" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.Formatting.MediaTypeFormatter.MaxHttpCollectionKeys" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property MaxHttpCollectionKeys As Integer" />
      <MemberSignature Language="F#" Value="member this.MaxHttpCollectionKeys : int with get, set" Usage="System.Net.Http.Formatting.MediaTypeFormatter.MaxHttpCollectionKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum number of keys stored in a T: <see cref="System.Collections.Specialized.NameValueCollection" />.</summary>
        <value>The maximum number of keys.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaTypeMappings">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Net.Http.Formatting.MediaTypeMapping&gt; MediaTypeMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Net.Http.Formatting.MediaTypeMapping&gt; MediaTypeMappings" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MediaTypeMappings As Collection(Of MediaTypeMapping)" />
      <MemberSignature Language="F#" Value="member this.MediaTypeMappings : System.Collections.ObjectModel.Collection&lt;System.Net.Http.Formatting.MediaTypeMapping&gt;" Usage="System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Net.Http.Formatting.MediaTypeMapping&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the mutable collection of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> objects that match HTTP requests to media types.</summary>
        <value>The <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> collection.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; ReadFromStreamAsync (Type type, System.IO.Stream readStream, System.Net.Http.HttpContent content, System.Net.Http.Formatting.IFormatterLogger formatterLogger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ReadFromStreamAsync(class System.Type type, class System.IO.Stream readStream, class System.Net.Http.HttpContent content, class System.Net.Http.Formatting.IFormatterLogger formatterLogger) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)" />
      <MemberSignature Language="F#" Value="abstract member ReadFromStreamAsync : Type * System.IO.Stream * System.Net.Http.HttpContent * System.Net.Http.Formatting.IFormatterLogger -&gt; System.Threading.Tasks.Task&lt;obj&gt;&#xA;override this.ReadFromStreamAsync : Type * System.IO.Stream * System.Net.Http.HttpContent * System.Net.Http.Formatting.IFormatterLogger -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="mediaTypeFormatter.ReadFromStreamAsync (type, readStream, content, formatterLogger)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="readStream" Type="System.IO.Stream" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="formatterLogger" Type="System.Net.Http.Formatting.IFormatterLogger" />
      </Parameters>
      <Docs>
        <param name="type">The type of the object to deserialize.</param>
        <param name="readStream">The <see cref="T:System.IO.Stream" /> to read.</param>
        <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. It may be null.</param>
        <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
        <summary>Asynchronously deserializes an object of the specified type.</summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> whose result will be an object of the given type.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Derived types need to support reading.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadFromStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; ReadFromStreamAsync (Type type, System.IO.Stream readStream, System.Net.Http.HttpContent content, System.Net.Http.Formatting.IFormatterLogger formatterLogger, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ReadFromStreamAsync(class System.Type type, class System.IO.Stream readStream, class System.Net.Http.HttpContent content, class System.Net.Http.Formatting.IFormatterLogger formatterLogger, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadFromStreamAsync : Type * System.IO.Stream * System.Net.Http.HttpContent * System.Net.Http.Formatting.IFormatterLogger * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;&#xA;override this.ReadFromStreamAsync : Type * System.IO.Stream * System.Net.Http.HttpContent * System.Net.Http.Formatting.IFormatterLogger * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="mediaTypeFormatter.ReadFromStreamAsync (type, readStream, content, formatterLogger, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="readStream" Type="System.IO.Stream" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="formatterLogger" Type="System.Net.Http.Formatting.IFormatterLogger" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="type">The type of the object to deserialize.</param>
        <param name="readStream">The <see cref="T:System.IO.Stream" /> to read.</param>
        <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. It may be null.</param>
        <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
        <param name="cancellationToken">The token to cancel the operation.</param>
        <summary>Asynchronously deserializes an object of the specified type.</summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> whose result will be an object of the given type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiredMemberSelector">
      <MemberSignature Language="C#" Value="public virtual System.Net.Http.Formatting.IRequiredMemberSelector RequiredMemberSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Http.Formatting.IRequiredMemberSelector RequiredMemberSelector" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.Formatting.MediaTypeFormatter.RequiredMemberSelector" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RequiredMemberSelector As IRequiredMemberSelector" />
      <MemberSignature Language="F#" Value="member this.RequiredMemberSelector : System.Net.Http.Formatting.IRequiredMemberSelector with get, set" Usage="System.Net.Http.Formatting.MediaTypeFormatter.RequiredMemberSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.Formatting.IRequiredMemberSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" /> instance used to determine required members.</summary>
        <value>The <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" /> instance.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectCharacterEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding SelectCharacterEncoding (System.Net.Http.Headers.HttpContentHeaders contentHeaders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.Encoding SelectCharacterEncoding(class System.Net.Http.Headers.HttpContentHeaders contentHeaders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatter.SelectCharacterEncoding(System.Net.Http.Headers.HttpContentHeaders)" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectCharacterEncoding (contentHeaders As HttpContentHeaders) As Encoding" />
      <MemberSignature Language="F#" Value="member this.SelectCharacterEncoding : System.Net.Http.Headers.HttpContentHeaders -&gt; System.Text.Encoding" Usage="mediaTypeFormatter.SelectCharacterEncoding contentHeaders" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentHeaders" Type="System.Net.Http.Headers.HttpContentHeaders" />
      </Parameters>
      <Docs>
        <param name="contentHeaders">The content headers.</param>
        <summary>Determines the best character encoding for reading or writing an HTTP entity body, given a set of content headers.</summary>
        <returns>The encoding that is the best match.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDefaultContentHeaders">
      <MemberSignature Language="C#" Value="public virtual void SetDefaultContentHeaders (Type type, System.Net.Http.Headers.HttpContentHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue mediaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDefaultContentHeaders(class System.Type type, class System.Net.Http.Headers.HttpContentHeaders headers, class System.Net.Http.Headers.MediaTypeHeaderValue mediaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)" />
      <MemberSignature Language="F#" Value="abstract member SetDefaultContentHeaders : Type * System.Net.Http.Headers.HttpContentHeaders * System.Net.Http.Headers.MediaTypeHeaderValue -&gt; unit&#xA;override this.SetDefaultContentHeaders : Type * System.Net.Http.Headers.HttpContentHeaders * System.Net.Http.Headers.MediaTypeHeaderValue -&gt; unit" Usage="mediaTypeFormatter.SetDefaultContentHeaders (type, headers, mediaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="headers" Type="System.Net.Http.Headers.HttpContentHeaders" />
        <Parameter Name="mediaType" Type="System.Net.Http.Headers.MediaTypeHeaderValue" />
      </Parameters>
      <Docs>
        <param name="type">The type of the object being serialized. See <see cref="T:System.Net.Http.ObjectContent" />.</param>
        <param name="headers">The content headers that should be configured.</param>
        <param name="mediaType">The authoritative media type. Can be null.</param>
        <summary> Sets the default headers for content that will be formatted using this formatter. This method is called from the <see cref="T:System.Net.Http.ObjectContent" /> constructor. This implementation sets the Content-Type header to the value of mediaType if it is not null. If it is null it sets the Content-Type to the default media type of this formatter. If the Content-Type does not specify a charset it will set it using this formatters configured <see cref="T:System.Text.Encoding" />. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportedEncodings">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Text.Encoding&gt; SupportedEncodings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Text.Encoding&gt; SupportedEncodings" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedEncodings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportedEncodings As Collection(Of Encoding)" />
      <MemberSignature Language="F#" Value="member this.SupportedEncodings : System.Collections.ObjectModel.Collection&lt;System.Text.Encoding&gt;" Usage="System.Net.Http.Formatting.MediaTypeFormatter.SupportedEncodings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Text.Encoding&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the mutable collection of character encodings supported bythis <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</summary>
        <value>The collection of <see cref="T:System.Text.Encoding" /> objects.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportedMediaTypes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Net.Http.Headers.MediaTypeHeaderValue&gt; SupportedMediaTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Net.Http.Headers.MediaTypeHeaderValue&gt; SupportedMediaTypes" />
      <MemberSignature Language="DocId" Value="P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedMediaTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportedMediaTypes As Collection(Of MediaTypeHeaderValue)" />
      <MemberSignature Language="F#" Value="member this.SupportedMediaTypes : System.Collections.ObjectModel.Collection&lt;System.Net.Http.Headers.MediaTypeHeaderValue&gt;" Usage="System.Net.Http.Formatting.MediaTypeFormatter.SupportedMediaTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Net.Http.Headers.MediaTypeHeaderValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the mutable collection of media types supported bythis <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</summary>
        <value>The collection of <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> objects.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteToStreamAsync (Type type, object value, System.IO.Stream writeStream, System.Net.Http.HttpContent content, System.Net.TransportContext transportContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteToStreamAsync(class System.Type type, object value, class System.IO.Stream writeStream, class System.Net.Http.HttpContent content, class System.Net.TransportContext transportContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)" />
      <MemberSignature Language="F#" Value="abstract member WriteToStreamAsync : Type * obj * System.IO.Stream * System.Net.Http.HttpContent * System.Net.TransportContext -&gt; System.Threading.Tasks.Task&#xA;override this.WriteToStreamAsync : Type * obj * System.IO.Stream * System.Net.Http.HttpContent * System.Net.TransportContext -&gt; System.Threading.Tasks.Task" Usage="mediaTypeFormatter.WriteToStreamAsync (type, value, writeStream, content, transportContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="writeStream" Type="System.IO.Stream" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="transportContext" Type="System.Net.TransportContext" />
      </Parameters>
      <Docs>
        <param name="type">The type of the object to write.</param>
        <param name="value">The object value to write.  It may be null.</param>
        <param name="writeStream">The <see cref="T:System.IO.Stream" /> to which to write.</param>
        <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> if available. It may be null.</param>
        <param name="transportContext">The <see cref="T:System.Net.TransportContext" /> if available. It may be null.</param>
        <summary>Asynchronously writes an object of the specified type.</summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that will perform the write.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Derived types need to support writing.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteToStreamAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteToStreamAsync (Type type, object value, System.IO.Stream writeStream, System.Net.Http.HttpContent content, System.Net.TransportContext transportContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteToStreamAsync(class System.Type type, object value, class System.IO.Stream writeStream, class System.Net.Http.HttpContent content, class System.Net.TransportContext transportContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member WriteToStreamAsync : Type * obj * System.IO.Stream * System.Net.Http.HttpContent * System.Net.TransportContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.WriteToStreamAsync : Type * obj * System.IO.Stream * System.Net.Http.HttpContent * System.Net.TransportContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="mediaTypeFormatter.WriteToStreamAsync (type, value, writeStream, content, transportContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Http.Formatting</AssemblyName>
        <AssemblyVersion>5.2.6.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="writeStream" Type="System.IO.Stream" />
        <Parameter Name="content" Type="System.Net.Http.HttpContent" />
        <Parameter Name="transportContext" Type="System.Net.TransportContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="type">The type of the object to write.</param>
        <param name="value">The object value to write.  It may be null.</param>
        <param name="writeStream">The <see cref="T:System.IO.Stream" /> to which to write.</param>
        <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> if available. It may be null.</param>
        <param name="transportContext">The <see cref="T:System.Net.TransportContext" /> if available. It may be null.</param>
        <param name="cancellationToken">The token to cancel the operation.</param>
        <summary>Asynchronously writes an object of the specified type.</summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that will perform the write.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">Derived types need to support writing.</exception>
      </Docs>
    </Member>
  </Members>
</Type>