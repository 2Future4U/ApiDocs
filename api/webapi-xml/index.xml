<Overview>
  <Assemblies>
    <Assembly Name="System.Net.Http.Formatting" Version="5.2.6.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("5.2.60510.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("5.2.6-60510 (3155d174ba1d7e281ef0b9bbe78fb10a43aa7450)")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Net.Http.Formatting")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("5.2.6.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Net.Http.Formatting.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Net.Http.Formatting.Test.Integration, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("7fa1ae84-36e2-46b6-812c-c985a8e65e9a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName=".NET Framework 4.5")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Web.Cors" Version="5.2.6.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("5.2.60510.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("5.2.6-60510 (3155d174ba1d7e281ef0b9bbe78fb10a43aa7450)")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Web.Cors")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("5.2.6.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName=".NET Framework 4.5")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Web.Http.Cors" Version="5.2.6.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("5.2.60510.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("5.2.6-60510 (3155d174ba1d7e281ef0b9bbe78fb10a43aa7450)")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Web.Http.Cors")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("5.2.6.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Web.Http.Cors.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName=".NET Framework 4.5")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Web.Http" Version="5.2.6.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("5.2.60510.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("5.2.6-60510 (3155d174ba1d7e281ef0b9bbe78fb10a43aa7450)")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Web.Http")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("5.2.6.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Web.Http.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Web.Http.Integration.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("70cecdcd-46f5-492b-9e1f-1d9a947f1fd1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName=".NET Framework 4.5")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Web.Http.Owin" Version="5.2.6.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("5.2.60510.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("5.2.6-60510 (3155d174ba1d7e281ef0b9bbe78fb10a43aa7450)")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Web.Http.Owin")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("5.2.6.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Web.Http.Owin.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("41f9da53-4a52-4cd7-af85-77a214c5b13b")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName=".NET Framework 4.5")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Web.Http.SelfHost" Version="5.2.6.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("5.2.60510.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("5.2.6-60510 (3155d174ba1d7e281ef0b9bbe78fb10a43aa7450)")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Web.Http.SelfHost")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("5.2.6.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Web.Http.SelfHost.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName=".NET Framework 4.5")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Web.Http.Tracing" Version="5.2.6.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("5.2.60510.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("5.2.6-60510 (3155d174ba1d7e281ef0b9bbe78fb10a43aa7450)")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Web.Http.Tracing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("5.2.6.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("8a696567-259c-46ed-b431-4179725fbe80")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName=".NET Framework 4.5")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="System.Web.Http.WebHost" Version="5.2.6.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("5.2.60510.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("5.2.6-60510 (3155d174ba1d7e281ef0b9bbe78fb10a43aa7450)")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyMetadata("Serviceable", "True")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft ASP.NET MVC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("System.Web.Http.WebHost")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.SatelliteContractVersion("5.2.6.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.InternalsVisibleTo("System.Web.Http.WebHost.Test, PublicKey=0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.5", FrameworkDisplayName=".NET Framework 4.5")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
  </Assemblies>
  <Remarks>To be added.</Remarks>
  <Copyright>To be added.</Copyright>
  <Types>
    <Namespace Name="Owin">
      <Type Name="WebApiAppBuilderExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Net.Http">
      <Type Name="ByteRangeStreamContent" Kind="Class" />
      <Type Name="HttpClientExtensions" Kind="Class" />
      <Type Name="HttpClientFactory" Kind="Class" />
      <Type Name="HttpContentExtensions" Kind="Class" />
      <Type Name="HttpContentFormDataExtensions" Kind="Class" />
      <Type Name="HttpContentMessageExtensions" Kind="Class" />
      <Type Name="HttpContentMultipartExtensions" Kind="Class" />
      <Type Name="HttpMessageContent" Kind="Class" />
      <Type Name="HttpRequestHeadersExtensions" Kind="Class" />
      <Type Name="HttpRequestMessageExtensions" Kind="Class" />
      <Type Name="HttpResponseHeadersExtensions" Kind="Class" />
      <Type Name="HttpResponseMessageExtensions" Kind="Class" />
      <Type Name="InvalidByteRangeException" Kind="Class" />
      <Type Name="MultipartFileData" Kind="Class" />
      <Type Name="MultipartFileStreamProvider" Kind="Class" />
      <Type Name="MultipartFormDataRemoteStreamProvider" Kind="Class" />
      <Type Name="MultipartFormDataStreamProvider" Kind="Class" />
      <Type Name="MultipartMemoryStreamProvider" Kind="Class" />
      <Type Name="MultipartRelatedStreamProvider" Kind="Class" />
      <Type Name="MultipartRemoteFileData" Kind="Class" />
      <Type Name="MultipartStreamProvider" Kind="Class" />
      <Type Name="ObjectContent" Kind="Class" />
      <Type Name="ObjectContent`1" DisplayName="ObjectContent&lt;T&gt;" Kind="Class" />
      <Type Name="OwinHttpRequestMessageExtensions" Kind="Class" />
      <Type Name="PushStreamContent" Kind="Class" />
      <Type Name="RemoteStreamInfo" Kind="Class" />
      <Type Name="UnsupportedMediaTypeException" Kind="Class" />
      <Type Name="UriExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Net.Http.Formatting">
      <Type Name="BaseJsonMediaTypeFormatter" Kind="Class" />
      <Type Name="BsonMediaTypeFormatter" Kind="Class" />
      <Type Name="BufferedMediaTypeFormatter" Kind="Class" />
      <Type Name="ContentNegotiationResult" Kind="Class" />
      <Type Name="DefaultContentNegotiator" Kind="Class" />
      <Type Name="DelegatingEnumerable`1" DisplayName="DelegatingEnumerable&lt;T&gt;" Kind="Class" />
      <Type Name="FormDataCollection" Kind="Class" />
      <Type Name="FormUrlEncodedMediaTypeFormatter" Kind="Class" />
      <Type Name="IContentNegotiator" Kind="Interface" />
      <Type Name="IFormatterLogger" Kind="Interface" />
      <Type Name="IRequiredMemberSelector" Kind="Interface" />
      <Type Name="JsonContractResolver" Kind="Class" />
      <Type Name="JsonMediaTypeFormatter" Kind="Class" />
      <Type Name="MediaTypeFormatter" Kind="Class" />
      <Type Name="MediaTypeFormatterCollection" Kind="Class" />
      <Type Name="MediaTypeFormatterExtensions" Kind="Class" />
      <Type Name="MediaTypeFormatterMatch" Kind="Class" />
      <Type Name="MediaTypeFormatterMatchRanking" Kind="Enumeration" />
      <Type Name="MediaTypeMapping" Kind="Class" />
      <Type Name="QueryStringMapping" Kind="Class" />
      <Type Name="RequestHeaderMapping" Kind="Class" />
      <Type Name="UriPathExtensionMapping" Kind="Class" />
      <Type Name="XmlHttpRequestHeaderMapping" Kind="Class" />
      <Type Name="XmlMediaTypeFormatter" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Net.Http.Handlers">
      <Type Name="HttpProgressEventArgs" Kind="Class" />
      <Type Name="ProgressMessageHandler" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Net.Http.Headers">
      <Type Name="CookieHeaderValue" Kind="Class" />
      <Type Name="CookieState" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Cors">
      <Type Name="CorsConstants" Kind="Class" />
      <Type Name="CorsEngine" Kind="Class" />
      <Type Name="CorsPolicy" Kind="Class" />
      <Type Name="CorsRequestContext" Kind="Class" />
      <Type Name="CorsResult" Kind="Class" />
      <Type Name="ICorsEngine" Kind="Interface" />
    </Namespace>
    <Namespace Name="System.Web.Http">
      <Type Name="AcceptVerbsAttribute" Kind="Class" />
      <Type Name="ActionNameAttribute" Kind="Class" />
      <Type Name="AllowAnonymousAttribute" Kind="Class" />
      <Type Name="ApiController" Kind="Class" />
      <Type Name="AuthorizeAttribute" Kind="Class" />
      <Type Name="CorsHttpConfigurationExtensions" Kind="Class" />
      <Type Name="FromBodyAttribute" Kind="Class" />
      <Type Name="FromUriAttribute" Kind="Class" />
      <Type Name="GlobalConfiguration" Kind="Class" />
      <Type Name="HostAuthenticationAttribute" Kind="Class" />
      <Type Name="HostAuthenticationFilter" Kind="Class" />
      <Type Name="HttpBindNeverAttribute" Kind="Class" />
      <Type Name="HttpBindRequiredAttribute" Kind="Class" />
      <Type Name="HttpConfiguration" Kind="Class" />
      <Type Name="HttpConfigurationExtensions" Kind="Class" />
      <Type Name="HttpConfigurationTracingExtensions" Kind="Class" />
      <Type Name="HttpDeleteAttribute" Kind="Class" />
      <Type Name="HttpError" Kind="Class" />
      <Type Name="HttpErrorKeys" Kind="Class" />
      <Type Name="HttpGetAttribute" Kind="Class" />
      <Type Name="HttpHeadAttribute" Kind="Class" />
      <Type Name="HttpOptionsAttribute" Kind="Class" />
      <Type Name="HttpPatchAttribute" Kind="Class" />
      <Type Name="HttpPostAttribute" Kind="Class" />
      <Type Name="HttpPutAttribute" Kind="Class" />
      <Type Name="HttpResponseException" Kind="Class" />
      <Type Name="HttpRouteCollection" Kind="Class" />
      <Type Name="HttpRouteCollectionExtensions" Kind="Class" />
      <Type Name="HttpServer" Kind="Class" />
      <Type Name="IHttpActionResult" Kind="Interface" />
      <Type Name="IncludeErrorDetailPolicy" Kind="Enumeration" />
      <Type Name="NonActionAttribute" Kind="Class" />
      <Type Name="OverrideActionFiltersAttribute" Kind="Class" />
      <Type Name="OverrideAuthenticationAttribute" Kind="Class" />
      <Type Name="OverrideAuthorizationAttribute" Kind="Class" />
      <Type Name="OverrideExceptionFiltersAttribute" Kind="Class" />
      <Type Name="OwinHttpConfigurationExtensions" Kind="Class" />
      <Type Name="ParameterBindingAttribute" Kind="Class" />
      <Type Name="RouteAttribute" Kind="Class" />
      <Type Name="RouteCollectionExtensions" Kind="Class" />
      <Type Name="RouteParameter" Kind="Class" />
      <Type Name="RoutePrefixAttribute" Kind="Class" />
      <Type Name="ServicesExtensions" Kind="Class" />
      <Type Name="SingleResult" Kind="Class" />
      <Type Name="SingleResult`1" DisplayName="SingleResult&lt;T&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.Batch">
      <Type Name="BatchExecutionOrder" Kind="Enumeration" />
      <Type Name="BatchHttpRequestMessageExtensions" Kind="Class" />
      <Type Name="DefaultHttpBatchHandler" Kind="Class" />
      <Type Name="HttpBatchHandler" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.Controllers">
      <Type Name="ApiControllerActionInvoker" Kind="Class" />
      <Type Name="ApiControllerActionSelector" Kind="Class" />
      <Type Name="ControllerServices" Kind="Class" />
      <Type Name="HttpActionBinding" Kind="Class" />
      <Type Name="HttpActionContext" Kind="Class" />
      <Type Name="HttpActionContextExtensions" Kind="Class" />
      <Type Name="HttpActionDescriptor" Kind="Class" />
      <Type Name="HttpControllerContext" Kind="Class" />
      <Type Name="HttpControllerDescriptor" Kind="Class" />
      <Type Name="HttpControllerSettings" Kind="Class" />
      <Type Name="HttpParameterBinding" Kind="Class" />
      <Type Name="HttpParameterDescriptor" Kind="Class" />
      <Type Name="HttpRequestContext" Kind="Class" />
      <Type Name="IActionHttpMethodProvider" Kind="Interface" />
      <Type Name="IActionResultConverter" Kind="Interface" />
      <Type Name="IActionValueBinder" Kind="Interface" />
      <Type Name="IControllerConfiguration" Kind="Interface" />
      <Type Name="IHttpActionInvoker" Kind="Interface" />
      <Type Name="IHttpActionSelector" Kind="Interface" />
      <Type Name="IHttpController" Kind="Interface" />
      <Type Name="ParameterBindingExtensions" Kind="Class" />
      <Type Name="ReflectedHttpActionDescriptor" Kind="Class" />
      <Type Name="ReflectedHttpParameterDescriptor" Kind="Class" />
      <Type Name="ResponseMessageResultConverter" Kind="Class" />
      <Type Name="ServicesContainer" Kind="Class" />
      <Type Name="ValueResultConverter`1" DisplayName="ValueResultConverter&lt;T&gt;" Kind="Class" />
      <Type Name="VoidResultConverter" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.Cors">
      <Type Name="AttributeBasedPolicyProviderFactory" Kind="Class" />
      <Type Name="CorsHttpRequestMessageExtensions" Kind="Class" />
      <Type Name="CorsHttpResponseMessageExtensions" Kind="Class" />
      <Type Name="CorsMessageHandler" Kind="Class" />
      <Type Name="DisableCorsAttribute" Kind="Class" />
      <Type Name="EnableCorsAttribute" Kind="Class" />
      <Type Name="ICorsPolicyProvider" Kind="Interface" />
      <Type Name="ICorsPolicyProviderFactory" Kind="Interface" />
    </Namespace>
    <Namespace Name="System.Web.Http.Cors.Tracing">
      <Type Name="TraceCategories" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.Dependencies">
      <Type Name="IDependencyResolver" Kind="Interface" />
      <Type Name="IDependencyScope" Kind="Interface" />
    </Namespace>
    <Namespace Name="System.Web.Http.Description">
      <Type Name="ApiDescription" Kind="Class" />
      <Type Name="ApiExplorer" Kind="Class" />
      <Type Name="ApiExplorerSettingsAttribute" Kind="Class" />
      <Type Name="ApiParameterDescription" Kind="Class" />
      <Type Name="ApiParameterSource" Kind="Enumeration" />
      <Type Name="IApiExplorer" Kind="Interface" />
      <Type Name="IDocumentationProvider" Kind="Interface" />
      <Type Name="ResponseDescription" Kind="Class" />
      <Type Name="ResponseTypeAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.Dispatcher">
      <Type Name="DefaultAssembliesResolver" Kind="Class" />
      <Type Name="DefaultHttpControllerActivator" Kind="Class" />
      <Type Name="DefaultHttpControllerSelector" Kind="Class" />
      <Type Name="DefaultHttpControllerTypeResolver" Kind="Class" />
      <Type Name="HttpControllerDispatcher" Kind="Class" />
      <Type Name="HttpRoutingDispatcher" Kind="Class" />
      <Type Name="IAssembliesResolver" Kind="Interface" />
      <Type Name="IHttpControllerActivator" Kind="Interface" />
      <Type Name="IHttpControllerSelector" Kind="Interface" />
      <Type Name="IHttpControllerTypeResolver" Kind="Interface" />
    </Namespace>
    <Namespace Name="System.Web.Http.ExceptionHandling">
      <Type Name="ExceptionCatchBlocks" Kind="Class" />
      <Type Name="ExceptionContext" Kind="Class" />
      <Type Name="ExceptionContextCatchBlock" Kind="Class" />
      <Type Name="ExceptionHandler" Kind="Class" />
      <Type Name="ExceptionHandlerContext" Kind="Class" />
      <Type Name="ExceptionHandlerExtensions" Kind="Class" />
      <Type Name="ExceptionLogger" Kind="Class" />
      <Type Name="ExceptionLoggerContext" Kind="Class" />
      <Type Name="ExceptionLoggerExtensions" Kind="Class" />
      <Type Name="ExceptionServices" Kind="Class" />
      <Type Name="IExceptionHandler" Kind="Interface" />
      <Type Name="IExceptionLogger" Kind="Interface" />
    </Namespace>
    <Namespace Name="System.Web.Http.Filters">
      <Type Name="ActionDescriptorFilterProvider" Kind="Class" />
      <Type Name="ActionFilterAttribute" Kind="Class" />
      <Type Name="AuthorizationFilterAttribute" Kind="Class" />
      <Type Name="ConfigurationFilterProvider" Kind="Class" />
      <Type Name="ExceptionFilterAttribute" Kind="Class" />
      <Type Name="FilterAttribute" Kind="Class" />
      <Type Name="FilterInfo" Kind="Class" />
      <Type Name="FilterScope" Kind="Enumeration" />
      <Type Name="HttpActionExecutedContext" Kind="Class" />
      <Type Name="HttpAuthenticationChallengeContext" Kind="Class" />
      <Type Name="HttpAuthenticationContext" Kind="Class" />
      <Type Name="HttpFilterCollection" Kind="Class" />
      <Type Name="IActionFilter" Kind="Interface" />
      <Type Name="IAuthenticationFilter" Kind="Interface" />
      <Type Name="IAuthorizationFilter" Kind="Interface" />
      <Type Name="IExceptionFilter" Kind="Interface" />
      <Type Name="IFilter" Kind="Interface" />
      <Type Name="IFilterProvider" Kind="Interface" />
      <Type Name="IOverrideFilter" Kind="Interface" />
    </Namespace>
    <Namespace Name="System.Web.Http.Hosting">
      <Type Name="HttpPropertyKeys" Kind="Class" />
      <Type Name="IHostBufferPolicySelector" Kind="Interface" />
      <Type Name="SuppressHostPrincipalMessageHandler" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.Metadata">
      <Type Name="ModelMetadata" Kind="Class" />
      <Type Name="ModelMetadataProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.Metadata.Providers">
      <Type Name="AssociatedMetadataProvider`1" DisplayName="AssociatedMetadataProvider&lt;TModelMetadata&gt;" Kind="Class" />
      <Type Name="CachedDataAnnotationsMetadataAttributes" Kind="Class" />
      <Type Name="CachedDataAnnotationsModelMetadata" Kind="Class" />
      <Type Name="CachedModelMetadata`1" DisplayName="CachedModelMetadata&lt;TPrototypeCache&gt;" Kind="Class" />
      <Type Name="DataAnnotationsModelMetadataProvider" Kind="Class" />
      <Type Name="EmptyModelMetadataProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.ModelBinding">
      <Type Name="CancellationTokenParameterBinding" Kind="Class" />
      <Type Name="CustomModelBinderAttribute" Kind="Class" />
      <Type Name="DefaultActionValueBinder" Kind="Class" />
      <Type Name="ErrorParameterBinding" Kind="Class" />
      <Type Name="FormatterParameterBinding" Kind="Class" />
      <Type Name="FormDataCollectionExtensions" Kind="Class" />
      <Type Name="HttpBindingBehavior" Kind="Enumeration" />
      <Type Name="HttpBindingBehaviorAttribute" Kind="Class" />
      <Type Name="HttpRequestParameterBinding" Kind="Class" />
      <Type Name="IModelBinder" Kind="Interface" />
      <Type Name="IValueProviderParameterBinding" Kind="Interface" />
      <Type Name="JQueryMvcFormUrlEncodedFormatter" Kind="Class" />
      <Type Name="ModelBinderAttribute" Kind="Class" />
      <Type Name="ModelBinderConfig" Kind="Class" />
      <Type Name="ModelBinderErrorMessageProvider" Kind="Delegate" />
      <Type Name="ModelBinderParameterBinding" Kind="Class" />
      <Type Name="ModelBinderProvider" Kind="Class" />
      <Type Name="ModelBindingContext" Kind="Class" />
      <Type Name="ModelError" Kind="Class" />
      <Type Name="ModelErrorCollection" Kind="Class" />
      <Type Name="ModelState" Kind="Class" />
      <Type Name="ModelStateDictionary" Kind="Class" />
      <Type Name="ParameterBindingRulesCollection" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.ModelBinding.Binders">
      <Type Name="ArrayModelBinder`1" DisplayName="ArrayModelBinder&lt;TElement&gt;" Kind="Class" />
      <Type Name="ArrayModelBinderProvider" Kind="Class" />
      <Type Name="CollectionModelBinder`1" DisplayName="CollectionModelBinder&lt;TElement&gt;" Kind="Class" />
      <Type Name="CollectionModelBinderProvider" Kind="Class" />
      <Type Name="ComplexModelDto" Kind="Class" />
      <Type Name="ComplexModelDtoModelBinder" Kind="Class" />
      <Type Name="ComplexModelDtoModelBinderProvider" Kind="Class" />
      <Type Name="ComplexModelDtoResult" Kind="Class" />
      <Type Name="CompositeModelBinder" Kind="Class" />
      <Type Name="CompositeModelBinderProvider" Kind="Class" />
      <Type Name="DictionaryModelBinder`2" DisplayName="DictionaryModelBinder&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="DictionaryModelBinderProvider" Kind="Class" />
      <Type Name="KeyValuePairModelBinder`2" DisplayName="KeyValuePairModelBinder&lt;TKey,TValue&gt;" Kind="Class" />
      <Type Name="KeyValuePairModelBinderProvider" Kind="Class" />
      <Type Name="MutableObjectModelBinder" Kind="Class" />
      <Type Name="MutableObjectModelBinderProvider" Kind="Class" />
      <Type Name="SimpleModelBinderProvider" Kind="Class" />
      <Type Name="TypeConverterModelBinder" Kind="Class" />
      <Type Name="TypeConverterModelBinderProvider" Kind="Class" />
      <Type Name="TypeMatchModelBinder" Kind="Class" />
      <Type Name="TypeMatchModelBinderProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.Owin">
      <Type Name="HttpMessageHandlerAdapter" Kind="Class" />
      <Type Name="HttpMessageHandlerOptions" Kind="Class" />
      <Type Name="OwinBufferPolicySelector" Kind="Class" />
      <Type Name="OwinExceptionCatchBlocks" Kind="Class" />
      <Type Name="PassiveAuthenticationMessageHandler" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.Results">
      <Type Name="BadRequestErrorMessageResult" Kind="Class" />
      <Type Name="BadRequestResult" Kind="Class" />
      <Type Name="ConflictResult" Kind="Class" />
      <Type Name="CreatedAtRouteNegotiatedContentResult`1" DisplayName="CreatedAtRouteNegotiatedContentResult&lt;T&gt;" Kind="Class" />
      <Type Name="CreatedNegotiatedContentResult`1" DisplayName="CreatedNegotiatedContentResult&lt;T&gt;" Kind="Class" />
      <Type Name="ExceptionResult" Kind="Class" />
      <Type Name="FormattedContentResult`1" DisplayName="FormattedContentResult&lt;T&gt;" Kind="Class" />
      <Type Name="InternalServerErrorResult" Kind="Class" />
      <Type Name="InvalidModelStateResult" Kind="Class" />
      <Type Name="JsonResult`1" DisplayName="JsonResult&lt;T&gt;" Kind="Class" />
      <Type Name="NegotiatedContentResult`1" DisplayName="NegotiatedContentResult&lt;T&gt;" Kind="Class" />
      <Type Name="NotFoundResult" Kind="Class" />
      <Type Name="OkNegotiatedContentResult`1" DisplayName="OkNegotiatedContentResult&lt;T&gt;" Kind="Class" />
      <Type Name="OkResult" Kind="Class" />
      <Type Name="RedirectResult" Kind="Class" />
      <Type Name="RedirectToRouteResult" Kind="Class" />
      <Type Name="ResponseMessageResult" Kind="Class" />
      <Type Name="StatusCodeResult" Kind="Class" />
      <Type Name="UnauthorizedResult" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.Routing">
      <Type Name="DefaultDirectRouteProvider" Kind="Class" />
      <Type Name="DefaultInlineConstraintResolver" Kind="Class" />
      <Type Name="DirectRouteFactoryContext" Kind="Class" />
      <Type Name="HttpMethodConstraint" Kind="Class" />
      <Type Name="HttpRoute" Kind="Class" />
      <Type Name="HttpRouteData" Kind="Class" />
      <Type Name="HttpRouteDataExtensions" Kind="Class" />
      <Type Name="HttpRouteDirection" Kind="Enumeration" />
      <Type Name="HttpRouteValueDictionary" Kind="Class" />
      <Type Name="HttpVirtualPathData" Kind="Class" />
      <Type Name="IDirectRouteBuilder" Kind="Interface" />
      <Type Name="IDirectRouteFactory" Kind="Interface" />
      <Type Name="IDirectRouteProvider" Kind="Interface" />
      <Type Name="IHttpRoute" Kind="Interface" />
      <Type Name="IHttpRouteConstraint" Kind="Interface" />
      <Type Name="IHttpRouteData" Kind="Interface" />
      <Type Name="IHttpRouteInfoProvider" Kind="Interface" />
      <Type Name="IHttpVirtualPathData" Kind="Interface" />
      <Type Name="IInlineConstraintResolver" Kind="Interface" />
      <Type Name="IRoutePrefix" Kind="Interface" />
      <Type Name="RouteEntry" Kind="Class" />
      <Type Name="RouteFactoryAttribute" Kind="Class" />
      <Type Name="StopRoutingHandler" Kind="Class" />
      <Type Name="UrlHelper" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.Routing.Constraints">
      <Type Name="AlphaRouteConstraint" Kind="Class" />
      <Type Name="BoolRouteConstraint" Kind="Class" />
      <Type Name="CompoundRouteConstraint" Kind="Class" />
      <Type Name="DateTimeRouteConstraint" Kind="Class" />
      <Type Name="DecimalRouteConstraint" Kind="Class" />
      <Type Name="DoubleRouteConstraint" Kind="Class" />
      <Type Name="FloatRouteConstraint" Kind="Class" />
      <Type Name="GuidRouteConstraint" Kind="Class" />
      <Type Name="IntRouteConstraint" Kind="Class" />
      <Type Name="LengthRouteConstraint" Kind="Class" />
      <Type Name="LongRouteConstraint" Kind="Class" />
      <Type Name="MaxLengthRouteConstraint" Kind="Class" />
      <Type Name="MaxRouteConstraint" Kind="Class" />
      <Type Name="MinLengthRouteConstraint" Kind="Class" />
      <Type Name="MinRouteConstraint" Kind="Class" />
      <Type Name="OptionalRouteConstraint" Kind="Class" />
      <Type Name="RangeRouteConstraint" Kind="Class" />
      <Type Name="RegexRouteConstraint" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.SelfHost">
      <Type Name="HttpSelfHostConfiguration" Kind="Class" />
      <Type Name="HttpSelfHostServer" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.SelfHost.Channels">
      <Type Name="HttpBinding" Kind="Class" />
      <Type Name="HttpBindingSecurity" Kind="Class" />
      <Type Name="HttpBindingSecurityMode" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="System.Web.Http.Services">
      <Type Name="Decorator" Kind="Class" />
      <Type Name="DefaultServices" Kind="Class" />
      <Type Name="IDecorator`1" DisplayName="IDecorator&lt;T&gt;" Kind="Interface" />
    </Namespace>
    <Namespace Name="System.Web.Http.Tracing">
      <Type Name="ITraceManager" Kind="Interface" />
      <Type Name="ITraceWriter" Kind="Interface" />
      <Type Name="ITraceWriterExtensions" Kind="Class" />
      <Type Name="SystemDiagnosticsTraceWriter" Kind="Class" />
      <Type Name="TraceCategories" Kind="Class" />
      <Type Name="TraceKind" Kind="Enumeration" />
      <Type Name="TraceLevel" Kind="Enumeration" />
      <Type Name="TraceRecord" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.Validation">
      <Type Name="BodyModelValidatorContext" Kind="Class" />
      <Type Name="DefaultBodyModelValidator" Kind="Class" />
      <Type Name="IBodyModelValidator" Kind="Interface" />
      <Type Name="IBodyModelValidatorKeyBuilder" Kind="Interface" />
      <Type Name="IModelValidatorCache" Kind="Interface" />
      <Type Name="ModelStateFormatterLogger" Kind="Class" />
      <Type Name="ModelValidatedEventArgs" Kind="Class" />
      <Type Name="ModelValidatingEventArgs" Kind="Class" />
      <Type Name="ModelValidationNode" Kind="Class" />
      <Type Name="ModelValidationRequiredMemberSelector" Kind="Class" />
      <Type Name="ModelValidationResult" Kind="Class" />
      <Type Name="ModelValidator" Kind="Class" />
      <Type Name="ModelValidatorProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.Validation.Providers">
      <Type Name="AssociatedValidatorProvider" Kind="Class" />
      <Type Name="DataAnnotationsModelValidationFactory" Kind="Delegate" />
      <Type Name="DataAnnotationsModelValidatorProvider" Kind="Class" />
      <Type Name="DataAnnotationsValidatableObjectAdapterFactory" Kind="Delegate" />
      <Type Name="DataMemberModelValidatorProvider" Kind="Class" />
      <Type Name="InvalidModelValidatorProvider" Kind="Class" />
      <Type Name="RequiredMemberModelValidatorProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.Validation.Validators">
      <Type Name="DataAnnotationsModelValidator" Kind="Class" />
      <Type Name="ErrorModelValidator" Kind="Class" />
      <Type Name="RequiredMemberModelValidator" Kind="Class" />
      <Type Name="ValidatableObjectAdapter" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.ValueProviders">
      <Type Name="IEnumerableValueProvider" Kind="Interface" />
      <Type Name="IUriValueProviderFactory" Kind="Interface" />
      <Type Name="IValueProvider" Kind="Interface" />
      <Type Name="ValueProviderAttribute" Kind="Class" />
      <Type Name="ValueProviderFactory" Kind="Class" />
      <Type Name="ValueProviderResult" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.ValueProviders.Providers">
      <Type Name="CompositeValueProvider" Kind="Class" />
      <Type Name="CompositeValueProviderFactory" Kind="Class" />
      <Type Name="NameValuePairsValueProvider" Kind="Class" />
      <Type Name="QueryStringValueProvider" Kind="Class" />
      <Type Name="QueryStringValueProviderFactory" Kind="Class" />
      <Type Name="RouteDataValueProvider" Kind="Class" />
      <Type Name="RouteDataValueProviderFactory" Kind="Class" />
    </Namespace>
    <Namespace Name="System.Web.Http.WebHost">
      <Type Name="HttpControllerHandler" Kind="Class" />
      <Type Name="HttpControllerRouteHandler" Kind="Class" />
      <Type Name="PreApplicationStartCode" Kind="Class" />
      <Type Name="WebHostBufferPolicySelector" Kind="Class" />
      <Type Name="WebHostExceptionCatchBlocks" Kind="Class" />
    </Namespace>
  </Types>
  <Title>Untitled</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Owin.IAppBuilder" />
      </Targets>
      <Member MemberName="UseWebApi">
        <MemberSignature Language="C#" Value="public static Owin.IAppBuilder UseWebApi (this Owin.IAppBuilder builder, System.Web.Http.HttpConfiguration configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Owin.IAppBuilder UseWebApi(class Owin.IAppBuilder builder, class System.Web.Http.HttpConfiguration configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Owin.WebApiAppBuilderExtensions.UseWebApi(Owin.IAppBuilder,System.Web.Http.HttpConfiguration)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseWebApi (builder As IAppBuilder, configuration As HttpConfiguration) As IAppBuilder" />
        <MemberSignature Language="F#" Value="static member UseWebApi : Owin.IAppBuilder * System.Web.Http.HttpConfiguration -&gt; Owin.IAppBuilder" Usage="Owin.WebApiAppBuilderExtensions.UseWebApi (builder, configuration)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Owin.IAppBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Owin.IAppBuilder" RefType="this" />
          <Parameter Name="configuration" Type="System.Web.Http.HttpConfiguration" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="configuration">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Owin.WebApiAppBuilderExtensions" Member="M:Owin.WebApiAppBuilderExtensions.UseWebApi(Owin.IAppBuilder,System.Web.Http.HttpConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Owin.IAppBuilder" />
      </Targets>
      <Member MemberName="UseWebApi">
        <MemberSignature Language="C#" Value="public static Owin.IAppBuilder UseWebApi (this Owin.IAppBuilder builder, System.Web.Http.HttpServer httpServer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Owin.IAppBuilder UseWebApi(class Owin.IAppBuilder builder, class System.Web.Http.HttpServer httpServer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Owin.WebApiAppBuilderExtensions.UseWebApi(Owin.IAppBuilder,System.Web.Http.HttpServer)" />
        <MemberSignature Language="F#" Value="static member UseWebApi : Owin.IAppBuilder * System.Web.Http.HttpServer -&gt; Owin.IAppBuilder" Usage="Owin.WebApiAppBuilderExtensions.UseWebApi (builder, httpServer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Owin.IAppBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Owin.IAppBuilder" RefType="this" />
          <Parameter Name="httpServer" Type="System.Web.Http.HttpServer" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="httpServer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Owin.WebApiAppBuilderExtensions" Member="M:Owin.WebApiAppBuilderExtensions.UseWebApi(Owin.IAppBuilder,System.Web.Http.HttpServer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Formatting.MediaTypeFormatter" />
      </Targets>
      <Member MemberName="AddQueryStringMapping">
        <MemberSignature Language="C#" Value="public static void AddQueryStringMapping (this System.Net.Http.Formatting.MediaTypeFormatter formatter, string queryStringParameterName, string queryStringParameterValue, System.Net.Http.Headers.MediaTypeHeaderValue mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddQueryStringMapping(class System.Net.Http.Formatting.MediaTypeFormatter formatter, string queryStringParameterName, string queryStringParameterValue, class System.Net.Http.Headers.MediaTypeHeaderValue mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddQueryStringMapping (formatter As MediaTypeFormatter, queryStringParameterName As String, queryStringParameterValue As String, mediaType As MediaTypeHeaderValue)" />
        <MemberSignature Language="F#" Value="static member AddQueryStringMapping : System.Net.Http.Formatting.MediaTypeFormatter * string * string * System.Net.Http.Headers.MediaTypeHeaderValue -&gt; unit" Usage="System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping (formatter, queryStringParameterName, queryStringParameterValue, mediaType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" RefType="this" />
          <Parameter Name="queryStringParameterName" Type="System.String" />
          <Parameter Name="queryStringParameterValue" Type="System.String" />
          <Parameter Name="mediaType" Type="System.Net.Http.Headers.MediaTypeHeaderValue" />
        </Parameters>
        <Docs>
          <param name="formatter">To be added.</param>
          <param name="queryStringParameterName">To be added.</param>
          <param name="queryStringParameterValue">To be added.</param>
          <param name="mediaType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.Formatting.MediaTypeFormatterExtensions" Member="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Formatting.MediaTypeFormatter" />
      </Targets>
      <Member MemberName="AddQueryStringMapping">
        <MemberSignature Language="C#" Value="public static void AddQueryStringMapping (this System.Net.Http.Formatting.MediaTypeFormatter formatter, string queryStringParameterName, string queryStringParameterValue, string mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddQueryStringMapping(class System.Net.Http.Formatting.MediaTypeFormatter formatter, string queryStringParameterName, string queryStringParameterValue, string mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddQueryStringMapping (formatter As MediaTypeFormatter, queryStringParameterName As String, queryStringParameterValue As String, mediaType As String)" />
        <MemberSignature Language="F#" Value="static member AddQueryStringMapping : System.Net.Http.Formatting.MediaTypeFormatter * string * string * string -&gt; unit" Usage="System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping (formatter, queryStringParameterName, queryStringParameterValue, mediaType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" RefType="this" />
          <Parameter Name="queryStringParameterName" Type="System.String" />
          <Parameter Name="queryStringParameterValue" Type="System.String" />
          <Parameter Name="mediaType" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="formatter">To be added.</param>
          <param name="queryStringParameterName">To be added.</param>
          <param name="queryStringParameterValue">To be added.</param>
          <param name="mediaType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.Formatting.MediaTypeFormatterExtensions" Member="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Formatting.MediaTypeFormatter" />
      </Targets>
      <Member MemberName="AddRequestHeaderMapping">
        <MemberSignature Language="C#" Value="public static void AddRequestHeaderMapping (this System.Net.Http.Formatting.MediaTypeFormatter formatter, string headerName, string headerValue, StringComparison valueComparison, bool isValueSubstring, System.Net.Http.Headers.MediaTypeHeaderValue mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddRequestHeaderMapping(class System.Net.Http.Formatting.MediaTypeFormatter formatter, string headerName, string headerValue, valuetype System.StringComparison valueComparison, bool isValueSubstring, class System.Net.Http.Headers.MediaTypeHeaderValue mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.Net.Http.Headers.MediaTypeHeaderValue)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddRequestHeaderMapping (formatter As MediaTypeFormatter, headerName As String, headerValue As String, valueComparison As StringComparison, isValueSubstring As Boolean, mediaType As MediaTypeHeaderValue)" />
        <MemberSignature Language="F#" Value="static member AddRequestHeaderMapping : System.Net.Http.Formatting.MediaTypeFormatter * string * string * StringComparison * bool * System.Net.Http.Headers.MediaTypeHeaderValue -&gt; unit" Usage="System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping (formatter, headerName, headerValue, valueComparison, isValueSubstring, mediaType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" RefType="this" />
          <Parameter Name="headerName" Type="System.String" />
          <Parameter Name="headerValue" Type="System.String" />
          <Parameter Name="valueComparison" Type="System.StringComparison" />
          <Parameter Name="isValueSubstring" Type="System.Boolean" />
          <Parameter Name="mediaType" Type="System.Net.Http.Headers.MediaTypeHeaderValue" />
        </Parameters>
        <Docs>
          <param name="formatter">To be added.</param>
          <param name="headerName">To be added.</param>
          <param name="headerValue">To be added.</param>
          <param name="valueComparison">To be added.</param>
          <param name="isValueSubstring">To be added.</param>
          <param name="mediaType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.Formatting.MediaTypeFormatterExtensions" Member="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.Net.Http.Headers.MediaTypeHeaderValue)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Formatting.MediaTypeFormatter" />
      </Targets>
      <Member MemberName="AddRequestHeaderMapping">
        <MemberSignature Language="C#" Value="public static void AddRequestHeaderMapping (this System.Net.Http.Formatting.MediaTypeFormatter formatter, string headerName, string headerValue, StringComparison valueComparison, bool isValueSubstring, string mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddRequestHeaderMapping(class System.Net.Http.Formatting.MediaTypeFormatter formatter, string headerName, string headerValue, valuetype System.StringComparison valueComparison, bool isValueSubstring, string mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddRequestHeaderMapping (formatter As MediaTypeFormatter, headerName As String, headerValue As String, valueComparison As StringComparison, isValueSubstring As Boolean, mediaType As String)" />
        <MemberSignature Language="F#" Value="static member AddRequestHeaderMapping : System.Net.Http.Formatting.MediaTypeFormatter * string * string * StringComparison * bool * string -&gt; unit" Usage="System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping (formatter, headerName, headerValue, valueComparison, isValueSubstring, mediaType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" RefType="this" />
          <Parameter Name="headerName" Type="System.String" />
          <Parameter Name="headerValue" Type="System.String" />
          <Parameter Name="valueComparison" Type="System.StringComparison" />
          <Parameter Name="isValueSubstring" Type="System.Boolean" />
          <Parameter Name="mediaType" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="formatter">To be added.</param>
          <param name="headerName">To be added.</param>
          <param name="headerValue">To be added.</param>
          <param name="valueComparison">To be added.</param>
          <param name="isValueSubstring">To be added.</param>
          <param name="mediaType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.Formatting.MediaTypeFormatterExtensions" Member="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Formatting.MediaTypeFormatter" />
      </Targets>
      <Member MemberName="AddUriPathExtensionMapping">
        <MemberSignature Language="C#" Value="public static void AddUriPathExtensionMapping (this System.Net.Http.Formatting.MediaTypeFormatter formatter, string uriPathExtension, System.Net.Http.Headers.MediaTypeHeaderValue mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUriPathExtensionMapping(class System.Net.Http.Formatting.MediaTypeFormatter formatter, string uriPathExtension, class System.Net.Http.Headers.MediaTypeHeaderValue mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddUriPathExtensionMapping (formatter As MediaTypeFormatter, uriPathExtension As String, mediaType As MediaTypeHeaderValue)" />
        <MemberSignature Language="F#" Value="static member AddUriPathExtensionMapping : System.Net.Http.Formatting.MediaTypeFormatter * string * System.Net.Http.Headers.MediaTypeHeaderValue -&gt; unit" Usage="System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping (formatter, uriPathExtension, mediaType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" RefType="this" />
          <Parameter Name="uriPathExtension" Type="System.String" />
          <Parameter Name="mediaType" Type="System.Net.Http.Headers.MediaTypeHeaderValue" />
        </Parameters>
        <Docs>
          <param name="formatter">To be added.</param>
          <param name="uriPathExtension">To be added.</param>
          <param name="mediaType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.Formatting.MediaTypeFormatterExtensions" Member="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Formatting.MediaTypeFormatter" />
      </Targets>
      <Member MemberName="AddUriPathExtensionMapping">
        <MemberSignature Language="C#" Value="public static void AddUriPathExtensionMapping (this System.Net.Http.Formatting.MediaTypeFormatter formatter, string uriPathExtension, string mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUriPathExtensionMapping(class System.Net.Http.Formatting.MediaTypeFormatter formatter, string uriPathExtension, string mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddUriPathExtensionMapping (formatter As MediaTypeFormatter, uriPathExtension As String, mediaType As String)" />
        <MemberSignature Language="F#" Value="static member AddUriPathExtensionMapping : System.Net.Http.Formatting.MediaTypeFormatter * string * string -&gt; unit" Usage="System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping (formatter, uriPathExtension, mediaType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" RefType="this" />
          <Parameter Name="uriPathExtension" Type="System.String" />
          <Parameter Name="mediaType" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="formatter">To be added.</param>
          <param name="uriPathExtension">To be added.</param>
          <param name="mediaType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.Formatting.MediaTypeFormatterExtensions" Member="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsJsonAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsJsonAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsJsonAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PostAsJsonAsync(Of T) (client As HttpClient, requestUri As String, value As T) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member PostAsJsonAsync : System.Net.Http.HttpClient * string * 'T -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsJsonAsync (client, requestUri, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsJsonAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsJsonAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsJsonAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PostAsJsonAsync : System.Net.Http.HttpClient * string * 'T * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsJsonAsync (client, requestUri, value, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsJsonAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsJsonAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsJsonAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PostAsJsonAsync(Of T) (client As HttpClient, requestUri As Uri, value As T) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member PostAsJsonAsync : System.Net.Http.HttpClient * Uri * 'T -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsJsonAsync (client, requestUri, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <summary> Sends a POST request as an asynchronous operation to the specified Uri with the given value serialized as JSON. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsJsonAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsJsonAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsJsonAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PostAsJsonAsync : System.Net.Http.HttpClient * Uri * 'T * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsJsonAsync (client, requestUri, value, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
          <summary> Sends a POST request as an asynchronous operation to the specified Uri with the given value serialized as JSON. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsXmlAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsXmlAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsXmlAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PostAsXmlAsync(Of T) (client As HttpClient, requestUri As String, value As T) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member PostAsXmlAsync : System.Net.Http.HttpClient * string * 'T -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsXmlAsync (client, requestUri, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsXmlAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsXmlAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsXmlAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PostAsXmlAsync : System.Net.Http.HttpClient * string * 'T * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsXmlAsync (client, requestUri, value, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsXmlAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsXmlAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsXmlAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.Uri,``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PostAsXmlAsync(Of T) (client As HttpClient, requestUri As Uri, value As T) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member PostAsXmlAsync : System.Net.Http.HttpClient * Uri * 'T -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsXmlAsync (client, requestUri, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <summary> Sends a POST request as an asynchronous operation to the specified Uri with the given value serialized as XML. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.Uri,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsXmlAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsXmlAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsXmlAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PostAsXmlAsync : System.Net.Http.HttpClient * Uri * 'T * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsXmlAsync (client, requestUri, value, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
          <summary> Sends a POST request as an asynchronous operation to the specified Uri with the given value serialized as XML. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PostAsync(Of T) (client As HttpClient, requestUri As String, value As T, formatter As MediaTypeFormatter) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member PostAsync : System.Net.Http.HttpClient * string * 'T * System.Net.Http.Formatting.MediaTypeFormatter -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsync (client, requestUri, value, formatter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <param name="formatter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, System.Net.Http.Headers.MediaTypeHeaderValue mediaType, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, class System.Net.Http.Headers.MediaTypeHeaderValue mediaType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PostAsync : System.Net.Http.HttpClient * string * 'T * System.Net.Http.Formatting.MediaTypeFormatter * System.Net.Http.Headers.MediaTypeHeaderValue * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsync (client, requestUri, value, formatter, mediaType, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="mediaType" Type="System.Net.Http.Headers.MediaTypeHeaderValue" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <param name="formatter">To be added.</param>
          <param name="mediaType">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PostAsync(Of T) (client As HttpClient, requestUri As String, value As T, formatter As MediaTypeFormatter, mediaType As String) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member PostAsync : System.Net.Http.HttpClient * string * 'T * System.Net.Http.Formatting.MediaTypeFormatter * string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsync (client, requestUri, value, formatter, mediaType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="mediaType" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <param name="formatter">To be added.</param>
          <param name="mediaType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PostAsync : System.Net.Http.HttpClient * string * 'T * System.Net.Http.Formatting.MediaTypeFormatter * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsync (client, requestUri, value, formatter, mediaType, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="mediaType" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <param name="formatter">To be added.</param>
          <param name="mediaType">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PostAsync : System.Net.Http.HttpClient * string * 'T * System.Net.Http.Formatting.MediaTypeFormatter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsync (client, requestUri, value, formatter, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <param name="formatter">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PostAsync(Of T) (client As HttpClient, requestUri As Uri, value As T, formatter As MediaTypeFormatter) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member PostAsync : System.Net.Http.HttpClient * Uri * 'T * System.Net.Http.Formatting.MediaTypeFormatter -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsync (client, requestUri, value, formatter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <param name="formatter">The formatter used to serialize the value.</param>
          <summary> Sends a POST request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, System.Net.Http.Headers.MediaTypeHeaderValue mediaType, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, class System.Net.Http.Headers.MediaTypeHeaderValue mediaType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PostAsync : System.Net.Http.HttpClient * Uri * 'T * System.Net.Http.Formatting.MediaTypeFormatter * System.Net.Http.Headers.MediaTypeHeaderValue * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsync (client, requestUri, value, formatter, mediaType, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="mediaType" Type="System.Net.Http.Headers.MediaTypeHeaderValue" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <param name="formatter">The formatter used to serialize the value.</param>
          <param name="mediaType">The authoritative value of the request's content's Content-Type header. Can be null in which case the &lt;paramref name="formatter"&gt;formatter's&lt;/paramref&gt; default content type will be used.</param>
          <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
          <summary> Sends a POST request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PostAsync(Of T) (client As HttpClient, requestUri As Uri, value As T, formatter As MediaTypeFormatter, mediaType As String) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member PostAsync : System.Net.Http.HttpClient * Uri * 'T * System.Net.Http.Formatting.MediaTypeFormatter * string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsync (client, requestUri, value, formatter, mediaType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="mediaType" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <param name="formatter">The formatter used to serialize the value.</param>
          <param name="mediaType">The authoritative value of the request's content's Content-Type header. Can be null in which case the &lt;paramref name="formatter"&gt;formatter's&lt;/paramref&gt; default content type will be used.</param>
          <summary> Sends a POST request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PostAsync : System.Net.Http.HttpClient * Uri * 'T * System.Net.Http.Formatting.MediaTypeFormatter * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsync (client, requestUri, value, formatter, mediaType, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="mediaType" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <param name="formatter">The formatter used to serialize the value.</param>
          <param name="mediaType">The authoritative value of the request's content's Content-Type header. Can be null in which case the &lt;paramref name="formatter"&gt;formatter's&lt;/paramref&gt; default content type will be used.</param>
          <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
          <summary> Sends a POST request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PostAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PostAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PostAsync : System.Net.Http.HttpClient * Uri * 'T * System.Net.Http.Formatting.MediaTypeFormatter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PostAsync (client, requestUri, value, formatter, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <param name="formatter">The formatter used to serialize the value.</param>
          <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
          <summary> Sends a POST request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsJsonAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsJsonAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsJsonAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PutAsJsonAsync(Of T) (client As HttpClient, requestUri As String, value As T) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member PutAsJsonAsync : System.Net.Http.HttpClient * string * 'T -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsJsonAsync (client, requestUri, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsJsonAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsJsonAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsJsonAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PutAsJsonAsync : System.Net.Http.HttpClient * string * 'T * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsJsonAsync (client, requestUri, value, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsJsonAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsJsonAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsJsonAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PutAsJsonAsync(Of T) (client As HttpClient, requestUri As Uri, value As T) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member PutAsJsonAsync : System.Net.Http.HttpClient * Uri * 'T -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsJsonAsync (client, requestUri, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <summary> Sends a PUT request as an asynchronous operation to the specified Uri with the given value serialized as JSON. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsJsonAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsJsonAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsJsonAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PutAsJsonAsync : System.Net.Http.HttpClient * Uri * 'T * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsJsonAsync (client, requestUri, value, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
          <summary> Sends a PUT request as an asynchronous operation to the specified Uri with the given value serialized as JSON. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsXmlAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsXmlAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsXmlAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PutAsXmlAsync(Of T) (client As HttpClient, requestUri As String, value As T) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member PutAsXmlAsync : System.Net.Http.HttpClient * string * 'T -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsXmlAsync (client, requestUri, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsXmlAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsXmlAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsXmlAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PutAsXmlAsync : System.Net.Http.HttpClient * string * 'T * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsXmlAsync (client, requestUri, value, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsXmlAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsXmlAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsXmlAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.Uri,``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PutAsXmlAsync(Of T) (client As HttpClient, requestUri As Uri, value As T) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member PutAsXmlAsync : System.Net.Http.HttpClient * Uri * 'T -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsXmlAsync (client, requestUri, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <summary> Sends a PUT request as an asynchronous operation to the specified Uri with the given value serialized as XML. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.Uri,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsXmlAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsXmlAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsXmlAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PutAsXmlAsync : System.Net.Http.HttpClient * Uri * 'T * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsXmlAsync (client, requestUri, value, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
          <summary> Sends a PUT request as an asynchronous operation to the specified Uri with the given value serialized as XML. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PutAsync(Of T) (client As HttpClient, requestUri As String, value As T, formatter As MediaTypeFormatter) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member PutAsync : System.Net.Http.HttpClient * string * 'T * System.Net.Http.Formatting.MediaTypeFormatter -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsync (client, requestUri, value, formatter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <param name="formatter">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, System.Net.Http.Headers.MediaTypeHeaderValue mediaType, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, class System.Net.Http.Headers.MediaTypeHeaderValue mediaType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PutAsync : System.Net.Http.HttpClient * string * 'T * System.Net.Http.Formatting.MediaTypeFormatter * System.Net.Http.Headers.MediaTypeHeaderValue * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsync (client, requestUri, value, formatter, mediaType, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="mediaType" Type="System.Net.Http.Headers.MediaTypeHeaderValue" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <param name="formatter">To be added.</param>
          <param name="mediaType">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PutAsync(Of T) (client As HttpClient, requestUri As String, value As T, formatter As MediaTypeFormatter, mediaType As String) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member PutAsync : System.Net.Http.HttpClient * string * 'T * System.Net.Http.Formatting.MediaTypeFormatter * string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsync (client, requestUri, value, formatter, mediaType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="mediaType" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <param name="formatter">To be added.</param>
          <param name="mediaType">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PutAsync : System.Net.Http.HttpClient * string * 'T * System.Net.Http.Formatting.MediaTypeFormatter * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsync (client, requestUri, value, formatter, mediaType, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="mediaType" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <param name="formatter">To be added.</param>
          <param name="mediaType">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt; (this System.Net.Http.HttpClient client, string requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt;(class System.Net.Http.HttpClient client, string requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PutAsync : System.Net.Http.HttpClient * string * 'T * System.Net.Http.Formatting.MediaTypeFormatter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsync (client, requestUri, value, formatter, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.String" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="client">To be added.</param>
          <param name="requestUri">To be added.</param>
          <param name="value">To be added.</param>
          <param name="formatter">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PutAsync(Of T) (client As HttpClient, requestUri As Uri, value As T, formatter As MediaTypeFormatter) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member PutAsync : System.Net.Http.HttpClient * Uri * 'T * System.Net.Http.Formatting.MediaTypeFormatter -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsync (client, requestUri, value, formatter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <param name="formatter">The formatter used to serialize the value.</param>
          <summary> Sends a PUT request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, System.Net.Http.Headers.MediaTypeHeaderValue mediaType, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, class System.Net.Http.Headers.MediaTypeHeaderValue mediaType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PutAsync : System.Net.Http.HttpClient * Uri * 'T * System.Net.Http.Formatting.MediaTypeFormatter * System.Net.Http.Headers.MediaTypeHeaderValue * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsync (client, requestUri, value, formatter, mediaType, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="mediaType" Type="System.Net.Http.Headers.MediaTypeHeaderValue" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <param name="formatter">The formatter used to serialize the value.</param>
          <param name="mediaType">The authoritative value of the request's content's Content-Type header. Can be null in which case the &lt;paramref name="formatter"&gt;formatter's&lt;/paramref&gt; default content type will be used.</param>
          <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
          <summary> Sends a PUT request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PutAsync(Of T) (client As HttpClient, requestUri As Uri, value As T, formatter As MediaTypeFormatter, mediaType As String) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member PutAsync : System.Net.Http.HttpClient * Uri * 'T * System.Net.Http.Formatting.MediaTypeFormatter * string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsync (client, requestUri, value, formatter, mediaType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="mediaType" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <param name="formatter">The formatter used to serialize the value.</param>
          <param name="mediaType">The authoritative value of the request's content's Content-Type header. Can be null in which case the &lt;paramref name="formatter"&gt;formatter's&lt;/paramref&gt; default content type will be used.</param>
          <summary> Sends a PUT request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PutAsync : System.Net.Http.HttpClient * Uri * 'T * System.Net.Http.Formatting.MediaTypeFormatter * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsync (client, requestUri, value, formatter, mediaType, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="mediaType" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <param name="formatter">The formatter used to serialize the value.</param>
          <param name="mediaType">The authoritative value of the request's content's Content-Type header. Can be null in which case the &lt;paramref name="formatter"&gt;formatter's&lt;/paramref&gt; default content type will be used.</param>
          <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
          <summary> Sends a PUT request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="PutAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt; (this System.Net.Http.HttpClient client, Uri requestUri, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; PutAsync&lt;T&gt;(class System.Net.Http.HttpClient client, class System.Uri requestUri, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PutAsync : System.Net.Http.HttpClient * Uri * 'T * System.Net.Http.Formatting.MediaTypeFormatter * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpClientExtensions.PutAsync (client, requestUri, value, formatter, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="requestUri" Type="System.Uri" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of value.</typeparam>
          <param name="client">The client used to make the request.</param>
          <param name="requestUri">The Uri the request is sent to.</param>
          <param name="value">The value that will be placed in the request's entity body.</param>
          <param name="formatter">The formatter used to serialize the value.</param>
          <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
          <summary> Sends a PUT request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpClientExtensions" Member="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;object&gt; ReadAsAsync (this System.Net.Http.HttpContent content, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;object&gt; ReadAsAsync(class System.Net.Http.HttpContent content, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type)" />
        <MemberSignature Language="F#" Value="static member ReadAsAsync : System.Net.Http.HttpContent * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="System.Net.Http.HttpContentExtensions.ReadAsAsync (content, type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="content">The HttpContent instance from which to read.</param>
          <param name="type">The type of the object to read.</param>
          <summary> Returns a Task that will yield an object of the specified type from the content instance. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentExtensions" Member="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;object&gt; ReadAsAsync (this System.Net.Http.HttpContent content, Type type, System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;object&gt; ReadAsAsync(class System.Net.Http.HttpContent content, class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" />
        <MemberSignature Language="F#" Value="static member ReadAsAsync : System.Net.Http.HttpContent * Type * seq&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="System.Net.Http.HttpContentExtensions.ReadAsAsync (content, type, formatters)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="formatters" Type="System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt;" />
        </Parameters>
        <Docs>
          <param name="content">The HttpContent instance from which to read.</param>
          <param name="type">The type of the object to read.</param>
          <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
          <summary> Returns a Task that will yield an object of the specified type from the content instance using one of the provided formatters to deserialize the content. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentExtensions" Member="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;object&gt; ReadAsAsync (this System.Net.Http.HttpContent content, Type type, System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters, System.Net.Http.Formatting.IFormatterLogger formatterLogger);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;object&gt; ReadAsAsync(class System.Net.Http.HttpContent content, class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters, class System.Net.Http.Formatting.IFormatterLogger formatterLogger) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)" />
        <MemberSignature Language="F#" Value="static member ReadAsAsync : System.Net.Http.HttpContent * Type * seq&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; * System.Net.Http.Formatting.IFormatterLogger -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="System.Net.Http.HttpContentExtensions.ReadAsAsync (content, type, formatters, formatterLogger)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="formatters" Type="System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt;" />
          <Parameter Name="formatterLogger" Type="System.Net.Http.Formatting.IFormatterLogger" />
        </Parameters>
        <Docs>
          <param name="content">The HttpContent instance from which to read.</param>
          <param name="type">The type of the object to read.</param>
          <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
          <param name="formatterLogger">The IFormatterLogger to log events to.</param>
          <summary> Returns a Task that will yield an object of the specified type from the content instance using one of the provided formatters to deserialize the content. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentExtensions" Member="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;object&gt; ReadAsAsync (this System.Net.Http.HttpContent content, Type type, System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters, System.Net.Http.Formatting.IFormatterLogger formatterLogger, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;object&gt; ReadAsAsync(class System.Net.Http.HttpContent content, class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters, class System.Net.Http.Formatting.IFormatterLogger formatterLogger, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsAsync : System.Net.Http.HttpContent * Type * seq&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; * System.Net.Http.Formatting.IFormatterLogger * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="System.Net.Http.HttpContentExtensions.ReadAsAsync (content, type, formatters, formatterLogger, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="formatters" Type="System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt;" />
          <Parameter Name="formatterLogger" Type="System.Net.Http.Formatting.IFormatterLogger" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="content">The HttpContent instance from which to read.</param>
          <param name="type">The type of the object to read.</param>
          <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
          <param name="formatterLogger">The IFormatterLogger to log events to.</param>
          <param name="cancellationToken">The token to cancel the operation.</param>
          <summary>Returns a Task that will yield an object of the specified type from the content instance using one of the provided formatters to deserialize the content.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentExtensions" Member="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;object&gt; ReadAsAsync (this System.Net.Http.HttpContent content, Type type, System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;object&gt; ReadAsAsync(class System.Net.Http.HttpContent content, class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsAsync : System.Net.Http.HttpContent * Type * seq&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="System.Net.Http.HttpContentExtensions.ReadAsAsync (content, type, formatters, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="formatters" Type="System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="content">The HttpContent instance from which to read.</param>
          <param name="type">The type of the object to read.</param>
          <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
          <param name="cancellationToken">The token to cancel the operation.</param>
          <summary>Returns a Task that will yield an object of the specified type from the content instance using one of the provided formatters to deserialize the content.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentExtensions" Member="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;object&gt; ReadAsAsync (this System.Net.Http.HttpContent content, Type type, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;object&gt; ReadAsAsync(class System.Net.Http.HttpContent content, class System.Type type, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsAsync : System.Net.Http.HttpContent * Type * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="System.Net.Http.HttpContentExtensions.ReadAsAsync (content, type, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="content">The HttpContent instance from which to read.</param>
          <param name="type">The type of the object to read.</param>
          <param name="cancellationToken">The token to cancel the operation.</param>
          <summary>Returns a Task that will yield an object of the specified type from the content instance using one of the provided formatters to deserialize the content.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentExtensions" Member="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; ReadAsAsync&lt;T&gt; (this System.Net.Http.HttpContent content);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; ReadAsAsync&lt;T&gt;(class System.Net.Http.HttpContent content) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAsAsync(Of T) (content As HttpContent) As Task(Of T)" />
        <MemberSignature Language="F#" Value="static member ReadAsAsync : System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="System.Net.Http.HttpContentExtensions.ReadAsAsync content" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the object to read.</typeparam>
          <param name="content">The HttpContent instance from which to read.</param>
          <summary> Returns a Task that will yield an object of the specified type &lt;typeparamref name="T" /&gt; from the content instance. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentExtensions" Member="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; ReadAsAsync&lt;T&gt; (this System.Net.Http.HttpContent content, System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; ReadAsAsync&lt;T&gt;(class System.Net.Http.HttpContent content, class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAsAsync(Of T) (content As HttpContent, formatters As IEnumerable(Of MediaTypeFormatter)) As Task(Of T)" />
        <MemberSignature Language="F#" Value="static member ReadAsAsync : System.Net.Http.HttpContent * seq&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="System.Net.Http.HttpContentExtensions.ReadAsAsync (content, formatters)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="formatters" Type="System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the object to read.</typeparam>
          <param name="content">The HttpContent instance from which to read.</param>
          <param name="formatters">The collection of MediaTyepFormatter instances to use.</param>
          <summary> Returns a Task that will yield an object of the specified type &lt;typeparamref name="T" /&gt; from the content instance. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentExtensions" Member="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; ReadAsAsync&lt;T&gt; (this System.Net.Http.HttpContent content, System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters, System.Net.Http.Formatting.IFormatterLogger formatterLogger);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; ReadAsAsync&lt;T&gt;(class System.Net.Http.HttpContent content, class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters, class System.Net.Http.Formatting.IFormatterLogger formatterLogger) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAsAsync(Of T) (content As HttpContent, formatters As IEnumerable(Of MediaTypeFormatter), formatterLogger As IFormatterLogger) As Task(Of T)" />
        <MemberSignature Language="F#" Value="static member ReadAsAsync : System.Net.Http.HttpContent * seq&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; * System.Net.Http.Formatting.IFormatterLogger -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="System.Net.Http.HttpContentExtensions.ReadAsAsync (content, formatters, formatterLogger)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="formatters" Type="System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt;" />
          <Parameter Name="formatterLogger" Type="System.Net.Http.Formatting.IFormatterLogger" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the object to read.</typeparam>
          <param name="content">The HttpContent instance from which to read.</param>
          <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
          <param name="formatterLogger">The IFormatterLogger to log events to.</param>
          <summary> Returns a Task that will yield an object of the specified type &lt;typeparamref name="T" /&gt; from the content instance. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentExtensions" Member="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; ReadAsAsync&lt;T&gt; (this System.Net.Http.HttpContent content, System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters, System.Net.Http.Formatting.IFormatterLogger formatterLogger, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; ReadAsAsync&lt;T&gt;(class System.Net.Http.HttpContent content, class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters, class System.Net.Http.Formatting.IFormatterLogger formatterLogger, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsAsync : System.Net.Http.HttpContent * seq&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; * System.Net.Http.Formatting.IFormatterLogger * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="System.Net.Http.HttpContentExtensions.ReadAsAsync (content, formatters, formatterLogger, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="formatters" Type="System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt;" />
          <Parameter Name="formatterLogger" Type="System.Net.Http.Formatting.IFormatterLogger" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the object to read.</typeparam>
          <param name="content">The HttpContent instance from which to read.</param>
          <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
          <param name="formatterLogger">The IFormatterLogger to log events to.</param>
          <param name="cancellationToken">The token to cancel the operation.</param>
          <summary>Returns a Task that will yield an object of the specified type from the content instance.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentExtensions" Member="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; ReadAsAsync&lt;T&gt; (this System.Net.Http.HttpContent content, System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; ReadAsAsync&lt;T&gt;(class System.Net.Http.HttpContent content, class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsAsync : System.Net.Http.HttpContent * seq&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="System.Net.Http.HttpContentExtensions.ReadAsAsync (content, formatters, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="formatters" Type="System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the object to read.</typeparam>
          <param name="content">The HttpContent instance from which to read.</param>
          <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
          <param name="cancellationToken">The token to cancel the operation.</param>
          <summary>Returns a Task that will yield an object of the specified type from the content instance.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentExtensions" Member="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; ReadAsAsync&lt;T&gt; (this System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; ReadAsAsync&lt;T&gt;(class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsAsync : System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="System.Net.Http.HttpContentExtensions.ReadAsAsync (content, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the object to read.</typeparam>
          <param name="content">The HttpContent instance from which to read.</param>
          <param name="cancellationToken">The token to cancel the operation.</param>
          <summary>Returns a Task that will yield an object of the specified type from the content instance.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentExtensions" Member="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="IsFormData">
        <MemberSignature Language="C#" Value="public static bool IsFormData (this System.Net.Http.HttpContent content);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFormData(class System.Net.Http.HttpContent content) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentFormDataExtensions.IsFormData(System.Net.Http.HttpContent)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsFormData (content As HttpContent) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsFormData : System.Net.Http.HttpContent -&gt; bool" Usage="System.Net.Http.HttpContentFormDataExtensions.IsFormData content" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
        </Parameters>
        <Docs>
          <param name="content">The content.</param>
          <summary>Determines whether the specified content is HTML form URL-encoded data.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentFormDataExtensions" Member="M:System.Net.Http.HttpContentFormDataExtensions.IsFormData(System.Net.Http.HttpContent)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsFormDataAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Specialized.NameValueCollection&gt; ReadAsFormDataAsync (this System.Net.Http.HttpContent content);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Specialized.NameValueCollection&gt; ReadAsFormDataAsync(class System.Net.Http.HttpContent content) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentFormDataExtensions.ReadAsFormDataAsync(System.Net.Http.HttpContent)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAsFormDataAsync (content As HttpContent) As Task(Of NameValueCollection)" />
        <MemberSignature Language="F#" Value="static member ReadAsFormDataAsync : System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Collections.Specialized.NameValueCollection&gt;" Usage="System.Net.Http.HttpContentFormDataExtensions.ReadAsFormDataAsync content" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Specialized.NameValueCollection&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
        </Parameters>
        <Docs>
          <param name="content">The content.</param>
          <summary>Asynchronously reads HTML form URL-encoded from an <see cref="T:System.Net.Http.HttpContent" /> instance and stores the results in a <see cref="T:System.Collections.Specialized.NameValueCollection" /> object.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentFormDataExtensions" Member="M:System.Net.Http.HttpContentFormDataExtensions.ReadAsFormDataAsync(System.Net.Http.HttpContent)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsFormDataAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Specialized.NameValueCollection&gt; ReadAsFormDataAsync (this System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Specialized.NameValueCollection&gt; ReadAsFormDataAsync(class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentFormDataExtensions.ReadAsFormDataAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsFormDataAsync : System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Specialized.NameValueCollection&gt;" Usage="System.Net.Http.HttpContentFormDataExtensions.ReadAsFormDataAsync (content, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Specialized.NameValueCollection&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="content">The content.</param>
          <param name="cancellationToken">The token to cancel the operation.</param>
          <summary>Asynchronously reads HTML form URL-encoded from an <see cref="T:System.Net.Http.HttpContent" /> instance and stores the results in a <see cref="T:System.Collections.Specialized.NameValueCollection" /> object.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentFormDataExtensions" Member="M:System.Net.Http.HttpContentFormDataExtensions.ReadAsFormDataAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="IsHttpRequestMessageContent">
        <MemberSignature Language="C#" Value="public static bool IsHttpRequestMessageContent (this System.Net.Http.HttpContent content);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHttpRequestMessageContent(class System.Net.Http.HttpContent content) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMessageExtensions.IsHttpRequestMessageContent(System.Net.Http.HttpContent)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsHttpRequestMessageContent (content As HttpContent) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsHttpRequestMessageContent : System.Net.Http.HttpContent -&gt; bool" Usage="System.Net.Http.HttpContentMessageExtensions.IsHttpRequestMessageContent content" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
        </Parameters>
        <Docs>
          <param name="content">The content to check.</param>
          <summary>Determines whether the specified content is HTTP request message content.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMessageExtensions" Member="M:System.Net.Http.HttpContentMessageExtensions.IsHttpRequestMessageContent(System.Net.Http.HttpContent)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="IsHttpResponseMessageContent">
        <MemberSignature Language="C#" Value="public static bool IsHttpResponseMessageContent (this System.Net.Http.HttpContent content);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHttpResponseMessageContent(class System.Net.Http.HttpContent content) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMessageExtensions.IsHttpResponseMessageContent(System.Net.Http.HttpContent)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsHttpResponseMessageContent (content As HttpContent) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsHttpResponseMessageContent : System.Net.Http.HttpContent -&gt; bool" Usage="System.Net.Http.HttpContentMessageExtensions.IsHttpResponseMessageContent content" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
        </Parameters>
        <Docs>
          <param name="content">The content to check.</param>
          <summary>Determines whether the specified content is HTTP response message content.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMessageExtensions" Member="M:System.Net.Http.HttpContentMessageExtensions.IsHttpResponseMessageContent(System.Net.Http.HttpContent)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsHttpRequestMessageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt; ReadAsHttpRequestMessageAsync (this System.Net.Http.HttpContent content);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpRequestMessage&gt; ReadAsHttpRequestMessageAsync(class System.Net.Http.HttpContent content) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAsHttpRequestMessageAsync (content As HttpContent) As Task(Of HttpRequestMessage)" />
        <MemberSignature Language="F#" Value="static member ReadAsHttpRequestMessageAsync : System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt;" Usage="System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync content" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
        </Parameters>
        <Docs>
          <param name="content">The content to read.</param>
          <summary> Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMessageExtensions" Member="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsHttpRequestMessageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt; ReadAsHttpRequestMessageAsync (this System.Net.Http.HttpContent content, string uriScheme);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpRequestMessage&gt; ReadAsHttpRequestMessageAsync(class System.Net.Http.HttpContent content, string uriScheme) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAsHttpRequestMessageAsync (content As HttpContent, uriScheme As String) As Task(Of HttpRequestMessage)" />
        <MemberSignature Language="F#" Value="static member ReadAsHttpRequestMessageAsync : System.Net.Http.HttpContent * string -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt;" Usage="System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync (content, uriScheme)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="uriScheme" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="content">The content to read.</param>
          <param name="uriScheme">The URI scheme to use for the request URI.</param>
          <summary> Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMessageExtensions" Member="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsHttpRequestMessageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt; ReadAsHttpRequestMessageAsync (this System.Net.Http.HttpContent content, string uriScheme, int bufferSize);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpRequestMessage&gt; ReadAsHttpRequestMessageAsync(class System.Net.Http.HttpContent content, string uriScheme, int32 bufferSize) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAsHttpRequestMessageAsync (content As HttpContent, uriScheme As String, bufferSize As Integer) As Task(Of HttpRequestMessage)" />
        <MemberSignature Language="F#" Value="static member ReadAsHttpRequestMessageAsync : System.Net.Http.HttpContent * string * int -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt;" Usage="System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync (content, uriScheme, bufferSize)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="uriScheme" Type="System.String" />
          <Parameter Name="bufferSize" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="content">The content to read.</param>
          <param name="uriScheme">The URI scheme to use for the request URI.</param>
          <param name="bufferSize">The size of the buffer.</param>
          <summary> Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMessageExtensions" Member="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsHttpRequestMessageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt; ReadAsHttpRequestMessageAsync (this System.Net.Http.HttpContent content, string uriScheme, int bufferSize, int maxHeaderSize);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpRequestMessage&gt; ReadAsHttpRequestMessageAsync(class System.Net.Http.HttpContent content, string uriScheme, int32 bufferSize, int32 maxHeaderSize) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32,System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAsHttpRequestMessageAsync (content As HttpContent, uriScheme As String, bufferSize As Integer, maxHeaderSize As Integer) As Task(Of HttpRequestMessage)" />
        <MemberSignature Language="F#" Value="static member ReadAsHttpRequestMessageAsync : System.Net.Http.HttpContent * string * int * int -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt;" Usage="System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync (content, uriScheme, bufferSize, maxHeaderSize)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="uriScheme" Type="System.String" />
          <Parameter Name="bufferSize" Type="System.Int32" />
          <Parameter Name="maxHeaderSize" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="content">The content to read.</param>
          <param name="uriScheme">The URI scheme to use for the request URI.</param>
          <param name="bufferSize">The size of the buffer.</param>
          <param name="maxHeaderSize">The maximum length of the HTTP header.</param>
          <summary>Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMessageExtensions" Member="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsHttpRequestMessageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt; ReadAsHttpRequestMessageAsync (this System.Net.Http.HttpContent content, string uriScheme, int bufferSize, int maxHeaderSize, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpRequestMessage&gt; ReadAsHttpRequestMessageAsync(class System.Net.Http.HttpContent content, string uriScheme, int32 bufferSize, int32 maxHeaderSize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsHttpRequestMessageAsync : System.Net.Http.HttpContent * string * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt;" Usage="System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync (content, uriScheme, bufferSize, maxHeaderSize, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="uriScheme" Type="System.String" />
          <Parameter Name="bufferSize" Type="System.Int32" />
          <Parameter Name="maxHeaderSize" Type="System.Int32" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="content">To be added.</param>
          <param name="uriScheme">To be added.</param>
          <param name="bufferSize">To be added.</param>
          <param name="maxHeaderSize">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMessageExtensions" Member="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsHttpRequestMessageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt; ReadAsHttpRequestMessageAsync (this System.Net.Http.HttpContent content, string uriScheme, int bufferSize, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpRequestMessage&gt; ReadAsHttpRequestMessageAsync(class System.Net.Http.HttpContent content, string uriScheme, int32 bufferSize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsHttpRequestMessageAsync : System.Net.Http.HttpContent * string * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt;" Usage="System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync (content, uriScheme, bufferSize, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="uriScheme" Type="System.String" />
          <Parameter Name="bufferSize" Type="System.Int32" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="content">To be added.</param>
          <param name="uriScheme">To be added.</param>
          <param name="bufferSize">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMessageExtensions" Member="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsHttpRequestMessageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt; ReadAsHttpRequestMessageAsync (this System.Net.Http.HttpContent content, string uriScheme, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpRequestMessage&gt; ReadAsHttpRequestMessageAsync(class System.Net.Http.HttpContent content, string uriScheme, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsHttpRequestMessageAsync : System.Net.Http.HttpContent * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt;" Usage="System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync (content, uriScheme, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="uriScheme" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="content">To be added.</param>
          <param name="uriScheme">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMessageExtensions" Member="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsHttpRequestMessageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt; ReadAsHttpRequestMessageAsync (this System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpRequestMessage&gt; ReadAsHttpRequestMessageAsync(class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsHttpRequestMessageAsync : System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt;" Usage="System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync (content, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpRequestMessage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="content">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMessageExtensions" Member="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsHttpResponseMessageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; ReadAsHttpResponseMessageAsync (this System.Net.Http.HttpContent content);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; ReadAsHttpResponseMessageAsync(class System.Net.Http.HttpContent content) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAsHttpResponseMessageAsync (content As HttpContent) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member ReadAsHttpResponseMessageAsync : System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync content" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
        </Parameters>
        <Docs>
          <param name="content">The content to read.</param>
          <summary> Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMessageExtensions" Member="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsHttpResponseMessageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; ReadAsHttpResponseMessageAsync (this System.Net.Http.HttpContent content, int bufferSize);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; ReadAsHttpResponseMessageAsync(class System.Net.Http.HttpContent content, int32 bufferSize) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAsHttpResponseMessageAsync (content As HttpContent, bufferSize As Integer) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member ReadAsHttpResponseMessageAsync : System.Net.Http.HttpContent * int -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync (content, bufferSize)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="bufferSize" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="content">The content to read.</param>
          <param name="bufferSize">The size of the buffer.</param>
          <summary>Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMessageExtensions" Member="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsHttpResponseMessageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; ReadAsHttpResponseMessageAsync (this System.Net.Http.HttpContent content, int bufferSize, int maxHeaderSize);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; ReadAsHttpResponseMessageAsync(class System.Net.Http.HttpContent content, int32 bufferSize, int32 maxHeaderSize) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32,System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAsHttpResponseMessageAsync (content As HttpContent, bufferSize As Integer, maxHeaderSize As Integer) As Task(Of HttpResponseMessage)" />
        <MemberSignature Language="F#" Value="static member ReadAsHttpResponseMessageAsync : System.Net.Http.HttpContent * int * int -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync (content, bufferSize, maxHeaderSize)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="bufferSize" Type="System.Int32" />
          <Parameter Name="maxHeaderSize" Type="System.Int32" />
        </Parameters>
        <Docs>
          <param name="content">The content to read.</param>
          <param name="bufferSize">The size of the buffer.</param>
          <param name="maxHeaderSize">The maximum length of the HTTP header.</param>
          <summary>Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMessageExtensions" Member="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsHttpResponseMessageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; ReadAsHttpResponseMessageAsync (this System.Net.Http.HttpContent content, int bufferSize, int maxHeaderSize, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; ReadAsHttpResponseMessageAsync(class System.Net.Http.HttpContent content, int32 bufferSize, int32 maxHeaderSize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32,System.Int32,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsHttpResponseMessageAsync : System.Net.Http.HttpContent * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync (content, bufferSize, maxHeaderSize, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="bufferSize" Type="System.Int32" />
          <Parameter Name="maxHeaderSize" Type="System.Int32" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="content">To be added.</param>
          <param name="bufferSize">To be added.</param>
          <param name="maxHeaderSize">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMessageExtensions" Member="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32,System.Int32,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsHttpResponseMessageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; ReadAsHttpResponseMessageAsync (this System.Net.Http.HttpContent content, int bufferSize, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; ReadAsHttpResponseMessageAsync(class System.Net.Http.HttpContent content, int32 bufferSize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsHttpResponseMessageAsync : System.Net.Http.HttpContent * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync (content, bufferSize, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="bufferSize" Type="System.Int32" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="content">To be added.</param>
          <param name="bufferSize">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMessageExtensions" Member="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsHttpResponseMessageAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; ReadAsHttpResponseMessageAsync (this System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; ReadAsHttpResponseMessageAsync(class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsHttpResponseMessageAsync : System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync (content, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="content">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMessageExtensions" Member="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="IsMimeMultipartContent">
        <MemberSignature Language="C#" Value="public static bool IsMimeMultipartContent (this System.Net.Http.HttpContent content);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMimeMultipartContent(class System.Net.Http.HttpContent content) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent(System.Net.Http.HttpContent)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsMimeMultipartContent (content As HttpContent) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsMimeMultipartContent : System.Net.Http.HttpContent -&gt; bool" Usage="System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent content" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
        </Parameters>
        <Docs>
          <param name="content">The content.</param>
          <summary>Determines whether the specified content is MIME multipart content.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMultipartExtensions" Member="M:System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent(System.Net.Http.HttpContent)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="IsMimeMultipartContent">
        <MemberSignature Language="C#" Value="public static bool IsMimeMultipartContent (this System.Net.Http.HttpContent content, string subtype);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMimeMultipartContent(class System.Net.Http.HttpContent content, string subtype) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent(System.Net.Http.HttpContent,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsMimeMultipartContent (content As HttpContent, subtype As String) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsMimeMultipartContent : System.Net.Http.HttpContent * string -&gt; bool" Usage="System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent (content, subtype)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="subtype" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="content">The content.</param>
          <param name="subtype">The MIME multipart subtype to match.</param>
          <summary>Determines whether the specified content is MIME multipart content with the specified subtype.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMultipartExtensions" Member="M:System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent(System.Net.Http.HttpContent,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsMultipartAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.MultipartMemoryStreamProvider&gt; ReadAsMultipartAsync (this System.Net.Http.HttpContent content);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.MultipartMemoryStreamProvider&gt; ReadAsMultipartAsync(class System.Net.Http.HttpContent content) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync(System.Net.Http.HttpContent)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAsMultipartAsync (content As HttpContent) As Task(Of MultipartMemoryStreamProvider)" />
        <MemberSignature Language="F#" Value="static member ReadAsMultipartAsync : System.Net.Http.HttpContent -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.MultipartMemoryStreamProvider&gt;" Usage="System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync content" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.MultipartMemoryStreamProvider&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
        </Parameters>
        <Docs>
          <param name="content">An existing <see cref="T:System.Net.Http.HttpContent" /> instance to use for the object's content.</param>
          <summary>Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent" /> instances as a result.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMultipartExtensions" Member="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync(System.Net.Http.HttpContent)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsMultipartAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.MultipartMemoryStreamProvider&gt; ReadAsMultipartAsync (this System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.MultipartMemoryStreamProvider&gt; ReadAsMultipartAsync(class System.Net.Http.HttpContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsMultipartAsync : System.Net.Http.HttpContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.MultipartMemoryStreamProvider&gt;" Usage="System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync (content, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.MultipartMemoryStreamProvider&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="content">An existing <see cref="T:System.Net.Http.HttpContent" /> instance to use for the object's content.</param>
          <param name="cancellationToken">The token to cancel the operation.</param>
          <summary>Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent" /> instances as a result.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMultipartExtensions" Member="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsMultipartAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; ReadAsMultipartAsync&lt;T&gt; (this System.Net.Http.HttpContent content, T streamProvider) where T : System.Net.Http.MultipartStreamProvider;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; ReadAsMultipartAsync&lt;(class System.Net.Http.MultipartStreamProvider) T&gt;(class System.Net.Http.HttpContent content, !!T streamProvider) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAsMultipartAsync(Of T As MultipartStreamProvider) (content As HttpContent, streamProvider As T) As Task(Of T)" />
        <MemberSignature Language="F#" Value="static member ReadAsMultipartAsync : System.Net.Http.HttpContent * 'T -&gt; System.Threading.Tasks.Task&lt;'T (requires 'T :&gt; System.Net.Http.MultipartStreamProvider)&gt; (requires 'T :&gt; System.Net.Http.MultipartStreamProvider)" Usage="System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync (content, streamProvider)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Net.Http.MultipartStreamProvider</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="streamProvider" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the MIME multipart.</typeparam>
          <param name="content">An existing <see cref="T:System.Net.Http.HttpContent" /> instance to use for the object's content.</param>
          <param name="streamProvider">A stream provider providing output streams for where to write body parts as they are parsed.</param>
          <summary>Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent" /> instances as a result using the streamProvider instance to determine where the contents of each body part is written.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMultipartExtensions" Member="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsMultipartAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; ReadAsMultipartAsync&lt;T&gt; (this System.Net.Http.HttpContent content, T streamProvider, int bufferSize) where T : System.Net.Http.MultipartStreamProvider;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; ReadAsMultipartAsync&lt;(class System.Net.Http.MultipartStreamProvider) T&gt;(class System.Net.Http.HttpContent content, !!T streamProvider, int32 bufferSize) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0,System.Int32)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAsMultipartAsync(Of T As MultipartStreamProvider) (content As HttpContent, streamProvider As T, bufferSize As Integer) As Task(Of T)" />
        <MemberSignature Language="F#" Value="static member ReadAsMultipartAsync : System.Net.Http.HttpContent * 'T * int -&gt; System.Threading.Tasks.Task&lt;'T (requires 'T :&gt; System.Net.Http.MultipartStreamProvider)&gt; (requires 'T :&gt; System.Net.Http.MultipartStreamProvider)" Usage="System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync (content, streamProvider, bufferSize)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Net.Http.MultipartStreamProvider</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="streamProvider" Type="T" />
          <Parameter Name="bufferSize" Type="System.Int32" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the MIME multipart.</typeparam>
          <param name="content">An existing <see cref="T:System.Net.Http.HttpContent" /> instance to use for the object's content.</param>
          <param name="streamProvider">A stream provider providing output streams for where to write body parts as they are parsed.</param>
          <param name="bufferSize">Size of the buffer used to read the contents.</param>
          <summary>Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent" /> instances as a result using the streamProvider instance to determine where the contents of each body part is written and bufferSize as read buffer size.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMultipartExtensions" Member="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0,System.Int32)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsMultipartAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; ReadAsMultipartAsync&lt;T&gt; (this System.Net.Http.HttpContent content, T streamProvider, int bufferSize, System.Threading.CancellationToken cancellationToken) where T : System.Net.Http.MultipartStreamProvider;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; ReadAsMultipartAsync&lt;(class System.Net.Http.MultipartStreamProvider) T&gt;(class System.Net.Http.HttpContent content, !!T streamProvider, int32 bufferSize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0,System.Int32,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsMultipartAsync : System.Net.Http.HttpContent * 'T * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'T (requires 'T :&gt; System.Net.Http.MultipartStreamProvider)&gt; (requires 'T :&gt; System.Net.Http.MultipartStreamProvider)" Usage="System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync (content, streamProvider, bufferSize, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Net.Http.MultipartStreamProvider</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="streamProvider" Type="T" />
          <Parameter Name="bufferSize" Type="System.Int32" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the MIME multipart.</typeparam>
          <param name="content">An existing <see cref="T:System.Net.Http.HttpContent" /> instance to use for the object's content.</param>
          <param name="streamProvider">A stream provider providing output streams for where to write body parts as they are parsed.</param>
          <param name="bufferSize">Size of the buffer used to read the contents.</param>
          <param name="cancellationToken">The token to cancel the operation.</param>
          <summary>Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent" /> instances as a result using the streamProvider instance to determine where the contents of each body part is written and bufferSize as read buffer size.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMultipartExtensions" Member="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0,System.Int32,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpContent" />
      </Targets>
      <Member MemberName="ReadAsMultipartAsync&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; ReadAsMultipartAsync&lt;T&gt; (this System.Net.Http.HttpContent content, T streamProvider, System.Threading.CancellationToken cancellationToken) where T : System.Net.Http.MultipartStreamProvider;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; ReadAsMultipartAsync&lt;(class System.Net.Http.MultipartStreamProvider) T&gt;(class System.Net.Http.HttpContent content, !!T streamProvider, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsMultipartAsync : System.Net.Http.HttpContent * 'T * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'T (requires 'T :&gt; System.Net.Http.MultipartStreamProvider)&gt; (requires 'T :&gt; System.Net.Http.MultipartStreamProvider)" Usage="System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync (content, streamProvider, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <BaseTypeName>System.Net.Http.MultipartStreamProvider</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="content" Type="System.Net.Http.HttpContent" RefType="this" />
          <Parameter Name="streamProvider" Type="T" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the MIME multipart.</typeparam>
          <param name="content">An existing <see cref="T:System.Net.Http.HttpContent" /> instance to use for the object's content.</param>
          <param name="streamProvider">A stream provider providing output streams for where to write body parts as they are parsed.</param>
          <param name="cancellationToken">The token to cancel the operation.</param>
          <summary>Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent" /> instances as a result using the streamProvider instance to determine where the contents of each body part is written.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpContentMultipartExtensions" Member="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Headers.HttpRequestHeaders" />
      </Targets>
      <Member MemberName="GetCookies">
        <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.Collection&lt;System.Net.Http.Headers.CookieHeaderValue&gt; GetCookies (this System.Net.Http.Headers.HttpRequestHeaders headers);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.Collection`1&lt;class System.Net.Http.Headers.CookieHeaderValue&gt; GetCookies(class System.Net.Http.Headers.HttpRequestHeaders headers) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestHeadersExtensions.GetCookies(System.Net.Http.Headers.HttpRequestHeaders)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetCookies (headers As HttpRequestHeaders) As Collection(Of CookieHeaderValue)" />
        <MemberSignature Language="F#" Value="static member GetCookies : System.Net.Http.Headers.HttpRequestHeaders -&gt; System.Collections.ObjectModel.Collection&lt;System.Net.Http.Headers.CookieHeaderValue&gt;" Usage="System.Net.Http.HttpRequestHeadersExtensions.GetCookies headers" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Net.Http.Headers.CookieHeaderValue&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="headers" Type="System.Net.Http.Headers.HttpRequestHeaders" RefType="this" />
        </Parameters>
        <Docs>
          <param name="headers">The request headers.</param>
          <summary>Gets any cookie headers present in the request.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestHeadersExtensions" Member="M:System.Net.Http.HttpRequestHeadersExtensions.GetCookies(System.Net.Http.Headers.HttpRequestHeaders)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Headers.HttpRequestHeaders" />
      </Targets>
      <Member MemberName="GetCookies">
        <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.Collection&lt;System.Net.Http.Headers.CookieHeaderValue&gt; GetCookies (this System.Net.Http.Headers.HttpRequestHeaders headers, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.Collection`1&lt;class System.Net.Http.Headers.CookieHeaderValue&gt; GetCookies(class System.Net.Http.Headers.HttpRequestHeaders headers, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestHeadersExtensions.GetCookies(System.Net.Http.Headers.HttpRequestHeaders,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetCookies (headers As HttpRequestHeaders, name As String) As Collection(Of CookieHeaderValue)" />
        <MemberSignature Language="F#" Value="static member GetCookies : System.Net.Http.Headers.HttpRequestHeaders * string -&gt; System.Collections.ObjectModel.Collection&lt;System.Net.Http.Headers.CookieHeaderValue&gt;" Usage="System.Net.Http.HttpRequestHeadersExtensions.GetCookies (headers, name)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Net.Http.Headers.CookieHeaderValue&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="headers" Type="System.Net.Http.Headers.HttpRequestHeaders" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="headers">The request headers.</param>
          <param name="name">The cookie state name to match.</param>
          <summary>Gets any cookie headers present in the request that contain a cookie state whose name that matches the specified value.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestHeadersExtensions" Member="M:System.Net.Http.HttpRequestHeadersExtensions.GetCookies(System.Net.Http.Headers.HttpRequestHeaders,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateErrorResponse">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateErrorResponse (this System.Net.Http.HttpRequestMessage request, System.Net.Http.InvalidByteRangeException invalidByteRangeException);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateErrorResponse(class System.Net.Http.HttpRequestMessage request, class System.Net.Http.InvalidByteRangeException invalidByteRangeException) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.Http.InvalidByteRangeException)" />
        <MemberSignature Language="F#" Value="static member CreateErrorResponse : System.Net.Http.HttpRequestMessage * System.Net.Http.InvalidByteRangeException -&gt; System.Net.Http.HttpResponseMessage" Usage="System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse (request, invalidByteRangeException)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="invalidByteRangeException" Type="System.Net.Http.InvalidByteRangeException" />
        </Parameters>
        <Docs>
          <param name="request">To be added.</param>
          <param name="invalidByteRangeException">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.Http.InvalidByteRangeException)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateErrorResponse">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateErrorResponse (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, Exception exception);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateErrorResponse(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, class System.Exception exception) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Exception)" />
        <MemberSignature Language="F#" Value="static member CreateErrorResponse : System.Net.Http.HttpRequestMessage * System.Net.HttpStatusCode * Exception -&gt; System.Net.Http.HttpResponseMessage" Usage="System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse (request, statusCode, exception)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="exception" Type="System.Exception" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request.</param>
          <param name="statusCode">The status code of the response.</param>
          <param name="exception">The exception.</param>
          <summary>Creates an <see cref="T:System.Net.Http.HttpResponseMessage" /> that represents an exception.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Exception)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateErrorResponse">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateErrorResponse (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, string message);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateErrorResponse(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, string message) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateErrorResponse (request As HttpRequestMessage, statusCode As HttpStatusCode, message As String) As HttpResponseMessage" />
        <MemberSignature Language="F#" Value="static member CreateErrorResponse : System.Net.Http.HttpRequestMessage * System.Net.HttpStatusCode * string -&gt; System.Net.Http.HttpResponseMessage" Usage="System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse (request, statusCode, message)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="message" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request.</param>
          <param name="statusCode">The status code of the response.</param>
          <param name="message">The error message.</param>
          <summary>Creates an <see cref="T:System.Net.Http.HttpResponseMessage" /> that represents an error message.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateErrorResponse">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateErrorResponse (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, string message, Exception exception);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateErrorResponse(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, string message, class System.Exception exception) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String,System.Exception)" />
        <MemberSignature Language="F#" Value="static member CreateErrorResponse : System.Net.Http.HttpRequestMessage * System.Net.HttpStatusCode * string * Exception -&gt; System.Net.Http.HttpResponseMessage" Usage="System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse (request, statusCode, message, exception)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="message" Type="System.String" />
          <Parameter Name="exception" Type="System.Exception" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request.</param>
          <param name="statusCode">The status code of the response.</param>
          <param name="message">The error message.</param>
          <param name="exception">The exception.</param>
          <summary>Creates an <see cref="T:System.Net.Http.HttpResponseMessage" /> that represents an exception with an error message.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String,System.Exception)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateErrorResponse">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateErrorResponse (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, System.Web.Http.HttpError error);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateErrorResponse(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, class System.Web.Http.HttpError error) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.HttpError)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateErrorResponse (request As HttpRequestMessage, statusCode As HttpStatusCode, error As HttpError) As HttpResponseMessage" />
        <MemberSignature Language="F#" Value="static member CreateErrorResponse : System.Net.Http.HttpRequestMessage * System.Net.HttpStatusCode * System.Web.Http.HttpError -&gt; System.Net.Http.HttpResponseMessage" Usage="System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse (request, statusCode, error)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="error" Type="System.Web.Http.HttpError" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request.</param>
          <param name="statusCode">The status code of the response.</param>
          <param name="error">The HTTP error.</param>
          <summary>Creates an <see cref="T:System.Net.Http.HttpResponseMessage" /> that represents an error.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.HttpError)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateErrorResponse">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateErrorResponse (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, System.Web.Http.ModelBinding.ModelStateDictionary modelState);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateErrorResponse(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, class System.Web.Http.ModelBinding.ModelStateDictionary modelState) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.ModelBinding.ModelStateDictionary)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateErrorResponse (request As HttpRequestMessage, statusCode As HttpStatusCode, modelState As ModelStateDictionary) As HttpResponseMessage" />
        <MemberSignature Language="F#" Value="static member CreateErrorResponse : System.Net.Http.HttpRequestMessage * System.Net.HttpStatusCode * System.Web.Http.ModelBinding.ModelStateDictionary -&gt; System.Net.Http.HttpResponseMessage" Usage="System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse (request, statusCode, modelState)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="modelState" Type="System.Web.Http.ModelBinding.ModelStateDictionary" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request.</param>
          <param name="statusCode">The status code of the response.</param>
          <param name="modelState">The model state.</param>
          <summary>Creates an <see cref="T:System.Net.Http.HttpResponseMessage" /> that represents an error in the model state.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.ModelBinding.ModelStateDictionary)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateResponse (request As HttpRequestMessage) As HttpResponseMessage" />
        <MemberSignature Language="F#" Value="static member CreateResponse : System.Net.Http.HttpRequestMessage -&gt; System.Net.Http.HttpResponseMessage" Usage="System.Net.Http.HttpRequestMessageExtensions.CreateResponse request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateResponse (request As HttpRequestMessage, statusCode As HttpStatusCode) As HttpResponseMessage" />
        <MemberSignature Language="F#" Value="static member CreateResponse : System.Net.Http.HttpRequestMessage * System.Net.HttpStatusCode -&gt; System.Net.Http.HttpResponseMessage" Usage="System.Net.Http.HttpRequestMessageExtensions.CreateResponse (request, statusCode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
        </Parameters>
        <Docs>
          <param name="request">To be added.</param>
          <param name="statusCode">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt; (this System.Net.Http.HttpRequestMessage request, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt;(class System.Net.Http.HttpRequestMessage request, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateResponse(Of T) (request As HttpRequestMessage, value As T) As HttpResponseMessage" />
        <MemberSignature Language="F#" Value="static member CreateResponse : System.Net.Http.HttpRequestMessage * 'T -&gt; System.Net.Http.HttpResponseMessage" Usage="System.Net.Http.HttpRequestMessageExtensions.CreateResponse (request, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="request">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt; (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt;(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, !!T value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateResponse(Of T) (request As HttpRequestMessage, statusCode As HttpStatusCode, value As T) As HttpResponseMessage" />
        <MemberSignature Language="F#" Value="static member CreateResponse : System.Net.Http.HttpRequestMessage * System.Net.HttpStatusCode * 'T -&gt; System.Net.Http.HttpResponseMessage" Usage="System.Net.Http.HttpRequestMessageExtensions.CreateResponse (request, statusCode, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="value" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the HTTP response message.</typeparam>
          <param name="request">The HTTP request message which led to this response message.</param>
          <param name="statusCode">The HTTP response status code.</param>
          <param name="value">The content of the HTTP response message.</param>
          <summary>Creates an <see cref="T:System.Net.Http.HttpResponseMessage" /> wired up to the associated <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt; (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt;(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateResponse(Of T) (request As HttpRequestMessage, statusCode As HttpStatusCode, value As T, formatter As MediaTypeFormatter) As HttpResponseMessage" />
        <MemberSignature Language="F#" Value="static member CreateResponse : System.Net.Http.HttpRequestMessage * System.Net.HttpStatusCode * 'T * System.Net.Http.Formatting.MediaTypeFormatter -&gt; System.Net.Http.HttpResponseMessage" Usage="System.Net.Http.HttpRequestMessageExtensions.CreateResponse (request, statusCode, value, formatter)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the HTTP response message.</typeparam>
          <param name="request">The HTTP request message which led to this response message.</param>
          <param name="statusCode">The HTTP response status code.</param>
          <param name="value">The content of the HTTP response message.</param>
          <param name="formatter">The media type formatter.</param>
          <summary>Creates an <see cref="T:System.Net.Http.HttpResponseMessage" /> wired up to the associated <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt; (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, System.Net.Http.Headers.MediaTypeHeaderValue mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt;(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, class System.Net.Http.Headers.MediaTypeHeaderValue mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateResponse(Of T) (request As HttpRequestMessage, statusCode As HttpStatusCode, value As T, formatter As MediaTypeFormatter, mediaType As MediaTypeHeaderValue) As HttpResponseMessage" />
        <MemberSignature Language="F#" Value="static member CreateResponse : System.Net.Http.HttpRequestMessage * System.Net.HttpStatusCode * 'T * System.Net.Http.Formatting.MediaTypeFormatter * System.Net.Http.Headers.MediaTypeHeaderValue -&gt; System.Net.Http.HttpResponseMessage" Usage="System.Net.Http.HttpRequestMessageExtensions.CreateResponse (request, statusCode, value, formatter, mediaType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="mediaType" Type="System.Net.Http.Headers.MediaTypeHeaderValue" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the HTTP response message.</typeparam>
          <param name="request">The HTTP request message which led to this response message.</param>
          <param name="statusCode">The HTTP response status code.</param>
          <param name="value">The content of the HTTP response message.</param>
          <param name="formatter">The media type formatter.</param>
          <param name="mediaType">The media type header value.</param>
          <summary>Creates an <see cref="T:System.Net.Http.HttpResponseMessage" /> wired up to the associated <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt; (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, T value, System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt;(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, !!T value, class System.Net.Http.Formatting.MediaTypeFormatter formatter, string mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateResponse(Of T) (request As HttpRequestMessage, statusCode As HttpStatusCode, value As T, formatter As MediaTypeFormatter, mediaType As String) As HttpResponseMessage" />
        <MemberSignature Language="F#" Value="static member CreateResponse : System.Net.Http.HttpRequestMessage * System.Net.HttpStatusCode * 'T * System.Net.Http.Formatting.MediaTypeFormatter * string -&gt; System.Net.Http.HttpResponseMessage" Usage="System.Net.Http.HttpRequestMessageExtensions.CreateResponse (request, statusCode, value, formatter, mediaType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="formatter" Type="System.Net.Http.Formatting.MediaTypeFormatter" />
          <Parameter Name="mediaType" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the HTTP response message.</typeparam>
          <param name="request">The HTTP request message which led to this response message.</param>
          <param name="statusCode">The HTTP response status code.</param>
          <param name="value">The content of the HTTP response message.</param>
          <param name="formatter">The media type formatter.</param>
          <param name="mediaType">The media type.</param>
          <summary>Creates an <see cref="T:System.Net.Http.HttpResponseMessage" /> wired up to the associated <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt; (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, T value, System.Net.Http.Headers.MediaTypeHeaderValue mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt;(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, !!T value, class System.Net.Http.Headers.MediaTypeHeaderValue mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Headers.MediaTypeHeaderValue)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateResponse(Of T) (request As HttpRequestMessage, statusCode As HttpStatusCode, value As T, mediaType As MediaTypeHeaderValue) As HttpResponseMessage" />
        <MemberSignature Language="F#" Value="static member CreateResponse : System.Net.Http.HttpRequestMessage * System.Net.HttpStatusCode * 'T * System.Net.Http.Headers.MediaTypeHeaderValue -&gt; System.Net.Http.HttpResponseMessage" Usage="System.Net.Http.HttpRequestMessageExtensions.CreateResponse (request, statusCode, value, mediaType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="mediaType" Type="System.Net.Http.Headers.MediaTypeHeaderValue" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the HTTP response message.</typeparam>
          <param name="request">The HTTP request message which led to this response message.</param>
          <param name="statusCode">The HTTP response status code.</param>
          <param name="value">The content of the HTTP response message.</param>
          <param name="mediaType">The media type header value.</param>
          <summary>Creates an <see cref="T:System.Net.Http.HttpResponseMessage" /> wired up to the associated <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Headers.MediaTypeHeaderValue)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt; (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, T value, string mediaType);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt;(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, !!T value, string mediaType) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateResponse(Of T) (request As HttpRequestMessage, statusCode As HttpStatusCode, value As T, mediaType As String) As HttpResponseMessage" />
        <MemberSignature Language="F#" Value="static member CreateResponse : System.Net.Http.HttpRequestMessage * System.Net.HttpStatusCode * 'T * string -&gt; System.Net.Http.HttpResponseMessage" Usage="System.Net.Http.HttpRequestMessageExtensions.CreateResponse (request, statusCode, value, mediaType)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="mediaType" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the HTTP response message.</typeparam>
          <param name="request">The HTTP request message which led to this response message.</param>
          <param name="statusCode">The HTTP response status code.</param>
          <param name="value">The content of the HTTP response message.</param>
          <param name="mediaType">The media type.</param>
          <summary>Creates an <see cref="T:System.Net.Http.HttpResponseMessage" /> wired up to the associated <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CreateResponse&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt; (this System.Net.Http.HttpRequestMessage request, System.Net.HttpStatusCode statusCode, T value, System.Web.Http.HttpConfiguration configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpResponseMessage CreateResponse&lt;T&gt;(class System.Net.Http.HttpRequestMessage request, valuetype System.Net.HttpStatusCode statusCode, !!T value, class System.Web.Http.HttpConfiguration configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Web.Http.HttpConfiguration)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateResponse(Of T) (request As HttpRequestMessage, statusCode As HttpStatusCode, value As T, configuration As HttpConfiguration) As HttpResponseMessage" />
        <MemberSignature Language="F#" Value="static member CreateResponse : System.Net.Http.HttpRequestMessage * System.Net.HttpStatusCode * 'T * System.Web.Http.HttpConfiguration -&gt; System.Net.Http.HttpResponseMessage" Usage="System.Net.Http.HttpRequestMessageExtensions.CreateResponse (request, statusCode, value, configuration)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.HttpResponseMessage</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="statusCode" Type="System.Net.HttpStatusCode" />
          <Parameter Name="value" Type="T" />
          <Parameter Name="configuration" Type="System.Web.Http.HttpConfiguration" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the HTTP response message.</typeparam>
          <param name="request">The HTTP request message which led to this response message.</param>
          <param name="statusCode">The HTTP response status code.</param>
          <param name="value">The content of the HTTP response message.</param>
          <param name="configuration">The HTTP configuration which contains the dependency resolver used to resolve services.</param>
          <summary>Creates an <see cref="T:System.Net.Http.HttpResponseMessage" /> wired up to the associated <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Web.Http.HttpConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="DisposeRequestResources">
        <MemberSignature Language="C#" Value="public static void DisposeRequestResources (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DisposeRequestResources(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.DisposeRequestResources(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub DisposeRequestResources (request As HttpRequestMessage)" />
        <MemberSignature Language="F#" Value="static member DisposeRequestResources : System.Net.Http.HttpRequestMessage -&gt; unit" Usage="System.Net.Http.HttpRequestMessageExtensions.DisposeRequestResources request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request.</param>
          <summary>Disposes of all tracked resources associated with the <paramref name="request" /> which were added via the <see cref="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)" /> method.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.DisposeRequestResources(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="GetActionDescriptor">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Controllers.HttpActionDescriptor GetActionDescriptor (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Controllers.HttpActionDescriptor GetActionDescriptor(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.GetActionDescriptor(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetActionDescriptor (request As HttpRequestMessage) As HttpActionDescriptor" />
        <MemberSignature Language="F#" Value="static member GetActionDescriptor : System.Net.Http.HttpRequestMessage -&gt; System.Web.Http.Controllers.HttpActionDescriptor" Usage="System.Net.Http.HttpRequestMessageExtensions.GetActionDescriptor request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Controllers.HttpActionDescriptor</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.GetActionDescriptor(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="GetClientCertificate">
        <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509Certificate2 GetClientCertificate (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Cryptography.X509Certificates.X509Certificate2 GetClientCertificate(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.GetClientCertificate(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetClientCertificate (request As HttpRequestMessage) As X509Certificate2" />
        <MemberSignature Language="F#" Value="static member GetClientCertificate : System.Net.Http.HttpRequestMessage -&gt; System.Security.Cryptography.X509Certificates.X509Certificate2" Usage="System.Net.Http.HttpRequestMessageExtensions.GetClientCertificate request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request.</param>
          <summary>Gets the current X.509 certificate from the given HTTP request.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.GetClientCertificate(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="GetConfiguration">
        <MemberSignature Language="C#" Value="public static System.Web.Http.HttpConfiguration GetConfiguration (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.HttpConfiguration GetConfiguration(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.GetConfiguration(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConfiguration (request As HttpRequestMessage) As HttpConfiguration" />
        <MemberSignature Language="F#" Value="static member GetConfiguration : System.Net.Http.HttpRequestMessage -&gt; System.Web.Http.HttpConfiguration" Usage="System.Net.Http.HttpRequestMessageExtensions.GetConfiguration request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.HttpConfiguration</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request.</param>
          <summary>Retrieves the <see cref="T:System.Web.Http.HttpConfiguration" /> for the given request.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.GetConfiguration(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="GetCorrelationId">
        <MemberSignature Language="C#" Value="public static Guid GetCorrelationId (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid GetCorrelationId(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.GetCorrelationId(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetCorrelationId (request As HttpRequestMessage) As Guid" />
        <MemberSignature Language="F#" Value="static member GetCorrelationId : System.Net.Http.HttpRequestMessage -&gt; Guid" Usage="System.Net.Http.HttpRequestMessageExtensions.GetCorrelationId request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Guid</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request.</param>
          <summary>Retrieves the <see cref="T:System.Guid" /> which has been assigned as the correlation ID associated with the given <paramref name="request" />. The value will be created and set the first time this method is called.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.GetCorrelationId(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="GetDependencyScope">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Dependencies.IDependencyScope GetDependencyScope (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Dependencies.IDependencyScope GetDependencyScope(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.GetDependencyScope(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDependencyScope (request As HttpRequestMessage) As IDependencyScope" />
        <MemberSignature Language="F#" Value="static member GetDependencyScope : System.Net.Http.HttpRequestMessage -&gt; System.Web.Http.Dependencies.IDependencyScope" Usage="System.Net.Http.HttpRequestMessageExtensions.GetDependencyScope request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Dependencies.IDependencyScope</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request.</param>
          <summary>Retrieves the <see cref="T:System.Web.Http.Dependencies.IDependencyScope" /> for the given request or null if not available.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.GetDependencyScope(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="GetQueryNameValuePairs">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,string&gt;&gt; GetQueryNameValuePairs (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, string&gt;&gt; GetQueryNameValuePairs(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.GetQueryNameValuePairs(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetQueryNameValuePairs (request As HttpRequestMessage) As IEnumerable(Of KeyValuePair(Of String, String))" />
        <MemberSignature Language="F#" Value="static member GetQueryNameValuePairs : System.Net.Http.HttpRequestMessage -&gt; seq&lt;System.Collections.Generic.KeyValuePair&lt;string, string&gt;&gt;" Usage="System.Net.Http.HttpRequestMessageExtensions.GetQueryNameValuePairs request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.String&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request.</param>
          <summary>Gets the parsed query string as a collection of key-value pairs.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.GetQueryNameValuePairs(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="GetRequestContext">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Controllers.HttpRequestContext GetRequestContext (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Controllers.HttpRequestContext GetRequestContext(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.GetRequestContext(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRequestContext (request As HttpRequestMessage) As HttpRequestContext" />
        <MemberSignature Language="F#" Value="static member GetRequestContext : System.Net.Http.HttpRequestMessage -&gt; System.Web.Http.Controllers.HttpRequestContext" Usage="System.Net.Http.HttpRequestMessageExtensions.GetRequestContext request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Controllers.HttpRequestContext</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.GetRequestContext(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="GetResourcesForDisposal">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;IDisposable&gt; GetResourcesForDisposal (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.IDisposable&gt; GetResourcesForDisposal(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.GetResourcesForDisposal(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetResourcesForDisposal (request As HttpRequestMessage) As IEnumerable(Of IDisposable)" />
        <MemberSignature Language="F#" Value="static member GetResourcesForDisposal : System.Net.Http.HttpRequestMessage -&gt; seq&lt;IDisposable&gt;" Usage="System.Net.Http.HttpRequestMessageExtensions.GetResourcesForDisposal request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.IDisposable&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.GetResourcesForDisposal(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="GetRouteData">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Routing.IHttpRouteData GetRouteData (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Routing.IHttpRouteData GetRouteData(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.GetRouteData(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetRouteData (request As HttpRequestMessage) As IHttpRouteData" />
        <MemberSignature Language="F#" Value="static member GetRouteData : System.Net.Http.HttpRequestMessage -&gt; System.Web.Http.Routing.IHttpRouteData" Usage="System.Net.Http.HttpRequestMessageExtensions.GetRouteData request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Routing.IHttpRouteData</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request.</param>
          <summary>Retrieves the <see cref="T:System.Web.Http.Routing.IHttpRouteData" /> for the given request or null if not available.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.GetRouteData(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="GetSecurityMessageProperty">
        <MemberSignature Language="C#" Value="public static System.ServiceModel.Security.SecurityMessageProperty GetSecurityMessageProperty (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ServiceModel.Security.SecurityMessageProperty GetSecurityMessageProperty(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.GetSecurityMessageProperty(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSecurityMessageProperty (request As HttpRequestMessage) As SecurityMessageProperty" />
        <MemberSignature Language="F#" Value="static member GetSecurityMessageProperty : System.Net.Http.HttpRequestMessage -&gt; System.ServiceModel.Security.SecurityMessageProperty" Usage="System.Net.Http.HttpRequestMessageExtensions.GetSecurityMessageProperty request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ServiceModel.Security.SecurityMessageProperty</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">The request.</param>
          <summary>Gets the current <see cref="T:System.ServiceModel.Security.SecurityMessageProperty" /> stored in the request message properties for the given request.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.GetSecurityMessageProperty(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="GetSynchronizationContext">
        <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext GetSynchronizationContext (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.SynchronizationContext GetSynchronizationContext(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.GetSynchronizationContext(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSynchronizationContext (request As HttpRequestMessage) As SynchronizationContext" />
        <MemberSignature Language="F#" Value="static member GetSynchronizationContext : System.Net.Http.HttpRequestMessage -&gt; System.Threading.SynchronizationContext" Usage="System.Net.Http.HttpRequestMessageExtensions.GetSynchronizationContext request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.SynchronizationContext</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request.</param>
          <summary>Retrieves the <see cref="T:System.Threading.SynchronizationContext" /> for the given request or null if not available.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.GetSynchronizationContext(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="GetUrlHelper">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Routing.UrlHelper GetUrlHelper (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Routing.UrlHelper GetUrlHelper(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.GetUrlHelper(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetUrlHelper (request As HttpRequestMessage) As UrlHelper" />
        <MemberSignature Language="F#" Value="static member GetUrlHelper : System.Net.Http.HttpRequestMessage -&gt; System.Web.Http.Routing.UrlHelper" Usage="System.Net.Http.HttpRequestMessageExtensions.GetUrlHelper request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Routing.UrlHelper</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request.</param>
          <summary>Gets a <see cref="T:System.Web.Http.Routing.UrlHelper" /> instance for an HTTP request.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.GetUrlHelper(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="IsBatchRequest">
        <MemberSignature Language="C#" Value="public static bool IsBatchRequest (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsBatchRequest(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.IsBatchRequest(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsBatchRequest (request As HttpRequestMessage) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsBatchRequest : System.Net.Http.HttpRequestMessage -&gt; bool" Usage="System.Net.Http.HttpRequestMessageExtensions.IsBatchRequest request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.IsBatchRequest(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="IsLocal">
        <MemberSignature Language="C#" Value="public static bool IsLocal (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLocal(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.IsLocal(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsLocal (request As HttpRequestMessage) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsLocal : System.Net.Http.HttpRequestMessage -&gt; bool" Usage="System.Net.Http.HttpRequestMessageExtensions.IsLocal request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.IsLocal(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="RegisterForDispose">
        <MemberSignature Language="C#" Value="public static void RegisterForDispose (this System.Net.Http.HttpRequestMessage request, System.Collections.Generic.IEnumerable&lt;IDisposable&gt; resources);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterForDispose(class System.Net.Http.HttpRequestMessage request, class System.Collections.Generic.IEnumerable`1&lt;class System.IDisposable&gt; resources) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.IDisposable})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub RegisterForDispose (request As HttpRequestMessage, resources As IEnumerable(Of IDisposable))" />
        <MemberSignature Language="F#" Value="static member RegisterForDispose : System.Net.Http.HttpRequestMessage * seq&lt;IDisposable&gt; -&gt; unit" Usage="System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose (request, resources)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="resources" Type="System.Collections.Generic.IEnumerable&lt;System.IDisposable&gt;" />
        </Parameters>
        <Docs>
          <param name="request">To be added.</param>
          <param name="resources">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.IDisposable})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="RegisterForDispose">
        <MemberSignature Language="C#" Value="public static void RegisterForDispose (this System.Net.Http.HttpRequestMessage request, IDisposable resource);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterForDispose(class System.Net.Http.HttpRequestMessage request, class System.IDisposable resource) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub RegisterForDispose (request As HttpRequestMessage, resource As IDisposable)" />
        <MemberSignature Language="F#" Value="static member RegisterForDispose : System.Net.Http.HttpRequestMessage * IDisposable -&gt; unit" Usage="System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose (request, resource)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="resource" Type="System.IDisposable" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request controlling the lifecycle of <paramref name="resource" />.</param>
          <param name="resource">The resource to dispose when <paramref name="request" /> is being disposed.</param>
          <summary>Adds the given <paramref name="resource" /> to a list of resources that will be disposed by a host once the <paramref name="request" /> is disposed.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="SetConfiguration">
        <MemberSignature Language="C#" Value="public static void SetConfiguration (this System.Net.Http.HttpRequestMessage request, System.Web.Http.HttpConfiguration configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetConfiguration(class System.Net.Http.HttpRequestMessage request, class System.Web.Http.HttpConfiguration configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.SetConfiguration(System.Net.Http.HttpRequestMessage,System.Web.Http.HttpConfiguration)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetConfiguration (request As HttpRequestMessage, configuration As HttpConfiguration)" />
        <MemberSignature Language="F#" Value="static member SetConfiguration : System.Net.Http.HttpRequestMessage * System.Web.Http.HttpConfiguration -&gt; unit" Usage="System.Net.Http.HttpRequestMessageExtensions.SetConfiguration (request, configuration)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="configuration" Type="System.Web.Http.HttpConfiguration" />
        </Parameters>
        <Docs>
          <param name="request">To be added.</param>
          <param name="configuration">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.SetConfiguration(System.Net.Http.HttpRequestMessage,System.Web.Http.HttpConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="SetRequestContext">
        <MemberSignature Language="C#" Value="public static void SetRequestContext (this System.Net.Http.HttpRequestMessage request, System.Web.Http.Controllers.HttpRequestContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetRequestContext(class System.Net.Http.HttpRequestMessage request, class System.Web.Http.Controllers.HttpRequestContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.SetRequestContext(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpRequestContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetRequestContext (request As HttpRequestMessage, context As HttpRequestContext)" />
        <MemberSignature Language="F#" Value="static member SetRequestContext : System.Net.Http.HttpRequestMessage * System.Web.Http.Controllers.HttpRequestContext -&gt; unit" Usage="System.Net.Http.HttpRequestMessageExtensions.SetRequestContext (request, context)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="context" Type="System.Web.Http.Controllers.HttpRequestContext" />
        </Parameters>
        <Docs>
          <param name="request">To be added.</param>
          <param name="context">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.SetRequestContext(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpRequestContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="SetRouteData">
        <MemberSignature Language="C#" Value="public static void SetRouteData (this System.Net.Http.HttpRequestMessage request, System.Web.Http.Routing.IHttpRouteData routeData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetRouteData(class System.Net.Http.HttpRequestMessage request, class System.Web.Http.Routing.IHttpRouteData routeData) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.SetRouteData(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRouteData)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetRouteData (request As HttpRequestMessage, routeData As IHttpRouteData)" />
        <MemberSignature Language="F#" Value="static member SetRouteData : System.Net.Http.HttpRequestMessage * System.Web.Http.Routing.IHttpRouteData -&gt; unit" Usage="System.Net.Http.HttpRequestMessageExtensions.SetRouteData (request, routeData)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="routeData" Type="System.Web.Http.Routing.IHttpRouteData" />
        </Parameters>
        <Docs>
          <param name="request">To be added.</param>
          <param name="routeData">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.SetRouteData(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRouteData)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="ShouldIncludeErrorDetail">
        <MemberSignature Language="C#" Value="public static bool ShouldIncludeErrorDetail (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ShouldIncludeErrorDetail(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpRequestMessageExtensions.ShouldIncludeErrorDetail(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ShouldIncludeErrorDetail (request As HttpRequestMessage) As Boolean" />
        <MemberSignature Language="F#" Value="static member ShouldIncludeErrorDetail : System.Net.Http.HttpRequestMessage -&gt; bool" Usage="System.Net.Http.HttpRequestMessageExtensions.ShouldIncludeErrorDetail request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpRequestMessageExtensions" Member="M:System.Net.Http.HttpRequestMessageExtensions.ShouldIncludeErrorDetail(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Headers.HttpResponseHeaders" />
      </Targets>
      <Member MemberName="AddCookies">
        <MemberSignature Language="C#" Value="public static void AddCookies (this System.Net.Http.Headers.HttpResponseHeaders headers, System.Collections.Generic.IEnumerable&lt;System.Net.Http.Headers.CookieHeaderValue&gt; cookies);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddCookies(class System.Net.Http.Headers.HttpResponseHeaders headers, class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Headers.CookieHeaderValue&gt; cookies) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpResponseHeadersExtensions.AddCookies(System.Net.Http.Headers.HttpResponseHeaders,System.Collections.Generic.IEnumerable{System.Net.Http.Headers.CookieHeaderValue})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddCookies (headers As HttpResponseHeaders, cookies As IEnumerable(Of CookieHeaderValue))" />
        <MemberSignature Language="F#" Value="static member AddCookies : System.Net.Http.Headers.HttpResponseHeaders * seq&lt;System.Net.Http.Headers.CookieHeaderValue&gt; -&gt; unit" Usage="System.Net.Http.HttpResponseHeadersExtensions.AddCookies (headers, cookies)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="headers" Type="System.Net.Http.Headers.HttpResponseHeaders" RefType="this" />
          <Parameter Name="cookies" Type="System.Collections.Generic.IEnumerable&lt;System.Net.Http.Headers.CookieHeaderValue&gt;" />
        </Parameters>
        <Docs>
          <param name="headers">The response headers</param>
          <param name="cookies">The cookie values to add to the response.</param>
          <summary> Adds cookies to a response. Each Set-Cookie header is  represented as one <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> instance. A <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> contains information about the domain, path, and other cookie information as well as one or more <see cref="T:System.Net.Http.Headers.CookieState" /> instances. Each <see cref="T:System.Net.Http.Headers.CookieState" /> instance contains a cookie name and whatever cookie state is associate with that name. The state is in the form of a  <see cref="T:System.Collections.Specialized.NameValueCollection" /> which on the wire is encoded as HTML Form URL-encoded data.  This representation allows for multiple related "cookies" to be carried within the same Cookie header while still providing separation between each cookie state. A sample Cookie header is shown below. In this example, there are two <see cref="T:System.Net.Http.Headers.CookieState" /> with names state1 and state2 respectively. Further, each cookie state contains two name/value pairs (name1/value1 and name2/value2) and (name3/value3 and name4/value4). &lt;code&gt; Set-Cookie: state1:name1=value1&amp;amp;name2=value2; state2:name3=value3&amp;amp;name4=value4; domain=domain1; path=path1; &lt;/code&gt;</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpResponseHeadersExtensions" Member="M:System.Net.Http.HttpResponseHeadersExtensions.AddCookies(System.Net.Http.Headers.HttpResponseHeaders,System.Collections.Generic.IEnumerable{System.Net.Http.Headers.CookieHeaderValue})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpResponseMessage" />
      </Targets>
      <Member MemberName="TryGetContentValue&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool TryGetContentValue&lt;T&gt; (this System.Net.Http.HttpResponseMessage response, out T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetContentValue&lt;T&gt;(class System.Net.Http.HttpResponseMessage response, [out] !!T&amp; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.HttpResponseMessageExtensions.TryGetContentValue``1(System.Net.Http.HttpResponseMessage,``0@)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryGetContentValue(Of T) (response As HttpResponseMessage, ByRef value As T) As Boolean" />
        <MemberSignature Language="F#" Value="static member TryGetContentValue : System.Net.Http.HttpResponseMessage *  -&gt; bool" Usage="System.Net.Http.HttpResponseMessageExtensions.TryGetContentValue (response, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="response" Type="System.Net.Http.HttpResponseMessage" RefType="this" />
          <Parameter Name="value" Type="T" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the value to retrieve.</typeparam>
          <param name="response">The response of the operation.</param>
          <param name="value">The value of the content.</param>
          <summary>Attempts to retrieve the value of the content for the <see cref="T:System.Net.Http.HttpResponseMessageExtensions" />.</summary>
        </Docs>
        <Link Type="System.Net.Http.HttpResponseMessageExtensions" Member="M:System.Net.Http.HttpResponseMessageExtensions.TryGetContentValue``1(System.Net.Http.HttpResponseMessage,``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="GetOwinContext">
        <MemberSignature Language="C#" Value="public static Microsoft.Owin.IOwinContext GetOwinContext (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Owin.IOwinContext GetOwinContext(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.OwinHttpRequestMessageExtensions.GetOwinContext(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOwinContext (request As HttpRequestMessage) As IOwinContext" />
        <MemberSignature Language="F#" Value="static member GetOwinContext : System.Net.Http.HttpRequestMessage -&gt; Microsoft.Owin.IOwinContext" Usage="System.Net.Http.OwinHttpRequestMessageExtensions.GetOwinContext request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Owin.IOwinContext</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request message.</param>
          <summary>Gets the OWIN context for the specified request.</summary>
        </Docs>
        <Link Type="System.Net.Http.OwinHttpRequestMessageExtensions" Member="M:System.Net.Http.OwinHttpRequestMessageExtensions.GetOwinContext(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="GetOwinEnvironment">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; GetOwinEnvironment (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; GetOwinEnvironment(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.OwinHttpRequestMessageExtensions.GetOwinEnvironment(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOwinEnvironment (request As HttpRequestMessage) As IDictionary(Of String, Object)" />
        <MemberSignature Language="F#" Value="static member GetOwinEnvironment : System.Net.Http.HttpRequestMessage -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Net.Http.OwinHttpRequestMessageExtensions.GetOwinEnvironment request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request message.</param>
          <summary>Gets the OWIN environment for the specified request.</summary>
        </Docs>
        <Link Type="System.Net.Http.OwinHttpRequestMessageExtensions" Member="M:System.Net.Http.OwinHttpRequestMessageExtensions.GetOwinEnvironment(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="SetOwinContext">
        <MemberSignature Language="C#" Value="public static void SetOwinContext (this System.Net.Http.HttpRequestMessage request, Microsoft.Owin.IOwinContext context);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetOwinContext(class System.Net.Http.HttpRequestMessage request, class Microsoft.Owin.IOwinContext context) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.OwinHttpRequestMessageExtensions.SetOwinContext(System.Net.Http.HttpRequestMessage,Microsoft.Owin.IOwinContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetOwinContext (request As HttpRequestMessage, context As IOwinContext)" />
        <MemberSignature Language="F#" Value="static member SetOwinContext : System.Net.Http.HttpRequestMessage * Microsoft.Owin.IOwinContext -&gt; unit" Usage="System.Net.Http.OwinHttpRequestMessageExtensions.SetOwinContext (request, context)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="context" Type="Microsoft.Owin.IOwinContext" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request message.</param>
          <param name="context">The OWIN context to set.</param>
          <summary>Sets the OWIN context for the specified request.</summary>
        </Docs>
        <Link Type="System.Net.Http.OwinHttpRequestMessageExtensions" Member="M:System.Net.Http.OwinHttpRequestMessageExtensions.SetOwinContext(System.Net.Http.HttpRequestMessage,Microsoft.Owin.IOwinContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="SetOwinEnvironment">
        <MemberSignature Language="C#" Value="public static void SetOwinEnvironment (this System.Net.Http.HttpRequestMessage request, System.Collections.Generic.IDictionary&lt;string,object&gt; environment);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetOwinEnvironment(class System.Net.Http.HttpRequestMessage request, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; environment) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.OwinHttpRequestMessageExtensions.SetOwinEnvironment(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.Object})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetOwinEnvironment (request As HttpRequestMessage, environment As IDictionary(Of String, Object))" />
        <MemberSignature Language="F#" Value="static member SetOwinEnvironment : System.Net.Http.HttpRequestMessage * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="System.Net.Http.OwinHttpRequestMessageExtensions.SetOwinEnvironment (request, environment)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="environment" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        </Parameters>
        <Docs>
          <param name="request">The HTTP request message.</param>
          <param name="environment">The OWIN environment to set.</param>
          <summary>Sets the OWIN environment for the specified request.</summary>
        </Docs>
        <Link Type="System.Net.Http.OwinHttpRequestMessageExtensions" Member="M:System.Net.Http.OwinHttpRequestMessageExtensions.SetOwinEnvironment(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Uri" />
      </Targets>
      <Member MemberName="ParseQueryString">
        <MemberSignature Language="C#" Value="public static System.Collections.Specialized.NameValueCollection ParseQueryString (this Uri address);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Specialized.NameValueCollection ParseQueryString(class System.Uri address) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.UriExtensions.ParseQueryString(System.Uri)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ParseQueryString (address As Uri) As NameValueCollection" />
        <MemberSignature Language="F#" Value="static member ParseQueryString : Uri -&gt; System.Collections.Specialized.NameValueCollection" Usage="System.Net.Http.UriExtensions.ParseQueryString address" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="address" Type="System.Uri" RefType="this" />
        </Parameters>
        <Docs>
          <param name="address">The URI to parse.</param>
          <summary>Parses the query portion of the specified URI.</summary>
        </Docs>
        <Link Type="System.Net.Http.UriExtensions" Member="M:System.Net.Http.UriExtensions.ParseQueryString(System.Uri)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Uri" />
      </Targets>
      <Member MemberName="TryReadQueryAs">
        <MemberSignature Language="C#" Value="public static bool TryReadQueryAs (this Uri address, Type type, out object value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadQueryAs(class System.Uri address, class System.Type type, [out] object&amp; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.UriExtensions.TryReadQueryAs(System.Uri,System.Type,System.Object@)" />
        <MemberSignature Language="F#" Value="static member TryReadQueryAs : Uri * Type *  -&gt; bool" Usage="System.Net.Http.UriExtensions.TryReadQueryAs (address, type, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="address" Type="System.Uri" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="value" Type="System.Object" RefType="out" />
        </Parameters>
        <Docs>
          <param name="address">The URI to read.</param>
          <param name="type">The type of object to read.</param>
          <param name="value">When this method returns, contains an object that is initialized from the query component of the URI. This parameter is treated as uninitialized.</param>
          <summary>Reads HTML form URL encoded data provided in the URI query string as an object of a specified type.</summary>
        </Docs>
        <Link Type="System.Net.Http.UriExtensions" Member="M:System.Net.Http.UriExtensions.TryReadQueryAs(System.Uri,System.Type,System.Object@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Uri" />
      </Targets>
      <Member MemberName="TryReadQueryAs&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool TryReadQueryAs&lt;T&gt; (this Uri address, out T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadQueryAs&lt;T&gt;(class System.Uri address, [out] !!T&amp; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.UriExtensions.TryReadQueryAs``1(System.Uri,``0@)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryReadQueryAs(Of T) (address As Uri, ByRef value As T) As Boolean" />
        <MemberSignature Language="F#" Value="static member TryReadQueryAs : Uri *  -&gt; bool" Usage="System.Net.Http.UriExtensions.TryReadQueryAs (address, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="address" Type="System.Uri" RefType="this" />
          <Parameter Name="value" Type="T" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of object to read.</typeparam>
          <param name="address">The URI to read.</param>
          <param name="value">When this method returns, contains an object that is initialized from the query component of the URI. This parameter is treated as uninitialized.</param>
          <summary>Reads HTML form URL encoded data provided in the URI query string as an object of a specified type.</summary>
        </Docs>
        <Link Type="System.Net.Http.UriExtensions" Member="M:System.Net.Http.UriExtensions.TryReadQueryAs``1(System.Uri,``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Uri" />
      </Targets>
      <Member MemberName="TryReadQueryAsJson">
        <MemberSignature Language="C#" Value="public static bool TryReadQueryAsJson (this Uri address, out Newtonsoft.Json.Linq.JObject value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReadQueryAsJson(class System.Uri address, [out] class Newtonsoft.Json.Linq.JObject&amp; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Net.Http.UriExtensions.TryReadQueryAsJson(System.Uri,Newtonsoft.Json.Linq.JObject@)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryReadQueryAsJson (address As Uri, ByRef value As JObject) As Boolean" />
        <MemberSignature Language="F#" Value="static member TryReadQueryAsJson : Uri *  -&gt; bool" Usage="System.Net.Http.UriExtensions.TryReadQueryAsJson (address, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="address" Type="System.Uri" RefType="this" />
          <Parameter Name="value" Type="Newtonsoft.Json.Linq.JObject" RefType="out" />
        </Parameters>
        <Docs>
          <param name="address">The <see cref="T:System.Uri" /> instance from which to read.</param>
          <param name="value">An object to be initialized with this instance or null if the conversion cannot be performed.</param>
          <summary>Reads HTML form URL encoded data provided in the <see cref="T:System.Uri" /> query component as a <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.</summary>
        </Docs>
        <Link Type="System.Net.Http.UriExtensions" Member="M:System.Net.Http.UriExtensions.TryReadQueryAsJson(System.Uri,Newtonsoft.Json.Linq.JObject@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="CopyBatchRequestProperties">
        <MemberSignature Language="C#" Value="public static void CopyBatchRequestProperties (this System.Net.Http.HttpRequestMessage subRequest, System.Net.Http.HttpRequestMessage batchRequest);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBatchRequestProperties(class System.Net.Http.HttpRequestMessage subRequest, class System.Net.Http.HttpRequestMessage batchRequest) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Batch.BatchHttpRequestMessageExtensions.CopyBatchRequestProperties(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyBatchRequestProperties (subRequest As HttpRequestMessage, batchRequest As HttpRequestMessage)" />
        <MemberSignature Language="F#" Value="static member CopyBatchRequestProperties : System.Net.Http.HttpRequestMessage * System.Net.Http.HttpRequestMessage -&gt; unit" Usage="System.Web.Http.Batch.BatchHttpRequestMessageExtensions.CopyBatchRequestProperties (subRequest, batchRequest)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="subRequest" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
          <Parameter Name="batchRequest" Type="System.Net.Http.HttpRequestMessage" />
        </Parameters>
        <Docs>
          <param name="subRequest">The sub-request.</param>
          <param name="batchRequest">The batch request that contains the properties to copy.</param>
          <summary> Copies the properties from another <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
        </Docs>
        <Link Type="System.Web.Http.Batch.BatchHttpRequestMessageExtensions" Member="M:System.Web.Http.Batch.BatchHttpRequestMessageExtensions.CopyBatchRequestProperties(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpActionContext" />
      </Targets>
      <Member MemberName="Bind">
        <MemberSignature Language="C#" Value="public static bool Bind (this System.Web.Http.Controllers.HttpActionContext actionContext, System.Web.Http.ModelBinding.ModelBindingContext bindingContext);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Bind(class System.Web.Http.Controllers.HttpActionContext actionContext, class System.Web.Http.ModelBinding.ModelBindingContext bindingContext) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.HttpActionContextExtensions.Bind(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Bind (actionContext As HttpActionContext, bindingContext As ModelBindingContext) As Boolean" />
        <MemberSignature Language="F#" Value="static member Bind : System.Web.Http.Controllers.HttpActionContext * System.Web.Http.ModelBinding.ModelBindingContext -&gt; bool" Usage="System.Web.Http.Controllers.HttpActionContextExtensions.Bind (actionContext, bindingContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="actionContext" Type="System.Web.Http.Controllers.HttpActionContext" RefType="this" />
          <Parameter Name="bindingContext" Type="System.Web.Http.ModelBinding.ModelBindingContext" />
        </Parameters>
        <Docs>
          <param name="actionContext">To be added.</param>
          <param name="bindingContext">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.HttpActionContextExtensions" Member="M:System.Web.Http.Controllers.HttpActionContextExtensions.Bind(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpActionContext" />
      </Targets>
      <Member MemberName="Bind">
        <MemberSignature Language="C#" Value="public static bool Bind (this System.Web.Http.Controllers.HttpActionContext actionContext, System.Web.Http.ModelBinding.ModelBindingContext bindingContext, System.Collections.Generic.IEnumerable&lt;System.Web.Http.ModelBinding.IModelBinder&gt; binders);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Bind(class System.Web.Http.Controllers.HttpActionContext actionContext, class System.Web.Http.ModelBinding.ModelBindingContext bindingContext, class System.Collections.Generic.IEnumerable`1&lt;class System.Web.Http.ModelBinding.IModelBinder&gt; binders) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.HttpActionContextExtensions.Bind(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.IModelBinder})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Bind (actionContext As HttpActionContext, bindingContext As ModelBindingContext, binders As IEnumerable(Of IModelBinder)) As Boolean" />
        <MemberSignature Language="F#" Value="static member Bind : System.Web.Http.Controllers.HttpActionContext * System.Web.Http.ModelBinding.ModelBindingContext * seq&lt;System.Web.Http.ModelBinding.IModelBinder&gt; -&gt; bool" Usage="System.Web.Http.Controllers.HttpActionContextExtensions.Bind (actionContext, bindingContext, binders)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="actionContext" Type="System.Web.Http.Controllers.HttpActionContext" RefType="this" />
          <Parameter Name="bindingContext" Type="System.Web.Http.ModelBinding.ModelBindingContext" />
          <Parameter Name="binders" Type="System.Collections.Generic.IEnumerable&lt;System.Web.Http.ModelBinding.IModelBinder&gt;" />
        </Parameters>
        <Docs>
          <param name="actionContext">To be added.</param>
          <param name="bindingContext">To be added.</param>
          <param name="binders">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.HttpActionContextExtensions" Member="M:System.Web.Http.Controllers.HttpActionContextExtensions.Bind(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.IModelBinder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpActionContext" />
      </Targets>
      <Member MemberName="GetMetadataProvider">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Metadata.ModelMetadataProvider GetMetadataProvider (this System.Web.Http.Controllers.HttpActionContext actionContext);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Metadata.ModelMetadataProvider GetMetadataProvider(class System.Web.Http.Controllers.HttpActionContext actionContext) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetMetadataProvider(System.Web.Http.Controllers.HttpActionContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetMetadataProvider (actionContext As HttpActionContext) As ModelMetadataProvider" />
        <MemberSignature Language="F#" Value="static member GetMetadataProvider : System.Web.Http.Controllers.HttpActionContext -&gt; System.Web.Http.Metadata.ModelMetadataProvider" Usage="System.Web.Http.Controllers.HttpActionContextExtensions.GetMetadataProvider actionContext" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Metadata.ModelMetadataProvider</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="actionContext" Type="System.Web.Http.Controllers.HttpActionContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="actionContext">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.HttpActionContextExtensions" Member="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetMetadataProvider(System.Web.Http.Controllers.HttpActionContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpActionContext" />
      </Targets>
      <Member MemberName="GetValidatorProviders">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Web.Http.Validation.ModelValidatorProvider&gt; GetValidatorProviders (this System.Web.Http.Controllers.HttpActionContext actionContext);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Web.Http.Validation.ModelValidatorProvider&gt; GetValidatorProviders(class System.Web.Http.Controllers.HttpActionContext actionContext) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidatorProviders(System.Web.Http.Controllers.HttpActionContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetValidatorProviders (actionContext As HttpActionContext) As IEnumerable(Of ModelValidatorProvider)" />
        <MemberSignature Language="F#" Value="static member GetValidatorProviders : System.Web.Http.Controllers.HttpActionContext -&gt; seq&lt;System.Web.Http.Validation.ModelValidatorProvider&gt;" Usage="System.Web.Http.Controllers.HttpActionContextExtensions.GetValidatorProviders actionContext" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Web.Http.Validation.ModelValidatorProvider&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="actionContext" Type="System.Web.Http.Controllers.HttpActionContext" RefType="this" />
        </Parameters>
        <Docs>
          <param name="actionContext">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.HttpActionContextExtensions" Member="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidatorProviders(System.Web.Http.Controllers.HttpActionContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpActionContext" />
      </Targets>
      <Member MemberName="GetValidators">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Web.Http.Validation.ModelValidator&gt; GetValidators (this System.Web.Http.Controllers.HttpActionContext actionContext, System.Web.Http.Metadata.ModelMetadata metadata);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Web.Http.Validation.ModelValidator&gt; GetValidators(class System.Web.Http.Controllers.HttpActionContext actionContext, class System.Web.Http.Metadata.ModelMetadata metadata) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidators(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Metadata.ModelMetadata)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetValidators (actionContext As HttpActionContext, metadata As ModelMetadata) As IEnumerable(Of ModelValidator)" />
        <MemberSignature Language="F#" Value="static member GetValidators : System.Web.Http.Controllers.HttpActionContext * System.Web.Http.Metadata.ModelMetadata -&gt; seq&lt;System.Web.Http.Validation.ModelValidator&gt;" Usage="System.Web.Http.Controllers.HttpActionContextExtensions.GetValidators (actionContext, metadata)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Web.Http.Validation.ModelValidator&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="actionContext" Type="System.Web.Http.Controllers.HttpActionContext" RefType="this" />
          <Parameter Name="metadata" Type="System.Web.Http.Metadata.ModelMetadata" />
        </Parameters>
        <Docs>
          <param name="actionContext">To be added.</param>
          <param name="metadata">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.HttpActionContextExtensions" Member="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidators(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Metadata.ModelMetadata)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpActionContext" />
      </Targets>
      <Member MemberName="TryBindStrongModel&lt;TModel&gt;">
        <MemberSignature Language="C#" Value="public static bool TryBindStrongModel&lt;TModel&gt; (this System.Web.Http.Controllers.HttpActionContext actionContext, System.Web.Http.ModelBinding.ModelBindingContext parentBindingContext, string propertyName, System.Web.Http.Metadata.ModelMetadataProvider metadataProvider, out TModel model);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryBindStrongModel&lt;TModel&gt;(class System.Web.Http.Controllers.HttpActionContext actionContext, class System.Web.Http.ModelBinding.ModelBindingContext parentBindingContext, string propertyName, class System.Web.Http.Metadata.ModelMetadataProvider metadataProvider, [out] !!TModel&amp; model) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.HttpActionContextExtensions.TryBindStrongModel``1(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.String,System.Web.Http.Metadata.ModelMetadataProvider,``0@)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryBindStrongModel(Of TModel) (actionContext As HttpActionContext, parentBindingContext As ModelBindingContext, propertyName As String, metadataProvider As ModelMetadataProvider, ByRef model As TModel) As Boolean" />
        <MemberSignature Language="F#" Value="static member TryBindStrongModel : System.Web.Http.Controllers.HttpActionContext * System.Web.Http.ModelBinding.ModelBindingContext * string * System.Web.Http.Metadata.ModelMetadataProvider *  -&gt; bool" Usage="System.Web.Http.Controllers.HttpActionContextExtensions.TryBindStrongModel (actionContext, parentBindingContext, propertyName, metadataProvider, model)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TModel" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="actionContext" Type="System.Web.Http.Controllers.HttpActionContext" RefType="this" />
          <Parameter Name="parentBindingContext" Type="System.Web.Http.ModelBinding.ModelBindingContext" />
          <Parameter Name="propertyName" Type="System.String" />
          <Parameter Name="metadataProvider" Type="System.Web.Http.Metadata.ModelMetadataProvider" />
          <Parameter Name="model" Type="TModel" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="TModel" />
          <param name="actionContext">To be added.</param>
          <param name="parentBindingContext">To be added.</param>
          <param name="propertyName">To be added.</param>
          <param name="metadataProvider">To be added.</param>
          <param name="model">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.HttpActionContextExtensions" Member="M:System.Web.Http.Controllers.HttpActionContextExtensions.TryBindStrongModel``1(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.String,System.Web.Http.Metadata.ModelMetadataProvider,``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpParameterDescriptor" />
      </Targets>
      <Member MemberName="BindAsError">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Controllers.HttpParameterBinding BindAsError (this System.Web.Http.Controllers.HttpParameterDescriptor parameter, string message);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Controllers.HttpParameterBinding BindAsError(class System.Web.Http.Controllers.HttpParameterDescriptor parameter, string message) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindAsError(System.Web.Http.Controllers.HttpParameterDescriptor,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BindAsError (parameter As HttpParameterDescriptor, message As String) As HttpParameterBinding" />
        <MemberSignature Language="F#" Value="static member BindAsError : System.Web.Http.Controllers.HttpParameterDescriptor * string -&gt; System.Web.Http.Controllers.HttpParameterBinding" Usage="System.Web.Http.Controllers.ParameterBindingExtensions.BindAsError (parameter, message)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Controllers.HttpParameterBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="parameter" Type="System.Web.Http.Controllers.HttpParameterDescriptor" RefType="this" />
          <Parameter Name="message" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="parameter">The parameter descriptor that describes the parameter to bind.</param>
          <param name="message">The error message that describes the reason for fail bind.</param>
          <summary>Binds parameter that results as an error. </summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.ParameterBindingExtensions" Member="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindAsError(System.Web.Http.Controllers.HttpParameterDescriptor,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpParameterDescriptor" />
      </Targets>
      <Member MemberName="BindWithAttribute">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Controllers.HttpParameterBinding BindWithAttribute (this System.Web.Http.Controllers.HttpParameterDescriptor parameter, System.Web.Http.ParameterBindingAttribute attribute);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Controllers.HttpParameterBinding BindWithAttribute(class System.Web.Http.Controllers.HttpParameterDescriptor parameter, class System.Web.Http.ParameterBindingAttribute attribute) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithAttribute(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ParameterBindingAttribute)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BindWithAttribute (parameter As HttpParameterDescriptor, attribute As ParameterBindingAttribute) As HttpParameterBinding" />
        <MemberSignature Language="F#" Value="static member BindWithAttribute : System.Web.Http.Controllers.HttpParameterDescriptor * System.Web.Http.ParameterBindingAttribute -&gt; System.Web.Http.Controllers.HttpParameterBinding" Usage="System.Web.Http.Controllers.ParameterBindingExtensions.BindWithAttribute (parameter, attribute)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Controllers.HttpParameterBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="parameter" Type="System.Web.Http.Controllers.HttpParameterDescriptor" RefType="this" />
          <Parameter Name="attribute" Type="System.Web.Http.ParameterBindingAttribute" />
        </Parameters>
        <Docs>
          <param name="parameter">The parameter to provide binding for.</param>
          <param name="attribute">The attribute that describes the binding.</param>
          <summary>Bind the parameter as if it had the given attribute on the declaration.</summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.ParameterBindingExtensions" Member="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithAttribute(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ParameterBindingAttribute)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpParameterDescriptor" />
      </Targets>
      <Member MemberName="BindWithFormatter">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Controllers.HttpParameterBinding BindWithFormatter (this System.Web.Http.Controllers.HttpParameterDescriptor parameter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Controllers.HttpParameterBinding BindWithFormatter(class System.Web.Http.Controllers.HttpParameterDescriptor parameter) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BindWithFormatter (parameter As HttpParameterDescriptor) As HttpParameterBinding" />
        <MemberSignature Language="F#" Value="static member BindWithFormatter : System.Web.Http.Controllers.HttpParameterDescriptor -&gt; System.Web.Http.Controllers.HttpParameterBinding" Usage="System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter parameter" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Controllers.HttpParameterBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="parameter" Type="System.Web.Http.Controllers.HttpParameterDescriptor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="parameter">The parameter descriptor that describes the parameter to bind.</param>
          <summary>Binds parameter by parsing the HTTP body content.</summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.ParameterBindingExtensions" Member="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpParameterDescriptor" />
      </Targets>
      <Member MemberName="BindWithFormatter">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Controllers.HttpParameterBinding BindWithFormatter (this System.Web.Http.Controllers.HttpParameterDescriptor parameter, System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Controllers.HttpParameterBinding BindWithFormatter(class System.Web.Http.Controllers.HttpParameterDescriptor parameter, class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BindWithFormatter (parameter As HttpParameterDescriptor, formatters As IEnumerable(Of MediaTypeFormatter)) As HttpParameterBinding" />
        <MemberSignature Language="F#" Value="static member BindWithFormatter : System.Web.Http.Controllers.HttpParameterDescriptor * seq&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; -&gt; System.Web.Http.Controllers.HttpParameterBinding" Usage="System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter (parameter, formatters)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Controllers.HttpParameterBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="parameter" Type="System.Web.Http.Controllers.HttpParameterDescriptor" RefType="this" />
          <Parameter Name="formatters" Type="System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt;" />
        </Parameters>
        <Docs>
          <param name="parameter">The parameter descriptor that describes the parameter to bind.</param>
          <param name="formatters">The list of formatters which provides selection of an appropriate formatter for serializing the parameter into object.</param>
          <summary>Binds parameter by parsing the HTTP body content.</summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.ParameterBindingExtensions" Member="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpParameterDescriptor" />
      </Targets>
      <Member MemberName="BindWithFormatter">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Controllers.HttpParameterBinding BindWithFormatter (this System.Web.Http.Controllers.HttpParameterDescriptor parameter, System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters, System.Web.Http.Validation.IBodyModelValidator bodyModelValidator);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Controllers.HttpParameterBinding BindWithFormatter(class System.Web.Http.Controllers.HttpParameterDescriptor parameter, class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Http.Formatting.MediaTypeFormatter&gt; formatters, class System.Web.Http.Validation.IBodyModelValidator bodyModelValidator) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Web.Http.Validation.IBodyModelValidator)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BindWithFormatter (parameter As HttpParameterDescriptor, formatters As IEnumerable(Of MediaTypeFormatter), bodyModelValidator As IBodyModelValidator) As HttpParameterBinding" />
        <MemberSignature Language="F#" Value="static member BindWithFormatter : System.Web.Http.Controllers.HttpParameterDescriptor * seq&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt; * System.Web.Http.Validation.IBodyModelValidator -&gt; System.Web.Http.Controllers.HttpParameterBinding" Usage="System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter (parameter, formatters, bodyModelValidator)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Controllers.HttpParameterBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="parameter" Type="System.Web.Http.Controllers.HttpParameterDescriptor" RefType="this" />
          <Parameter Name="formatters" Type="System.Collections.Generic.IEnumerable&lt;System.Net.Http.Formatting.MediaTypeFormatter&gt;" />
          <Parameter Name="bodyModelValidator" Type="System.Web.Http.Validation.IBodyModelValidator" />
        </Parameters>
        <Docs>
          <param name="parameter">The parameter descriptor that describes the parameter to bind.</param>
          <param name="formatters">The list of formatters which provides selection of an appropriate formatter for serializing the parameter into object.</param>
          <param name="bodyModelValidator">The body model validator used to validate the parameter.</param>
          <summary>Binds parameter by parsing the HTTP body content.</summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.ParameterBindingExtensions" Member="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Web.Http.Validation.IBodyModelValidator)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpParameterDescriptor" />
      </Targets>
      <Member MemberName="BindWithFormatter">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Controllers.HttpParameterBinding BindWithFormatter (this System.Web.Http.Controllers.HttpParameterDescriptor parameter, params System.Net.Http.Formatting.MediaTypeFormatter[] formatters);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Controllers.HttpParameterBinding BindWithFormatter(class System.Web.Http.Controllers.HttpParameterDescriptor parameter, class System.Net.Http.Formatting.MediaTypeFormatter[] formatters) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Net.Http.Formatting.MediaTypeFormatter[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BindWithFormatter (parameter As HttpParameterDescriptor, ParamArray formatters As MediaTypeFormatter()) As HttpParameterBinding" />
        <MemberSignature Language="F#" Value="static member BindWithFormatter : System.Web.Http.Controllers.HttpParameterDescriptor * System.Net.Http.Formatting.MediaTypeFormatter[] -&gt; System.Web.Http.Controllers.HttpParameterBinding" Usage="System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter (parameter, formatters)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Controllers.HttpParameterBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="parameter" Type="System.Web.Http.Controllers.HttpParameterDescriptor" RefType="this" />
          <Parameter Name="formatters" Type="System.Net.Http.Formatting.MediaTypeFormatter[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="parameter">The parameter descriptor that describes the parameter to bind.</param>
          <param name="formatters">The list of formatters which provides selection of an appropriate formatter for serializing the parameter into object.</param>
          <summary>Binds parameter by parsing the HTTP body content.</summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.ParameterBindingExtensions" Member="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Net.Http.Formatting.MediaTypeFormatter[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpParameterDescriptor" />
      </Targets>
      <Member MemberName="BindWithModelBinding">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Controllers.HttpParameterBinding BindWithModelBinding (this System.Web.Http.Controllers.HttpParameterDescriptor parameter);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Controllers.HttpParameterBinding BindWithModelBinding(class System.Web.Http.Controllers.HttpParameterDescriptor parameter) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BindWithModelBinding (parameter As HttpParameterDescriptor) As HttpParameterBinding" />
        <MemberSignature Language="F#" Value="static member BindWithModelBinding : System.Web.Http.Controllers.HttpParameterDescriptor -&gt; System.Web.Http.Controllers.HttpParameterBinding" Usage="System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding parameter" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Controllers.HttpParameterBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="parameter" Type="System.Web.Http.Controllers.HttpParameterDescriptor" RefType="this" />
        </Parameters>
        <Docs>
          <param name="parameter">The parameter descriptor that describes the parameter to bind.</param>
          <summary>Binds parameter by parsing the query string.</summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.ParameterBindingExtensions" Member="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpParameterDescriptor" />
      </Targets>
      <Member MemberName="BindWithModelBinding">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Controllers.HttpParameterBinding BindWithModelBinding (this System.Web.Http.Controllers.HttpParameterDescriptor parameter, System.Collections.Generic.IEnumerable&lt;System.Web.Http.ValueProviders.ValueProviderFactory&gt; valueProviderFactories);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Controllers.HttpParameterBinding BindWithModelBinding(class System.Web.Http.Controllers.HttpParameterDescriptor parameter, class System.Collections.Generic.IEnumerable`1&lt;class System.Web.Http.ValueProviders.ValueProviderFactory&gt; valueProviderFactories) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BindWithModelBinding (parameter As HttpParameterDescriptor, valueProviderFactories As IEnumerable(Of ValueProviderFactory)) As HttpParameterBinding" />
        <MemberSignature Language="F#" Value="static member BindWithModelBinding : System.Web.Http.Controllers.HttpParameterDescriptor * seq&lt;System.Web.Http.ValueProviders.ValueProviderFactory&gt; -&gt; System.Web.Http.Controllers.HttpParameterBinding" Usage="System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding (parameter, valueProviderFactories)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Controllers.HttpParameterBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="parameter" Type="System.Web.Http.Controllers.HttpParameterDescriptor" RefType="this" />
          <Parameter Name="valueProviderFactories" Type="System.Collections.Generic.IEnumerable&lt;System.Web.Http.ValueProviders.ValueProviderFactory&gt;" />
        </Parameters>
        <Docs>
          <param name="parameter">The parameter descriptor that describes the parameter to bind.</param>
          <param name="valueProviderFactories">The value provider factories which provide query string parameter data.</param>
          <summary>Binds parameter by parsing the query string.</summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.ParameterBindingExtensions" Member="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpParameterDescriptor" />
      </Targets>
      <Member MemberName="BindWithModelBinding">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Controllers.HttpParameterBinding BindWithModelBinding (this System.Web.Http.Controllers.HttpParameterDescriptor parameter, System.Web.Http.ModelBinding.IModelBinder binder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Controllers.HttpParameterBinding BindWithModelBinding(class System.Web.Http.Controllers.HttpParameterDescriptor parameter, class System.Web.Http.ModelBinding.IModelBinder binder) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BindWithModelBinding (parameter As HttpParameterDescriptor, binder As IModelBinder) As HttpParameterBinding" />
        <MemberSignature Language="F#" Value="static member BindWithModelBinding : System.Web.Http.Controllers.HttpParameterDescriptor * System.Web.Http.ModelBinding.IModelBinder -&gt; System.Web.Http.Controllers.HttpParameterBinding" Usage="System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding (parameter, binder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Controllers.HttpParameterBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="parameter" Type="System.Web.Http.Controllers.HttpParameterDescriptor" RefType="this" />
          <Parameter Name="binder" Type="System.Web.Http.ModelBinding.IModelBinder" />
        </Parameters>
        <Docs>
          <param name="parameter">The parameter descriptor that describes the parameter to bind.</param>
          <param name="binder">The model binder used to assemble the parameter into an object.</param>
          <summary>Binds parameter by parsing the query string.</summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.ParameterBindingExtensions" Member="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpParameterDescriptor" />
      </Targets>
      <Member MemberName="BindWithModelBinding">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Controllers.HttpParameterBinding BindWithModelBinding (this System.Web.Http.Controllers.HttpParameterDescriptor parameter, System.Web.Http.ModelBinding.IModelBinder binder, System.Collections.Generic.IEnumerable&lt;System.Web.Http.ValueProviders.ValueProviderFactory&gt; valueProviderFactories);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Controllers.HttpParameterBinding BindWithModelBinding(class System.Web.Http.Controllers.HttpParameterDescriptor parameter, class System.Web.Http.ModelBinding.IModelBinder binder, class System.Collections.Generic.IEnumerable`1&lt;class System.Web.Http.ValueProviders.ValueProviderFactory&gt; valueProviderFactories) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BindWithModelBinding (parameter As HttpParameterDescriptor, binder As IModelBinder, valueProviderFactories As IEnumerable(Of ValueProviderFactory)) As HttpParameterBinding" />
        <MemberSignature Language="F#" Value="static member BindWithModelBinding : System.Web.Http.Controllers.HttpParameterDescriptor * System.Web.Http.ModelBinding.IModelBinder * seq&lt;System.Web.Http.ValueProviders.ValueProviderFactory&gt; -&gt; System.Web.Http.Controllers.HttpParameterBinding" Usage="System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding (parameter, binder, valueProviderFactories)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Controllers.HttpParameterBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="parameter" Type="System.Web.Http.Controllers.HttpParameterDescriptor" RefType="this" />
          <Parameter Name="binder" Type="System.Web.Http.ModelBinding.IModelBinder" />
          <Parameter Name="valueProviderFactories" Type="System.Collections.Generic.IEnumerable&lt;System.Web.Http.ValueProviders.ValueProviderFactory&gt;" />
        </Parameters>
        <Docs>
          <param name="parameter">The parameter descriptor that describes the parameter to bind.</param>
          <param name="binder">The model binder used to assemble the parameter into an object.</param>
          <param name="valueProviderFactories">The value provider factories which provide query string parameter data.</param>
          <summary>Binds parameter by parsing the query string.</summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.ParameterBindingExtensions" Member="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.HttpParameterDescriptor" />
      </Targets>
      <Member MemberName="BindWithModelBinding">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Controllers.HttpParameterBinding BindWithModelBinding (this System.Web.Http.Controllers.HttpParameterDescriptor parameter, params System.Web.Http.ValueProviders.ValueProviderFactory[] valueProviderFactories);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Controllers.HttpParameterBinding BindWithModelBinding(class System.Web.Http.Controllers.HttpParameterDescriptor parameter, class System.Web.Http.ValueProviders.ValueProviderFactory[] valueProviderFactories) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ValueProviders.ValueProviderFactory[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BindWithModelBinding (parameter As HttpParameterDescriptor, ParamArray valueProviderFactories As ValueProviderFactory()) As HttpParameterBinding" />
        <MemberSignature Language="F#" Value="static member BindWithModelBinding : System.Web.Http.Controllers.HttpParameterDescriptor * System.Web.Http.ValueProviders.ValueProviderFactory[] -&gt; System.Web.Http.Controllers.HttpParameterBinding" Usage="System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding (parameter, valueProviderFactories)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Controllers.HttpParameterBinding</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="parameter" Type="System.Web.Http.Controllers.HttpParameterDescriptor" RefType="this" />
          <Parameter Name="valueProviderFactories" Type="System.Web.Http.ValueProviders.ValueProviderFactory[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="parameter">The parameter descriptor that describes the parameter to bind.</param>
          <param name="valueProviderFactories">The value provider factories which provide query string parameter data.</param>
          <summary>Binds parameter by parsing the query string.</summary>
        </Docs>
        <Link Type="System.Web.Http.Controllers.ParameterBindingExtensions" Member="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ValueProviders.ValueProviderFactory[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpRequestMessage" />
      </Targets>
      <Member MemberName="GetCorsRequestContext">
        <MemberSignature Language="C#" Value="public static System.Web.Cors.CorsRequestContext GetCorsRequestContext (this System.Net.Http.HttpRequestMessage request);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Cors.CorsRequestContext GetCorsRequestContext(class System.Net.Http.HttpRequestMessage request) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Cors.CorsHttpRequestMessageExtensions.GetCorsRequestContext(System.Net.Http.HttpRequestMessage)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetCorsRequestContext (request As HttpRequestMessage) As CorsRequestContext" />
        <MemberSignature Language="F#" Value="static member GetCorsRequestContext : System.Net.Http.HttpRequestMessage -&gt; System.Web.Cors.CorsRequestContext" Usage="System.Web.Http.Cors.CorsHttpRequestMessageExtensions.GetCorsRequestContext request" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Cors.CorsRequestContext</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" RefType="this" />
        </Parameters>
        <Docs>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" />.</param>
          <summary>Gets the <see cref="T:System.Web.Cors.CorsRequestContext" /> for a given request.</summary>
        </Docs>
        <Link Type="System.Web.Http.Cors.CorsHttpRequestMessageExtensions" Member="M:System.Web.Http.Cors.CorsHttpRequestMessageExtensions.GetCorsRequestContext(System.Net.Http.HttpRequestMessage)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.HttpResponseMessage" />
      </Targets>
      <Member MemberName="WriteCorsHeaders">
        <MemberSignature Language="C#" Value="public static void WriteCorsHeaders (this System.Net.Http.HttpResponseMessage response, System.Web.Cors.CorsResult corsResult);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteCorsHeaders(class System.Net.Http.HttpResponseMessage response, class System.Web.Cors.CorsResult corsResult) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Cors.CorsHttpResponseMessageExtensions.WriteCorsHeaders(System.Net.Http.HttpResponseMessage,System.Web.Cors.CorsResult)" />
        <MemberSignature Language="F#" Value="static member WriteCorsHeaders : System.Net.Http.HttpResponseMessage * System.Web.Cors.CorsResult -&gt; unit" Usage="System.Web.Http.Cors.CorsHttpResponseMessageExtensions.WriteCorsHeaders (response, corsResult)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="response" Type="System.Net.Http.HttpResponseMessage" RefType="this" />
          <Parameter Name="corsResult" Type="System.Web.Cors.CorsResult" />
        </Parameters>
        <Docs>
          <param name="response">The <see cref="T:System.Net.Http.HttpResponseMessage" />.</param>
          <param name="corsResult">The <see cref="T:System.Web.Cors.CorsResult" />.</param>
          <summary>Writes the CORS headers on the response.</summary>
        </Docs>
        <Link Type="System.Web.Http.Cors.CorsHttpResponseMessageExtensions" Member="M:System.Web.Http.Cors.CorsHttpResponseMessageExtensions.WriteCorsHeaders(System.Net.Http.HttpResponseMessage,System.Web.Cors.CorsResult)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpConfiguration" />
      </Targets>
      <Member MemberName="EnableCors">
        <MemberSignature Language="C#" Value="public static void EnableCors (this System.Web.Http.HttpConfiguration httpConfiguration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableCors(class System.Web.Http.HttpConfiguration httpConfiguration) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.CorsHttpConfigurationExtensions.EnableCors(System.Web.Http.HttpConfiguration)" />
        <MemberSignature Language="F#" Value="static member EnableCors : System.Web.Http.HttpConfiguration -&gt; unit" Usage="System.Web.Http.CorsHttpConfigurationExtensions.EnableCors httpConfiguration" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="httpConfiguration" Type="System.Web.Http.HttpConfiguration" RefType="this" />
        </Parameters>
        <Docs>
          <param name="httpConfiguration">The <see cref="T:System.Web.Http.HttpConfiguration" />.</param>
          <summary>Enables the support for CORS.</summary>
        </Docs>
        <Link Type="System.Web.Http.CorsHttpConfigurationExtensions" Member="M:System.Web.Http.CorsHttpConfigurationExtensions.EnableCors(System.Web.Http.HttpConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpConfiguration" />
      </Targets>
      <Member MemberName="EnableCors">
        <MemberSignature Language="C#" Value="public static void EnableCors (this System.Web.Http.HttpConfiguration httpConfiguration, System.Web.Http.Cors.ICorsPolicyProvider defaultPolicyProvider);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableCors(class System.Web.Http.HttpConfiguration httpConfiguration, class System.Web.Http.Cors.ICorsPolicyProvider defaultPolicyProvider) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.CorsHttpConfigurationExtensions.EnableCors(System.Web.Http.HttpConfiguration,System.Web.Http.Cors.ICorsPolicyProvider)" />
        <MemberSignature Language="F#" Value="static member EnableCors : System.Web.Http.HttpConfiguration * System.Web.Http.Cors.ICorsPolicyProvider -&gt; unit" Usage="System.Web.Http.CorsHttpConfigurationExtensions.EnableCors (httpConfiguration, defaultPolicyProvider)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="httpConfiguration" Type="System.Web.Http.HttpConfiguration" RefType="this" />
          <Parameter Name="defaultPolicyProvider" Type="System.Web.Http.Cors.ICorsPolicyProvider" />
        </Parameters>
        <Docs>
          <param name="httpConfiguration">The <see cref="T:System.Web.Http.HttpConfiguration" />.</param>
          <param name="defaultPolicyProvider">The default <see cref="T:System.Web.Http.Cors.ICorsPolicyProvider" />.</param>
          <summary>Enables the support for CORS.</summary>
        </Docs>
        <Link Type="System.Web.Http.CorsHttpConfigurationExtensions" Member="M:System.Web.Http.CorsHttpConfigurationExtensions.EnableCors(System.Web.Http.HttpConfiguration,System.Web.Http.Cors.ICorsPolicyProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpConfiguration" />
      </Targets>
      <Member MemberName="GetCorsEngine">
        <MemberSignature Language="C#" Value="public static System.Web.Cors.ICorsEngine GetCorsEngine (this System.Web.Http.HttpConfiguration httpConfiguration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Cors.ICorsEngine GetCorsEngine(class System.Web.Http.HttpConfiguration httpConfiguration) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.CorsHttpConfigurationExtensions.GetCorsEngine(System.Web.Http.HttpConfiguration)" />
        <MemberSignature Language="F#" Value="static member GetCorsEngine : System.Web.Http.HttpConfiguration -&gt; System.Web.Cors.ICorsEngine" Usage="System.Web.Http.CorsHttpConfigurationExtensions.GetCorsEngine httpConfiguration" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Cors.ICorsEngine</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="httpConfiguration" Type="System.Web.Http.HttpConfiguration" RefType="this" />
        </Parameters>
        <Docs>
          <param name="httpConfiguration">The <see cref="T:System.Web.Http.HttpConfiguration" />.</param>
          <summary>Gets the <see cref="T:System.Web.Cors.ICorsEngine" /> from the <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
        </Docs>
        <Link Type="System.Web.Http.CorsHttpConfigurationExtensions" Member="M:System.Web.Http.CorsHttpConfigurationExtensions.GetCorsEngine(System.Web.Http.HttpConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpConfiguration" />
      </Targets>
      <Member MemberName="GetCorsPolicyProviderFactory">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Cors.ICorsPolicyProviderFactory GetCorsPolicyProviderFactory (this System.Web.Http.HttpConfiguration httpConfiguration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Cors.ICorsPolicyProviderFactory GetCorsPolicyProviderFactory(class System.Web.Http.HttpConfiguration httpConfiguration) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.CorsHttpConfigurationExtensions.GetCorsPolicyProviderFactory(System.Web.Http.HttpConfiguration)" />
        <MemberSignature Language="F#" Value="static member GetCorsPolicyProviderFactory : System.Web.Http.HttpConfiguration -&gt; System.Web.Http.Cors.ICorsPolicyProviderFactory" Usage="System.Web.Http.CorsHttpConfigurationExtensions.GetCorsPolicyProviderFactory httpConfiguration" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Cors.ICorsPolicyProviderFactory</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="httpConfiguration" Type="System.Web.Http.HttpConfiguration" RefType="this" />
        </Parameters>
        <Docs>
          <param name="httpConfiguration">The <see cref="T:System.Web.Http.HttpConfiguration" />.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Cors.ICorsPolicyProviderFactory" /> from the <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
        </Docs>
        <Link Type="System.Web.Http.CorsHttpConfigurationExtensions" Member="M:System.Web.Http.CorsHttpConfigurationExtensions.GetCorsPolicyProviderFactory(System.Web.Http.HttpConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpConfiguration" />
      </Targets>
      <Member MemberName="SetCorsEngine">
        <MemberSignature Language="C#" Value="public static void SetCorsEngine (this System.Web.Http.HttpConfiguration httpConfiguration, System.Web.Cors.ICorsEngine corsEngine);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCorsEngine(class System.Web.Http.HttpConfiguration httpConfiguration, class System.Web.Cors.ICorsEngine corsEngine) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.CorsHttpConfigurationExtensions.SetCorsEngine(System.Web.Http.HttpConfiguration,System.Web.Cors.ICorsEngine)" />
        <MemberSignature Language="F#" Value="static member SetCorsEngine : System.Web.Http.HttpConfiguration * System.Web.Cors.ICorsEngine -&gt; unit" Usage="System.Web.Http.CorsHttpConfigurationExtensions.SetCorsEngine (httpConfiguration, corsEngine)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="httpConfiguration" Type="System.Web.Http.HttpConfiguration" RefType="this" />
          <Parameter Name="corsEngine" Type="System.Web.Cors.ICorsEngine" />
        </Parameters>
        <Docs>
          <param name="httpConfiguration">The <see cref="T:System.Web.Http.HttpConfiguration" />.</param>
          <param name="corsEngine">The <see cref="T:System.Web.Cors.ICorsEngine" />.</param>
          <summary>Sets the <see cref="T:System.Web.Cors.ICorsEngine" /> on the <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
        </Docs>
        <Link Type="System.Web.Http.CorsHttpConfigurationExtensions" Member="M:System.Web.Http.CorsHttpConfigurationExtensions.SetCorsEngine(System.Web.Http.HttpConfiguration,System.Web.Cors.ICorsEngine)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpConfiguration" />
      </Targets>
      <Member MemberName="SetCorsPolicyProviderFactory">
        <MemberSignature Language="C#" Value="public static void SetCorsPolicyProviderFactory (this System.Web.Http.HttpConfiguration httpConfiguration, System.Web.Http.Cors.ICorsPolicyProviderFactory corsPolicyProviderFactory);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCorsPolicyProviderFactory(class System.Web.Http.HttpConfiguration httpConfiguration, class System.Web.Http.Cors.ICorsPolicyProviderFactory corsPolicyProviderFactory) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.CorsHttpConfigurationExtensions.SetCorsPolicyProviderFactory(System.Web.Http.HttpConfiguration,System.Web.Http.Cors.ICorsPolicyProviderFactory)" />
        <MemberSignature Language="F#" Value="static member SetCorsPolicyProviderFactory : System.Web.Http.HttpConfiguration * System.Web.Http.Cors.ICorsPolicyProviderFactory -&gt; unit" Usage="System.Web.Http.CorsHttpConfigurationExtensions.SetCorsPolicyProviderFactory (httpConfiguration, corsPolicyProviderFactory)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="httpConfiguration" Type="System.Web.Http.HttpConfiguration" RefType="this" />
          <Parameter Name="corsPolicyProviderFactory" Type="System.Web.Http.Cors.ICorsPolicyProviderFactory" />
        </Parameters>
        <Docs>
          <param name="httpConfiguration">The <see cref="T:System.Web.Http.HttpConfiguration" />.</param>
          <param name="corsPolicyProviderFactory">The <see cref="T:System.Web.Http.Cors.ICorsPolicyProviderFactory" />.</param>
          <summary>Sets the <see cref="T:System.Web.Http.Cors.ICorsPolicyProviderFactory" /> on the <see cref="T:System.Web.Http.HttpConfiguration" />.</summary>
        </Docs>
        <Link Type="System.Web.Http.CorsHttpConfigurationExtensions" Member="M:System.Web.Http.CorsHttpConfigurationExtensions.SetCorsPolicyProviderFactory(System.Web.Http.HttpConfiguration,System.Web.Http.Cors.ICorsPolicyProviderFactory)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.ExceptionHandling.IExceptionHandler" />
      </Targets>
      <Member MemberName="HandleAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt; HandleAsync (this System.Web.Http.ExceptionHandling.IExceptionHandler handler, System.Web.Http.ExceptionHandling.ExceptionContext context, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Net.Http.HttpResponseMessage&gt; HandleAsync(class System.Web.Http.ExceptionHandling.IExceptionHandler handler, class System.Web.Http.ExceptionHandling.ExceptionContext context, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions.HandleAsync(System.Web.Http.ExceptionHandling.IExceptionHandler,System.Web.Http.ExceptionHandling.ExceptionContext,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member HandleAsync : System.Web.Http.ExceptionHandling.IExceptionHandler * System.Web.Http.ExceptionHandling.ExceptionContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;" Usage="System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions.HandleAsync (handler, context, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Http.HttpResponseMessage&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="handler" Type="System.Web.Http.ExceptionHandling.IExceptionHandler" RefType="this" />
          <Parameter Name="context" Type="System.Web.Http.ExceptionHandling.ExceptionContext" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="handler">The unhandled exception handler.</param>
          <param name="context">The exception context.</param>
          <param name="cancellationToken">The token to monitor for cancellation requests.</param>
          <summary>Calls an exception handler and determines the response handling it, if any.</summary>
        </Docs>
        <Link Type="System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions" Member="M:System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions.HandleAsync(System.Web.Http.ExceptionHandling.IExceptionHandler,System.Web.Http.ExceptionHandling.ExceptionContext,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.ExceptionHandling.IExceptionLogger" />
      </Targets>
      <Member MemberName="LogAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task LogAsync (this System.Web.Http.ExceptionHandling.IExceptionLogger logger, System.Web.Http.ExceptionHandling.ExceptionContext context, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task LogAsync(class System.Web.Http.ExceptionHandling.IExceptionLogger logger, class System.Web.Http.ExceptionHandling.ExceptionContext context, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ExceptionHandling.ExceptionLoggerExtensions.LogAsync(System.Web.Http.ExceptionHandling.IExceptionLogger,System.Web.Http.ExceptionHandling.ExceptionContext,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member LogAsync : System.Web.Http.ExceptionHandling.IExceptionLogger * System.Web.Http.ExceptionHandling.ExceptionContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Web.Http.ExceptionHandling.ExceptionLoggerExtensions.LogAsync (logger, context, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="logger" Type="System.Web.Http.ExceptionHandling.IExceptionLogger" RefType="this" />
          <Parameter Name="context" Type="System.Web.Http.ExceptionHandling.ExceptionContext" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="logger">The unhandled exception logger.</param>
          <param name="context">The exception context.</param>
          <param name="cancellationToken">The token to monitor for cancellation requests.</param>
          <summary>Calls an exception logger.</summary>
        </Docs>
        <Link Type="System.Web.Http.ExceptionHandling.ExceptionLoggerExtensions" Member="M:System.Web.Http.ExceptionHandling.ExceptionLoggerExtensions.LogAsync(System.Web.Http.ExceptionHandling.IExceptionLogger,System.Web.Http.ExceptionHandling.ExceptionContext,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpConfiguration" />
      </Targets>
      <Member MemberName="BindParameter">
        <MemberSignature Language="C#" Value="public static void BindParameter (this System.Web.Http.HttpConfiguration configuration, Type type, System.Web.Http.ModelBinding.IModelBinder binder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BindParameter(class System.Web.Http.HttpConfiguration configuration, class System.Type type, class System.Web.Http.ModelBinding.IModelBinder binder) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.HttpConfigurationExtensions.BindParameter(System.Web.Http.HttpConfiguration,System.Type,System.Web.Http.ModelBinding.IModelBinder)" />
        <MemberSignature Language="F#" Value="static member BindParameter : System.Web.Http.HttpConfiguration * Type * System.Web.Http.ModelBinding.IModelBinder -&gt; unit" Usage="System.Web.Http.HttpConfigurationExtensions.BindParameter (configuration, type, binder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="System.Web.Http.HttpConfiguration" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="binder" Type="System.Web.Http.ModelBinding.IModelBinder" />
        </Parameters>
        <Docs>
          <param name="configuration">To be added.</param>
          <param name="type">To be added.</param>
          <param name="binder">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Web.Http.HttpConfigurationExtensions" Member="M:System.Web.Http.HttpConfigurationExtensions.BindParameter(System.Web.Http.HttpConfiguration,System.Type,System.Web.Http.ModelBinding.IModelBinder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpConfiguration" />
      </Targets>
      <Member MemberName="MapHttpAttributeRoutes">
        <MemberSignature Language="C#" Value="public static void MapHttpAttributeRoutes (this System.Web.Http.HttpConfiguration configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MapHttpAttributeRoutes(class System.Web.Http.HttpConfiguration configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub MapHttpAttributeRoutes (configuration As HttpConfiguration)" />
        <MemberSignature Language="F#" Value="static member MapHttpAttributeRoutes : System.Web.Http.HttpConfiguration -&gt; unit" Usage="System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes configuration" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="System.Web.Http.HttpConfiguration" RefType="this" />
        </Parameters>
        <Docs>
          <param name="configuration">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Web.Http.HttpConfigurationExtensions" Member="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpConfiguration" />
      </Targets>
      <Member MemberName="MapHttpAttributeRoutes">
        <MemberSignature Language="C#" Value="public static void MapHttpAttributeRoutes (this System.Web.Http.HttpConfiguration configuration, System.Web.Http.Routing.IDirectRouteProvider directRouteProvider);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MapHttpAttributeRoutes(class System.Web.Http.HttpConfiguration configuration, class System.Web.Http.Routing.IDirectRouteProvider directRouteProvider) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IDirectRouteProvider)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub MapHttpAttributeRoutes (configuration As HttpConfiguration, directRouteProvider As IDirectRouteProvider)" />
        <MemberSignature Language="F#" Value="static member MapHttpAttributeRoutes : System.Web.Http.HttpConfiguration * System.Web.Http.Routing.IDirectRouteProvider -&gt; unit" Usage="System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes (configuration, directRouteProvider)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="System.Web.Http.HttpConfiguration" RefType="this" />
          <Parameter Name="directRouteProvider" Type="System.Web.Http.Routing.IDirectRouteProvider" />
        </Parameters>
        <Docs>
          <param name="configuration">The server configuration.</param>
          <param name="directRouteProvider">The <see cref="T:System.Web.Http.Routing.IDirectRouteProvider" /> to use for discovering and building routes.</param>
          <summary>Maps the attribute-defined routes for the application.</summary>
        </Docs>
        <Link Type="System.Web.Http.HttpConfigurationExtensions" Member="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IDirectRouteProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpConfiguration" />
      </Targets>
      <Member MemberName="MapHttpAttributeRoutes">
        <MemberSignature Language="C#" Value="public static void MapHttpAttributeRoutes (this System.Web.Http.HttpConfiguration configuration, System.Web.Http.Routing.IInlineConstraintResolver constraintResolver);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MapHttpAttributeRoutes(class System.Web.Http.HttpConfiguration configuration, class System.Web.Http.Routing.IInlineConstraintResolver constraintResolver) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IInlineConstraintResolver)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub MapHttpAttributeRoutes (configuration As HttpConfiguration, constraintResolver As IInlineConstraintResolver)" />
        <MemberSignature Language="F#" Value="static member MapHttpAttributeRoutes : System.Web.Http.HttpConfiguration * System.Web.Http.Routing.IInlineConstraintResolver -&gt; unit" Usage="System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes (configuration, constraintResolver)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="System.Web.Http.HttpConfiguration" RefType="this" />
          <Parameter Name="constraintResolver" Type="System.Web.Http.Routing.IInlineConstraintResolver" />
        </Parameters>
        <Docs>
          <param name="configuration">The server configuration.</param>
          <param name="constraintResolver">The constraint resolver.</param>
          <summary>Maps the attribute-defined routes for the application.</summary>
        </Docs>
        <Link Type="System.Web.Http.HttpConfigurationExtensions" Member="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IInlineConstraintResolver)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpConfiguration" />
      </Targets>
      <Member MemberName="MapHttpAttributeRoutes">
        <MemberSignature Language="C#" Value="public static void MapHttpAttributeRoutes (this System.Web.Http.HttpConfiguration configuration, System.Web.Http.Routing.IInlineConstraintResolver constraintResolver, System.Web.Http.Routing.IDirectRouteProvider directRouteProvider);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MapHttpAttributeRoutes(class System.Web.Http.HttpConfiguration configuration, class System.Web.Http.Routing.IInlineConstraintResolver constraintResolver, class System.Web.Http.Routing.IDirectRouteProvider directRouteProvider) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IInlineConstraintResolver,System.Web.Http.Routing.IDirectRouteProvider)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub MapHttpAttributeRoutes (configuration As HttpConfiguration, constraintResolver As IInlineConstraintResolver, directRouteProvider As IDirectRouteProvider)" />
        <MemberSignature Language="F#" Value="static member MapHttpAttributeRoutes : System.Web.Http.HttpConfiguration * System.Web.Http.Routing.IInlineConstraintResolver * System.Web.Http.Routing.IDirectRouteProvider -&gt; unit" Usage="System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes (configuration, constraintResolver, directRouteProvider)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="System.Web.Http.HttpConfiguration" RefType="this" />
          <Parameter Name="constraintResolver" Type="System.Web.Http.Routing.IInlineConstraintResolver" />
          <Parameter Name="directRouteProvider" Type="System.Web.Http.Routing.IDirectRouteProvider" />
        </Parameters>
        <Docs>
          <param name="configuration">The server configuration.</param>
          <param name="constraintResolver">The <see cref="T:System.Web.Http.Routing.IInlineConstraintResolver" /> to use for resolving inline constraints.</param>
          <param name="directRouteProvider">The <see cref="T:System.Web.Http.Routing.IDirectRouteProvider" /> to use for discovering and building routes.</param>
          <summary>Maps the attribute-defined routes for the application.</summary>
        </Docs>
        <Link Type="System.Web.Http.HttpConfigurationExtensions" Member="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IInlineConstraintResolver,System.Web.Http.Routing.IDirectRouteProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpConfiguration" />
      </Targets>
      <Member MemberName="SuppressHostPrincipal">
        <MemberSignature Language="C#" Value="public static void SuppressHostPrincipal (this System.Web.Http.HttpConfiguration configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SuppressHostPrincipal(class System.Web.Http.HttpConfiguration configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.HttpConfigurationExtensions.SuppressHostPrincipal(System.Web.Http.HttpConfiguration)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SuppressHostPrincipal (configuration As HttpConfiguration)" />
        <MemberSignature Language="F#" Value="static member SuppressHostPrincipal : System.Web.Http.HttpConfiguration -&gt; unit" Usage="System.Web.Http.HttpConfigurationExtensions.SuppressHostPrincipal configuration" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="System.Web.Http.HttpConfiguration" RefType="this" />
        </Parameters>
        <Docs>
          <param name="configuration">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Web.Http.HttpConfigurationExtensions" Member="M:System.Web.Http.HttpConfigurationExtensions.SuppressHostPrincipal(System.Web.Http.HttpConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpConfiguration" />
      </Targets>
      <Member MemberName="EnableSystemDiagnosticsTracing">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Tracing.SystemDiagnosticsTraceWriter EnableSystemDiagnosticsTracing (this System.Web.Http.HttpConfiguration configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Tracing.SystemDiagnosticsTraceWriter EnableSystemDiagnosticsTracing(class System.Web.Http.HttpConfiguration configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.HttpConfigurationTracingExtensions.EnableSystemDiagnosticsTracing(System.Web.Http.HttpConfiguration)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function EnableSystemDiagnosticsTracing (configuration As HttpConfiguration) As SystemDiagnosticsTraceWriter" />
        <MemberSignature Language="F#" Value="static member EnableSystemDiagnosticsTracing : System.Web.Http.HttpConfiguration -&gt; System.Web.Http.Tracing.SystemDiagnosticsTraceWriter" Usage="System.Web.Http.HttpConfigurationTracingExtensions.EnableSystemDiagnosticsTracing configuration" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Tracing.SystemDiagnosticsTraceWriter</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="System.Web.Http.HttpConfiguration" RefType="this" />
        </Parameters>
        <Docs>
          <param name="configuration">The <see cref="T:System.Web.Http.HttpConfiguration" /> for which to register the created trace writer.</param>
          <summary>Creates and registers an <see cref="T:System.Web.Http.Tracing.ITraceWriter" /> implementation to use for this application.</summary>
        </Docs>
        <Link Type="System.Web.Http.HttpConfigurationTracingExtensions" Member="M:System.Web.Http.HttpConfigurationTracingExtensions.EnableSystemDiagnosticsTracing(System.Web.Http.HttpConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpRouteCollection" />
      </Targets>
      <Member MemberName="IgnoreRoute">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Routing.IHttpRoute IgnoreRoute (this System.Web.Http.HttpRouteCollection routes, string routeName, string routeTemplate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Routing.IHttpRoute IgnoreRoute(class System.Web.Http.HttpRouteCollection routes, string routeName, string routeTemplate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.HttpRouteCollectionExtensions.IgnoreRoute(System.Web.Http.HttpRouteCollection,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IgnoreRoute (routes As HttpRouteCollection, routeName As String, routeTemplate As String) As IHttpRoute" />
        <MemberSignature Language="F#" Value="static member IgnoreRoute : System.Web.Http.HttpRouteCollection * string * string -&gt; System.Web.Http.Routing.IHttpRoute" Usage="System.Web.Http.HttpRouteCollectionExtensions.IgnoreRoute (routes, routeName, routeTemplate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Routing.IHttpRoute</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routes" Type="System.Web.Http.HttpRouteCollection" RefType="this" />
          <Parameter Name="routeName" Type="System.String" />
          <Parameter Name="routeTemplate" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="routes">A collection of routes for the application.</param>
          <param name="routeName">The name of the route to ignore.</param>
          <param name="routeTemplate">The route template for the route.</param>
          <summary>Ignores the specified route.</summary>
        </Docs>
        <Link Type="System.Web.Http.HttpRouteCollectionExtensions" Member="M:System.Web.Http.HttpRouteCollectionExtensions.IgnoreRoute(System.Web.Http.HttpRouteCollection,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpRouteCollection" />
      </Targets>
      <Member MemberName="IgnoreRoute">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Routing.IHttpRoute IgnoreRoute (this System.Web.Http.HttpRouteCollection routes, string routeName, string routeTemplate, object constraints);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Routing.IHttpRoute IgnoreRoute(class System.Web.Http.HttpRouteCollection routes, string routeName, string routeTemplate, object constraints) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.HttpRouteCollectionExtensions.IgnoreRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IgnoreRoute (routes As HttpRouteCollection, routeName As String, routeTemplate As String, constraints As Object) As IHttpRoute" />
        <MemberSignature Language="F#" Value="static member IgnoreRoute : System.Web.Http.HttpRouteCollection * string * string * obj -&gt; System.Web.Http.Routing.IHttpRoute" Usage="System.Web.Http.HttpRouteCollectionExtensions.IgnoreRoute (routes, routeName, routeTemplate, constraints)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Routing.IHttpRoute</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routes" Type="System.Web.Http.HttpRouteCollection" RefType="this" />
          <Parameter Name="routeName" Type="System.String" />
          <Parameter Name="routeTemplate" Type="System.String" />
          <Parameter Name="constraints" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="routes">A collection of routes for the application.</param>
          <param name="routeName">The name of the route to ignore.</param>
          <param name="routeTemplate">The route template for the route.</param>
          <param name="constraints">A set of expressions that specify values for the route template.</param>
          <summary>Ignores the specified route.</summary>
        </Docs>
        <Link Type="System.Web.Http.HttpRouteCollectionExtensions" Member="M:System.Web.Http.HttpRouteCollectionExtensions.IgnoreRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpRouteCollection" />
      </Targets>
      <Member MemberName="MapHttpBatchRoute">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Routing.IHttpRoute MapHttpBatchRoute (this System.Web.Http.HttpRouteCollection routes, string routeName, string routeTemplate, System.Web.Http.Batch.HttpBatchHandler batchHandler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Routing.IHttpRoute MapHttpBatchRoute(class System.Web.Http.HttpRouteCollection routes, string routeName, string routeTemplate, class System.Web.Http.Batch.HttpBatchHandler batchHandler) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpBatchRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Web.Http.Batch.HttpBatchHandler)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MapHttpBatchRoute (routes As HttpRouteCollection, routeName As String, routeTemplate As String, batchHandler As HttpBatchHandler) As IHttpRoute" />
        <MemberSignature Language="F#" Value="static member MapHttpBatchRoute : System.Web.Http.HttpRouteCollection * string * string * System.Web.Http.Batch.HttpBatchHandler -&gt; System.Web.Http.Routing.IHttpRoute" Usage="System.Web.Http.HttpRouteCollectionExtensions.MapHttpBatchRoute (routes, routeName, routeTemplate, batchHandler)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Routing.IHttpRoute</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routes" Type="System.Web.Http.HttpRouteCollection" RefType="this" />
          <Parameter Name="routeName" Type="System.String" />
          <Parameter Name="routeTemplate" Type="System.String" />
          <Parameter Name="batchHandler" Type="System.Web.Http.Batch.HttpBatchHandler" />
        </Parameters>
        <Docs>
          <param name="routes">A collection of routes for the application.</param>
          <param name="routeName">The name of the route to map.</param>
          <param name="routeTemplate">The route template for the route.</param>
          <param name="batchHandler">The <see cref="T:System.Web.Http.Batch.HttpBatchHandler" /> for handling batch requests.</param>
          <summary> Maps the specified route for handling HTTP batch requests. </summary>
        </Docs>
        <Link Type="System.Web.Http.HttpRouteCollectionExtensions" Member="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpBatchRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Web.Http.Batch.HttpBatchHandler)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpRouteCollection" />
      </Targets>
      <Member MemberName="MapHttpRoute">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Routing.IHttpRoute MapHttpRoute (this System.Web.Http.HttpRouteCollection routes, string name, string routeTemplate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Routing.IHttpRoute MapHttpRoute(class System.Web.Http.HttpRouteCollection routes, string name, string routeTemplate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MapHttpRoute (routes As HttpRouteCollection, name As String, routeTemplate As String) As IHttpRoute" />
        <MemberSignature Language="F#" Value="static member MapHttpRoute : System.Web.Http.HttpRouteCollection * string * string -&gt; System.Web.Http.Routing.IHttpRoute" Usage="System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute (routes, name, routeTemplate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Routing.IHttpRoute</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routes" Type="System.Web.Http.HttpRouteCollection" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="routeTemplate" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="routes">A collection of routes for the application.</param>
          <param name="name">The name of the route to map.</param>
          <param name="routeTemplate">The route template for the route.</param>
          <summary>Maps the specified route template.</summary>
        </Docs>
        <Link Type="System.Web.Http.HttpRouteCollectionExtensions" Member="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpRouteCollection" />
      </Targets>
      <Member MemberName="MapHttpRoute">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Routing.IHttpRoute MapHttpRoute (this System.Web.Http.HttpRouteCollection routes, string name, string routeTemplate, object defaults);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Routing.IHttpRoute MapHttpRoute(class System.Web.Http.HttpRouteCollection routes, string name, string routeTemplate, object defaults) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MapHttpRoute (routes As HttpRouteCollection, name As String, routeTemplate As String, defaults As Object) As IHttpRoute" />
        <MemberSignature Language="F#" Value="static member MapHttpRoute : System.Web.Http.HttpRouteCollection * string * string * obj -&gt; System.Web.Http.Routing.IHttpRoute" Usage="System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute (routes, name, routeTemplate, defaults)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Routing.IHttpRoute</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routes" Type="System.Web.Http.HttpRouteCollection" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="routeTemplate" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="routes">A collection of routes for the application.</param>
          <param name="name">The name of the route to map.</param>
          <param name="routeTemplate">The route template for the route.</param>
          <param name="defaults">An object that contains default route values.</param>
          <summary>Maps the specified route template and sets default route values.</summary>
        </Docs>
        <Link Type="System.Web.Http.HttpRouteCollectionExtensions" Member="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpRouteCollection" />
      </Targets>
      <Member MemberName="MapHttpRoute">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Routing.IHttpRoute MapHttpRoute (this System.Web.Http.HttpRouteCollection routes, string name, string routeTemplate, object defaults, object constraints);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Routing.IHttpRoute MapHttpRoute(class System.Web.Http.HttpRouteCollection routes, string name, string routeTemplate, object defaults, object constraints) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MapHttpRoute (routes As HttpRouteCollection, name As String, routeTemplate As String, defaults As Object, constraints As Object) As IHttpRoute" />
        <MemberSignature Language="F#" Value="static member MapHttpRoute : System.Web.Http.HttpRouteCollection * string * string * obj * obj -&gt; System.Web.Http.Routing.IHttpRoute" Usage="System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute (routes, name, routeTemplate, defaults, constraints)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Routing.IHttpRoute</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routes" Type="System.Web.Http.HttpRouteCollection" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="routeTemplate" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
          <Parameter Name="constraints" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="routes">A collection of routes for the application.</param>
          <param name="name">The name of the route to map.</param>
          <param name="routeTemplate">The route template for the route.</param>
          <param name="defaults">An object that contains default route values.</param>
          <param name="constraints">A set of expressions that specify values for <paramref name="routeTemplate" />.</param>
          <summary>Maps the specified route template and sets default route values and constraints.</summary>
        </Docs>
        <Link Type="System.Web.Http.HttpRouteCollectionExtensions" Member="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpRouteCollection" />
      </Targets>
      <Member MemberName="MapHttpRoute">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Routing.IHttpRoute MapHttpRoute (this System.Web.Http.HttpRouteCollection routes, string name, string routeTemplate, object defaults, object constraints, System.Net.Http.HttpMessageHandler handler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Routing.IHttpRoute MapHttpRoute(class System.Web.Http.HttpRouteCollection routes, string name, string routeTemplate, object defaults, object constraints, class System.Net.Http.HttpMessageHandler handler) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object,System.Net.Http.HttpMessageHandler)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MapHttpRoute (routes As HttpRouteCollection, name As String, routeTemplate As String, defaults As Object, constraints As Object, handler As HttpMessageHandler) As IHttpRoute" />
        <MemberSignature Language="F#" Value="static member MapHttpRoute : System.Web.Http.HttpRouteCollection * string * string * obj * obj * System.Net.Http.HttpMessageHandler -&gt; System.Web.Http.Routing.IHttpRoute" Usage="System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute (routes, name, routeTemplate, defaults, constraints, handler)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Routing.IHttpRoute</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routes" Type="System.Web.Http.HttpRouteCollection" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="routeTemplate" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
          <Parameter Name="constraints" Type="System.Object" />
          <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
        </Parameters>
        <Docs>
          <param name="routes">A collection of routes for the application.</param>
          <param name="name">The name of the route to map.</param>
          <param name="routeTemplate">The route template for the route.</param>
          <param name="defaults">An object that contains default route values.</param>
          <param name="constraints">A set of expressions that specify values for <paramref name="routeTemplate" />.</param>
          <param name="handler">The handler to which the request will be dispatched.</param>
          <summary>Maps the specified route template and sets default route values, constraints, and end-point message handler.</summary>
        </Docs>
        <Link Type="System.Web.Http.HttpRouteCollectionExtensions" Member="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object,System.Net.Http.HttpMessageHandler)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Formatting.FormDataCollection" />
      </Targets>
      <Member MemberName="ReadAs">
        <MemberSignature Language="C#" Value="public static object ReadAs (this System.Net.Http.Formatting.FormDataCollection formData, Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ReadAs(class System.Net.Http.Formatting.FormDataCollection formData, class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type)" />
        <MemberSignature Language="F#" Value="static member ReadAs : System.Net.Http.Formatting.FormDataCollection * Type -&gt; obj" Usage="System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs (formData, type)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="formData" Type="System.Net.Http.Formatting.FormDataCollection" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
        </Parameters>
        <Docs>
          <param name="formData">The form data.</param>
          <param name="type">The type of the object.</param>
          <summary>Reads the collection extensions with specified type.</summary>
        </Docs>
        <Link Type="System.Web.Http.ModelBinding.FormDataCollectionExtensions" Member="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Formatting.FormDataCollection" />
      </Targets>
      <Member MemberName="ReadAs">
        <MemberSignature Language="C#" Value="public static object ReadAs (this System.Net.Http.Formatting.FormDataCollection formData, Type type, string modelName, System.Net.Http.Formatting.IRequiredMemberSelector requiredMemberSelector, System.Net.Http.Formatting.IFormatterLogger formatterLogger);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ReadAs(class System.Net.Http.Formatting.FormDataCollection formData, class System.Type type, string modelName, class System.Net.Http.Formatting.IRequiredMemberSelector requiredMemberSelector, class System.Net.Http.Formatting.IFormatterLogger formatterLogger) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger)" />
        <MemberSignature Language="F#" Value="static member ReadAs : System.Net.Http.Formatting.FormDataCollection * Type * string * System.Net.Http.Formatting.IRequiredMemberSelector * System.Net.Http.Formatting.IFormatterLogger -&gt; obj" Usage="System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs (formData, type, modelName, requiredMemberSelector, formatterLogger)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="formData" Type="System.Net.Http.Formatting.FormDataCollection" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="modelName" Type="System.String" />
          <Parameter Name="requiredMemberSelector" Type="System.Net.Http.Formatting.IRequiredMemberSelector" />
          <Parameter Name="formatterLogger" Type="System.Net.Http.Formatting.IFormatterLogger" />
        </Parameters>
        <Docs>
          <param name="formData">The form data.</param>
          <param name="type">The type of the object.</param>
          <param name="modelName">The name of the model.</param>
          <param name="requiredMemberSelector">The required member selector.</param>
          <param name="formatterLogger">The formatter logger.</param>
          <summary>Reads the collection extensions with specified type and model name.</summary>
        </Docs>
        <Link Type="System.Web.Http.ModelBinding.FormDataCollectionExtensions" Member="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Formatting.FormDataCollection" />
      </Targets>
      <Member MemberName="ReadAs">
        <MemberSignature Language="C#" Value="public static object ReadAs (this System.Net.Http.Formatting.FormDataCollection formData, Type type, string modelName, System.Net.Http.Formatting.IRequiredMemberSelector requiredMemberSelector, System.Net.Http.Formatting.IFormatterLogger formatterLogger, System.Web.Http.HttpConfiguration config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ReadAs(class System.Net.Http.Formatting.FormDataCollection formData, class System.Type type, string modelName, class System.Net.Http.Formatting.IRequiredMemberSelector requiredMemberSelector, class System.Net.Http.Formatting.IFormatterLogger formatterLogger, class System.Web.Http.HttpConfiguration config) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger,System.Web.Http.HttpConfiguration)" />
        <MemberSignature Language="F#" Value="static member ReadAs : System.Net.Http.Formatting.FormDataCollection * Type * string * System.Net.Http.Formatting.IRequiredMemberSelector * System.Net.Http.Formatting.IFormatterLogger * System.Web.Http.HttpConfiguration -&gt; obj" Usage="System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs (formData, type, modelName, requiredMemberSelector, formatterLogger, config)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="formData" Type="System.Net.Http.Formatting.FormDataCollection" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="modelName" Type="System.String" />
          <Parameter Name="requiredMemberSelector" Type="System.Net.Http.Formatting.IRequiredMemberSelector" />
          <Parameter Name="formatterLogger" Type="System.Net.Http.Formatting.IFormatterLogger" />
          <Parameter Name="config" Type="System.Web.Http.HttpConfiguration" />
        </Parameters>
        <Docs>
          <param name="formData">collection with parsed form url data</param>
          <param name="type">target type to read as</param>
          <param name="modelName">null or empty to read the entire form as a single object. This is common for body data. Or the name of a model to do a partial binding against the form data. This is common for extracting individual fields.</param>
          <param name="requiredMemberSelector">The <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" /> used to determine required members.</param>
          <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
          <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration" /> configuration to pick binder from. Can be null if the config was not created already. In that case a new config is created.</param>
          <summary>Deserialize the form data to the given type, using model binding.</summary>
        </Docs>
        <Link Type="System.Web.Http.ModelBinding.FormDataCollectionExtensions" Member="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger,System.Web.Http.HttpConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Formatting.FormDataCollection" />
      </Targets>
      <Member MemberName="ReadAs">
        <MemberSignature Language="C#" Value="public static object ReadAs (this System.Net.Http.Formatting.FormDataCollection formData, Type type, string modelName, System.Web.Http.Controllers.HttpActionContext actionContext);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ReadAs(class System.Net.Http.Formatting.FormDataCollection formData, class System.Type type, string modelName, class System.Web.Http.Controllers.HttpActionContext actionContext) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Web.Http.Controllers.HttpActionContext)" />
        <MemberSignature Language="F#" Value="static member ReadAs : System.Net.Http.Formatting.FormDataCollection * Type * string * System.Web.Http.Controllers.HttpActionContext -&gt; obj" Usage="System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs (formData, type, modelName, actionContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="formData" Type="System.Net.Http.Formatting.FormDataCollection" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="modelName" Type="System.String" />
          <Parameter Name="actionContext" Type="System.Web.Http.Controllers.HttpActionContext" />
        </Parameters>
        <Docs>
          <param name="formData">To be added.</param>
          <param name="type">To be added.</param>
          <param name="modelName">To be added.</param>
          <param name="actionContext">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Web.Http.ModelBinding.FormDataCollectionExtensions" Member="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Web.Http.Controllers.HttpActionContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Formatting.FormDataCollection" />
      </Targets>
      <Member MemberName="ReadAs">
        <MemberSignature Language="C#" Value="public static object ReadAs (this System.Net.Http.Formatting.FormDataCollection formData, Type type, System.Web.Http.Controllers.HttpActionContext actionContext);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ReadAs(class System.Net.Http.Formatting.FormDataCollection formData, class System.Type type, class System.Web.Http.Controllers.HttpActionContext actionContext) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.Web.Http.Controllers.HttpActionContext)" />
        <MemberSignature Language="F#" Value="static member ReadAs : System.Net.Http.Formatting.FormDataCollection * Type * System.Web.Http.Controllers.HttpActionContext -&gt; obj" Usage="System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs (formData, type, actionContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="formData" Type="System.Net.Http.Formatting.FormDataCollection" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="actionContext" Type="System.Web.Http.Controllers.HttpActionContext" />
        </Parameters>
        <Docs>
          <param name="formData">To be added.</param>
          <param name="type">To be added.</param>
          <param name="actionContext">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Web.Http.ModelBinding.FormDataCollectionExtensions" Member="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.Web.Http.Controllers.HttpActionContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Formatting.FormDataCollection" />
      </Targets>
      <Member MemberName="ReadAs&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T ReadAs&lt;T&gt; (this System.Net.Http.Formatting.FormDataCollection formData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadAs&lt;T&gt;(class System.Net.Http.Formatting.FormDataCollection formData) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAs(Of T) (formData As FormDataCollection) As T" />
        <MemberSignature Language="F#" Value="static member ReadAs : System.Net.Http.Formatting.FormDataCollection -&gt; 'T" Usage="System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs formData" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="formData" Type="System.Net.Http.Formatting.FormDataCollection" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The generic type.</typeparam>
          <param name="formData">The form data.</param>
          <summary>Reads the collection extensions with specified type.</summary>
        </Docs>
        <Link Type="System.Web.Http.ModelBinding.FormDataCollectionExtensions" Member="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Formatting.FormDataCollection" />
      </Targets>
      <Member MemberName="ReadAs&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T ReadAs&lt;T&gt; (this System.Net.Http.Formatting.FormDataCollection formData, string modelName, System.Net.Http.Formatting.IRequiredMemberSelector requiredMemberSelector, System.Net.Http.Formatting.IFormatterLogger formatterLogger);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadAs&lt;T&gt;(class System.Net.Http.Formatting.FormDataCollection formData, string modelName, class System.Net.Http.Formatting.IRequiredMemberSelector requiredMemberSelector, class System.Net.Http.Formatting.IFormatterLogger formatterLogger) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAs(Of T) (formData As FormDataCollection, modelName As String, requiredMemberSelector As IRequiredMemberSelector, formatterLogger As IFormatterLogger) As T" />
        <MemberSignature Language="F#" Value="static member ReadAs : System.Net.Http.Formatting.FormDataCollection * string * System.Net.Http.Formatting.IRequiredMemberSelector * System.Net.Http.Formatting.IFormatterLogger -&gt; 'T" Usage="System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs (formData, modelName, requiredMemberSelector, formatterLogger)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="formData" Type="System.Net.Http.Formatting.FormDataCollection" RefType="this" />
          <Parameter Name="modelName" Type="System.String" />
          <Parameter Name="requiredMemberSelector" Type="System.Net.Http.Formatting.IRequiredMemberSelector" />
          <Parameter Name="formatterLogger" Type="System.Net.Http.Formatting.IFormatterLogger" />
        </Parameters>
        <Docs>
          <typeparam name="T">The generic type.</typeparam>
          <param name="formData">The form data.</param>
          <param name="modelName">The name of the model.</param>
          <param name="requiredMemberSelector">The required member selector.</param>
          <param name="formatterLogger">The formatter logger.</param>
          <summary>Reads the collection extensions with specified type.</summary>
        </Docs>
        <Link Type="System.Web.Http.ModelBinding.FormDataCollectionExtensions" Member="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Formatting.FormDataCollection" />
      </Targets>
      <Member MemberName="ReadAs&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T ReadAs&lt;T&gt; (this System.Net.Http.Formatting.FormDataCollection formData, string modelName, System.Web.Http.Controllers.HttpActionContext actionContext);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadAs&lt;T&gt;(class System.Net.Http.Formatting.FormDataCollection formData, string modelName, class System.Web.Http.Controllers.HttpActionContext actionContext) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.String,System.Web.Http.Controllers.HttpActionContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAs(Of T) (formData As FormDataCollection, modelName As String, actionContext As HttpActionContext) As T" />
        <MemberSignature Language="F#" Value="static member ReadAs : System.Net.Http.Formatting.FormDataCollection * string * System.Web.Http.Controllers.HttpActionContext -&gt; 'T" Usage="System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs (formData, modelName, actionContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="formData" Type="System.Net.Http.Formatting.FormDataCollection" RefType="this" />
          <Parameter Name="modelName" Type="System.String" />
          <Parameter Name="actionContext" Type="System.Web.Http.Controllers.HttpActionContext" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="formData">To be added.</param>
          <param name="modelName">To be added.</param>
          <param name="actionContext">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Web.Http.ModelBinding.FormDataCollectionExtensions" Member="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.String,System.Web.Http.Controllers.HttpActionContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Net.Http.Formatting.FormDataCollection" />
      </Targets>
      <Member MemberName="ReadAs&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T ReadAs&lt;T&gt; (this System.Net.Http.Formatting.FormDataCollection formData, System.Web.Http.Controllers.HttpActionContext actionContext);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadAs&lt;T&gt;(class System.Net.Http.Formatting.FormDataCollection formData, class System.Web.Http.Controllers.HttpActionContext actionContext) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.Web.Http.Controllers.HttpActionContext)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadAs(Of T) (formData As FormDataCollection, actionContext As HttpActionContext) As T" />
        <MemberSignature Language="F#" Value="static member ReadAs : System.Net.Http.Formatting.FormDataCollection * System.Web.Http.Controllers.HttpActionContext -&gt; 'T" Usage="System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs (formData, actionContext)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="formData" Type="System.Net.Http.Formatting.FormDataCollection" RefType="this" />
          <Parameter Name="actionContext" Type="System.Web.Http.Controllers.HttpActionContext" />
        </Parameters>
        <Docs>
          <typeparam name="T" />
          <param name="formData">To be added.</param>
          <param name="actionContext">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="System.Web.Http.ModelBinding.FormDataCollectionExtensions" Member="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.Web.Http.Controllers.HttpActionContext)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpConfiguration" />
      </Targets>
      <Member MemberName="SuppressDefaultHostAuthentication">
        <MemberSignature Language="C#" Value="public static void SuppressDefaultHostAuthentication (this System.Web.Http.HttpConfiguration configuration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SuppressDefaultHostAuthentication(class System.Web.Http.HttpConfiguration configuration) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.OwinHttpConfigurationExtensions.SuppressDefaultHostAuthentication(System.Web.Http.HttpConfiguration)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SuppressDefaultHostAuthentication (configuration As HttpConfiguration)" />
        <MemberSignature Language="F#" Value="static member SuppressDefaultHostAuthentication : System.Web.Http.HttpConfiguration -&gt; unit" Usage="System.Web.Http.OwinHttpConfigurationExtensions.SuppressDefaultHostAuthentication configuration" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="configuration" Type="System.Web.Http.HttpConfiguration" RefType="this" />
        </Parameters>
        <Docs>
          <param name="configuration">The server configuration.</param>
          <summary>Enables suppression of the host's default authentication.</summary>
        </Docs>
        <Link Type="System.Web.Http.OwinHttpConfigurationExtensions" Member="M:System.Web.Http.OwinHttpConfigurationExtensions.SuppressDefaultHostAuthentication(System.Web.Http.HttpConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Routing.RouteCollection" />
      </Targets>
      <Member MemberName="MapHttpRoute">
        <MemberSignature Language="C#" Value="public static System.Web.Routing.Route MapHttpRoute (this System.Web.Routing.RouteCollection routes, string name, string routeTemplate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Routing.Route MapHttpRoute(class System.Web.Routing.RouteCollection routes, string name, string routeTemplate) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MapHttpRoute (routes As RouteCollection, name As String, routeTemplate As String) As Route" />
        <MemberSignature Language="F#" Value="static member MapHttpRoute : System.Web.Routing.RouteCollection * string * string -&gt; System.Web.Routing.Route" Usage="System.Web.Http.RouteCollectionExtensions.MapHttpRoute (routes, name, routeTemplate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Routing.Route</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routes" Type="System.Web.Routing.RouteCollection" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="routeTemplate" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="routes">A collection of routes for the application.</param>
          <param name="name">The name of the route to map.</param>
          <param name="routeTemplate">The route template for the route.</param>
          <summary>Maps the specified route template.</summary>
        </Docs>
        <Link Type="System.Web.Http.RouteCollectionExtensions" Member="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Routing.RouteCollection" />
      </Targets>
      <Member MemberName="MapHttpRoute">
        <MemberSignature Language="C#" Value="public static System.Web.Routing.Route MapHttpRoute (this System.Web.Routing.RouteCollection routes, string name, string routeTemplate, object defaults);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Routing.Route MapHttpRoute(class System.Web.Routing.RouteCollection routes, string name, string routeTemplate, object defaults) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MapHttpRoute (routes As RouteCollection, name As String, routeTemplate As String, defaults As Object) As Route" />
        <MemberSignature Language="F#" Value="static member MapHttpRoute : System.Web.Routing.RouteCollection * string * string * obj -&gt; System.Web.Routing.Route" Usage="System.Web.Http.RouteCollectionExtensions.MapHttpRoute (routes, name, routeTemplate, defaults)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Routing.Route</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routes" Type="System.Web.Routing.RouteCollection" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="routeTemplate" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="routes">A collection of routes for the application.</param>
          <param name="name">The name of the route to map.</param>
          <param name="routeTemplate">The route template for the route.</param>
          <param name="defaults">An object that contains default route values.</param>
          <summary>Maps the specified route template and sets default route.</summary>
        </Docs>
        <Link Type="System.Web.Http.RouteCollectionExtensions" Member="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Routing.RouteCollection" />
      </Targets>
      <Member MemberName="MapHttpRoute">
        <MemberSignature Language="C#" Value="public static System.Web.Routing.Route MapHttpRoute (this System.Web.Routing.RouteCollection routes, string name, string routeTemplate, object defaults, object constraints);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Routing.Route MapHttpRoute(class System.Web.Routing.RouteCollection routes, string name, string routeTemplate, object defaults, object constraints) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MapHttpRoute (routes As RouteCollection, name As String, routeTemplate As String, defaults As Object, constraints As Object) As Route" />
        <MemberSignature Language="F#" Value="static member MapHttpRoute : System.Web.Routing.RouteCollection * string * string * obj * obj -&gt; System.Web.Routing.Route" Usage="System.Web.Http.RouteCollectionExtensions.MapHttpRoute (routes, name, routeTemplate, defaults, constraints)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Routing.Route</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routes" Type="System.Web.Routing.RouteCollection" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="routeTemplate" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
          <Parameter Name="constraints" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="routes">A collection of routes for the application.</param>
          <param name="name">The name of the route to map.</param>
          <param name="routeTemplate">The route template for the route.</param>
          <param name="defaults">An object that contains default route values.</param>
          <param name="constraints">A set of expressions that specify values for routeTemplate.</param>
          <summary>Maps the specified route template and sets default route values and constraints.</summary>
        </Docs>
        <Link Type="System.Web.Http.RouteCollectionExtensions" Member="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Routing.RouteCollection" />
      </Targets>
      <Member MemberName="MapHttpRoute">
        <MemberSignature Language="C#" Value="public static System.Web.Routing.Route MapHttpRoute (this System.Web.Routing.RouteCollection routes, string name, string routeTemplate, object defaults, object constraints, System.Net.Http.HttpMessageHandler handler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Routing.Route MapHttpRoute(class System.Web.Routing.RouteCollection routes, string name, string routeTemplate, object defaults, object constraints, class System.Net.Http.HttpMessageHandler handler) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object,System.Net.Http.HttpMessageHandler)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MapHttpRoute (routes As RouteCollection, name As String, routeTemplate As String, defaults As Object, constraints As Object, handler As HttpMessageHandler) As Route" />
        <MemberSignature Language="F#" Value="static member MapHttpRoute : System.Web.Routing.RouteCollection * string * string * obj * obj * System.Net.Http.HttpMessageHandler -&gt; System.Web.Routing.Route" Usage="System.Web.Http.RouteCollectionExtensions.MapHttpRoute (routes, name, routeTemplate, defaults, constraints, handler)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Routing.Route</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routes" Type="System.Web.Routing.RouteCollection" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="routeTemplate" Type="System.String" />
          <Parameter Name="defaults" Type="System.Object" />
          <Parameter Name="constraints" Type="System.Object" />
          <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
        </Parameters>
        <Docs>
          <param name="routes">A collection of routes for the application.</param>
          <param name="name">The name of the route to map.</param>
          <param name="routeTemplate">The route template for the route.</param>
          <param name="defaults">An object that contains default route values.</param>
          <param name="constraints">A set of expressions that specify values for routeTemplate.</param>
          <param name="handler">The handler to which the request will be dispatched.</param>
          <summary>Maps the specified route template and sets default route values, constraints,  and end-point message handler.</summary>
        </Docs>
        <Link Type="System.Web.Http.RouteCollectionExtensions" Member="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object,System.Net.Http.HttpMessageHandler)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Routing.IHttpRouteData" />
      </Targets>
      <Member MemberName="GetSubRoutes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Web.Http.Routing.IHttpRouteData&gt; GetSubRoutes (this System.Web.Http.Routing.IHttpRouteData routeData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Web.Http.Routing.IHttpRouteData&gt; GetSubRoutes(class System.Web.Http.Routing.IHttpRouteData routeData) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Routing.HttpRouteDataExtensions.GetSubRoutes(System.Web.Http.Routing.IHttpRouteData)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSubRoutes (routeData As IHttpRouteData) As IEnumerable(Of IHttpRouteData)" />
        <MemberSignature Language="F#" Value="static member GetSubRoutes : System.Web.Http.Routing.IHttpRouteData -&gt; seq&lt;System.Web.Http.Routing.IHttpRouteData&gt;" Usage="System.Web.Http.Routing.HttpRouteDataExtensions.GetSubRoutes routeData" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Web.Http.Routing.IHttpRouteData&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routeData" Type="System.Web.Http.Routing.IHttpRouteData" RefType="this" />
        </Parameters>
        <Docs>
          <param name="routeData">A union route data.</param>
          <summary>If a route is really a union of other routes, return the set of sub routes.</summary>
        </Docs>
        <Link Type="System.Web.Http.Routing.HttpRouteDataExtensions" Member="M:System.Web.Http.Routing.HttpRouteDataExtensions.GetSubRoutes(System.Web.Http.Routing.IHttpRouteData)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Routing.IHttpRouteData" />
      </Targets>
      <Member MemberName="RemoveOptionalRoutingParameters">
        <MemberSignature Language="C#" Value="public static void RemoveOptionalRoutingParameters (this System.Web.Http.Routing.IHttpRouteData routeData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveOptionalRoutingParameters(class System.Web.Http.Routing.IHttpRouteData routeData) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Routing.HttpRouteDataExtensions.RemoveOptionalRoutingParameters(System.Web.Http.Routing.IHttpRouteData)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub RemoveOptionalRoutingParameters (routeData As IHttpRouteData)" />
        <MemberSignature Language="F#" Value="static member RemoveOptionalRoutingParameters : System.Web.Http.Routing.IHttpRouteData -&gt; unit" Usage="System.Web.Http.Routing.HttpRouteDataExtensions.RemoveOptionalRoutingParameters routeData" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="routeData" Type="System.Web.Http.Routing.IHttpRouteData" RefType="this" />
        </Parameters>
        <Docs>
          <param name="routeData">The route data, to be mutated in-place.</param>
          <summary>Removes all optional parameters that do not have a value from the route data.</summary>
        </Docs>
        <Link Type="System.Web.Http.Routing.HttpRouteDataExtensions" Member="M:System.Web.Http.Routing.HttpRouteDataExtensions.RemoveOptionalRoutingParameters(System.Web.Http.Routing.IHttpRouteData)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetActionInvoker">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Controllers.IHttpActionInvoker GetActionInvoker (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Controllers.IHttpActionInvoker GetActionInvoker(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetActionInvoker(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetActionInvoker (services As ServicesContainer) As IHttpActionInvoker" />
        <MemberSignature Language="F#" Value="static member GetActionInvoker : System.Web.Http.Controllers.ServicesContainer -&gt; System.Web.Http.Controllers.IHttpActionInvoker" Usage="System.Web.Http.ServicesExtensions.GetActionInvoker services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Controllers.IHttpActionInvoker</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Controllers.IHttpActionInvoker" /> service.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetActionInvoker(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetActionSelector">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Controllers.IHttpActionSelector GetActionSelector (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Controllers.IHttpActionSelector GetActionSelector(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetActionSelector(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetActionSelector (services As ServicesContainer) As IHttpActionSelector" />
        <MemberSignature Language="F#" Value="static member GetActionSelector : System.Web.Http.Controllers.ServicesContainer -&gt; System.Web.Http.Controllers.IHttpActionSelector" Usage="System.Web.Http.ServicesExtensions.GetActionSelector services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Controllers.IHttpActionSelector</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Controllers.IHttpActionSelector" /> service.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetActionSelector(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetActionValueBinder">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Controllers.IActionValueBinder GetActionValueBinder (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Controllers.IActionValueBinder GetActionValueBinder(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetActionValueBinder(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetActionValueBinder (services As ServicesContainer) As IActionValueBinder" />
        <MemberSignature Language="F#" Value="static member GetActionValueBinder : System.Web.Http.Controllers.ServicesContainer -&gt; System.Web.Http.Controllers.IActionValueBinder" Usage="System.Web.Http.ServicesExtensions.GetActionValueBinder services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Controllers.IActionValueBinder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Controllers.IActionValueBinder" /> service.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetActionValueBinder(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetApiExplorer">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Description.IApiExplorer GetApiExplorer (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Description.IApiExplorer GetApiExplorer(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetApiExplorer(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetApiExplorer (services As ServicesContainer) As IApiExplorer" />
        <MemberSignature Language="F#" Value="static member GetApiExplorer : System.Web.Http.Controllers.ServicesContainer -&gt; System.Web.Http.Description.IApiExplorer" Usage="System.Web.Http.ServicesExtensions.GetApiExplorer services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Description.IApiExplorer</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Description.IApiExplorer" /> service.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetApiExplorer(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetAssembliesResolver">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Dispatcher.IAssembliesResolver GetAssembliesResolver (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Dispatcher.IAssembliesResolver GetAssembliesResolver(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetAssembliesResolver(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAssembliesResolver (services As ServicesContainer) As IAssembliesResolver" />
        <MemberSignature Language="F#" Value="static member GetAssembliesResolver : System.Web.Http.Controllers.ServicesContainer -&gt; System.Web.Http.Dispatcher.IAssembliesResolver" Usage="System.Web.Http.ServicesExtensions.GetAssembliesResolver services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Dispatcher.IAssembliesResolver</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" /> service.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetAssembliesResolver(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetBodyModelValidator">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Validation.IBodyModelValidator GetBodyModelValidator (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Validation.IBodyModelValidator GetBodyModelValidator(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetBodyModelValidator(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetBodyModelValidator (services As ServicesContainer) As IBodyModelValidator" />
        <MemberSignature Language="F#" Value="static member GetBodyModelValidator : System.Web.Http.Controllers.ServicesContainer -&gt; System.Web.Http.Validation.IBodyModelValidator" Usage="System.Web.Http.ServicesExtensions.GetBodyModelValidator services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Validation.IBodyModelValidator</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Validation.IBodyModelValidator" /> service.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetBodyModelValidator(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetContentNegotiator">
        <MemberSignature Language="C#" Value="public static System.Net.Http.Formatting.IContentNegotiator GetContentNegotiator (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.Formatting.IContentNegotiator GetContentNegotiator(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetContentNegotiator(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetContentNegotiator (services As ServicesContainer) As IContentNegotiator" />
        <MemberSignature Language="F#" Value="static member GetContentNegotiator : System.Web.Http.Controllers.ServicesContainer -&gt; System.Net.Http.Formatting.IContentNegotiator" Usage="System.Web.Http.ServicesExtensions.GetContentNegotiator services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Net.Http.Formatting.IContentNegotiator</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Net.Http.Formatting.IContentNegotiator" /> service.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetContentNegotiator(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetDocumentationProvider">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Description.IDocumentationProvider GetDocumentationProvider (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Description.IDocumentationProvider GetDocumentationProvider(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetDocumentationProvider(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetDocumentationProvider (services As ServicesContainer) As IDocumentationProvider" />
        <MemberSignature Language="F#" Value="static member GetDocumentationProvider : System.Web.Http.Controllers.ServicesContainer -&gt; System.Web.Http.Description.IDocumentationProvider" Usage="System.Web.Http.ServicesExtensions.GetDocumentationProvider services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Description.IDocumentationProvider</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Description.IDocumentationProvider" /> service.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetDocumentationProvider(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetExceptionHandler">
        <MemberSignature Language="C#" Value="public static System.Web.Http.ExceptionHandling.IExceptionHandler GetExceptionHandler (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.ExceptionHandling.IExceptionHandler GetExceptionHandler(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetExceptionHandler(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetExceptionHandler (services As ServicesContainer) As IExceptionHandler" />
        <MemberSignature Language="F#" Value="static member GetExceptionHandler : System.Web.Http.Controllers.ServicesContainer -&gt; System.Web.Http.ExceptionHandling.IExceptionHandler" Usage="System.Web.Http.ServicesExtensions.GetExceptionHandler services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.ExceptionHandling.IExceptionHandler</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Returns the registered unhandled exception handler, if any.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetExceptionHandler(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetExceptionLoggers">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Web.Http.ExceptionHandling.IExceptionLogger&gt; GetExceptionLoggers (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Web.Http.ExceptionHandling.IExceptionLogger&gt; GetExceptionLoggers(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetExceptionLoggers(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetExceptionLoggers (services As ServicesContainer) As IEnumerable(Of IExceptionLogger)" />
        <MemberSignature Language="F#" Value="static member GetExceptionLoggers : System.Web.Http.Controllers.ServicesContainer -&gt; seq&lt;System.Web.Http.ExceptionHandling.IExceptionLogger&gt;" Usage="System.Web.Http.ServicesExtensions.GetExceptionLoggers services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Web.Http.ExceptionHandling.IExceptionLogger&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Returns the collection of registered unhandled exception loggers.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetExceptionLoggers(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetFilterProviders">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Web.Http.Filters.IFilterProvider&gt; GetFilterProviders (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Web.Http.Filters.IFilterProvider&gt; GetFilterProviders(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetFilterProviders(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetFilterProviders (services As ServicesContainer) As IEnumerable(Of IFilterProvider)" />
        <MemberSignature Language="F#" Value="static member GetFilterProviders : System.Web.Http.Controllers.ServicesContainer -&gt; seq&lt;System.Web.Http.Filters.IFilterProvider&gt;" Usage="System.Web.Http.ServicesExtensions.GetFilterProviders services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Web.Http.Filters.IFilterProvider&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Filters.IFilterProvider" /> collection.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetFilterProviders(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetHostBufferPolicySelector">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Hosting.IHostBufferPolicySelector GetHostBufferPolicySelector (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Hosting.IHostBufferPolicySelector GetHostBufferPolicySelector(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetHostBufferPolicySelector(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetHostBufferPolicySelector (services As ServicesContainer) As IHostBufferPolicySelector" />
        <MemberSignature Language="F#" Value="static member GetHostBufferPolicySelector : System.Web.Http.Controllers.ServicesContainer -&gt; System.Web.Http.Hosting.IHostBufferPolicySelector" Usage="System.Web.Http.ServicesExtensions.GetHostBufferPolicySelector services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Hosting.IHostBufferPolicySelector</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector" /> service.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetHostBufferPolicySelector(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetHttpControllerActivator">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Dispatcher.IHttpControllerActivator GetHttpControllerActivator (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Dispatcher.IHttpControllerActivator GetHttpControllerActivator(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetHttpControllerActivator(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetHttpControllerActivator (services As ServicesContainer) As IHttpControllerActivator" />
        <MemberSignature Language="F#" Value="static member GetHttpControllerActivator : System.Web.Http.Controllers.ServicesContainer -&gt; System.Web.Http.Dispatcher.IHttpControllerActivator" Usage="System.Web.Http.ServicesExtensions.GetHttpControllerActivator services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Dispatcher.IHttpControllerActivator</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" /> service.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetHttpControllerActivator(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetHttpControllerSelector">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Dispatcher.IHttpControllerSelector GetHttpControllerSelector (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Dispatcher.IHttpControllerSelector GetHttpControllerSelector(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetHttpControllerSelector(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetHttpControllerSelector (services As ServicesContainer) As IHttpControllerSelector" />
        <MemberSignature Language="F#" Value="static member GetHttpControllerSelector : System.Web.Http.Controllers.ServicesContainer -&gt; System.Web.Http.Dispatcher.IHttpControllerSelector" Usage="System.Web.Http.ServicesExtensions.GetHttpControllerSelector services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Dispatcher.IHttpControllerSelector</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" /> service.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetHttpControllerSelector(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetHttpControllerTypeResolver">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Dispatcher.IHttpControllerTypeResolver GetHttpControllerTypeResolver (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Dispatcher.IHttpControllerTypeResolver GetHttpControllerTypeResolver(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetHttpControllerTypeResolver(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetHttpControllerTypeResolver (services As ServicesContainer) As IHttpControllerTypeResolver" />
        <MemberSignature Language="F#" Value="static member GetHttpControllerTypeResolver : System.Web.Http.Controllers.ServicesContainer -&gt; System.Web.Http.Dispatcher.IHttpControllerTypeResolver" Usage="System.Web.Http.ServicesExtensions.GetHttpControllerTypeResolver services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Dispatcher.IHttpControllerTypeResolver</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" /> service.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetHttpControllerTypeResolver(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetModelBinderProviders">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Web.Http.ModelBinding.ModelBinderProvider&gt; GetModelBinderProviders (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Web.Http.ModelBinding.ModelBinderProvider&gt; GetModelBinderProviders(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetModelBinderProviders(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetModelBinderProviders (services As ServicesContainer) As IEnumerable(Of ModelBinderProvider)" />
        <MemberSignature Language="F#" Value="static member GetModelBinderProviders : System.Web.Http.Controllers.ServicesContainer -&gt; seq&lt;System.Web.Http.ModelBinding.ModelBinderProvider&gt;" Usage="System.Web.Http.ServicesExtensions.GetModelBinderProviders services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Web.Http.ModelBinding.ModelBinderProvider&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /> collection.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetModelBinderProviders(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetModelMetadataProvider">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Metadata.ModelMetadataProvider GetModelMetadataProvider (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Metadata.ModelMetadataProvider GetModelMetadataProvider(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetModelMetadataProvider(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetModelMetadataProvider (services As ServicesContainer) As ModelMetadataProvider" />
        <MemberSignature Language="F#" Value="static member GetModelMetadataProvider : System.Web.Http.Controllers.ServicesContainer -&gt; System.Web.Http.Metadata.ModelMetadataProvider" Usage="System.Web.Http.ServicesExtensions.GetModelMetadataProvider services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Metadata.ModelMetadataProvider</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" /> service.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetModelMetadataProvider(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetModelValidatorProviders">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Web.Http.Validation.ModelValidatorProvider&gt; GetModelValidatorProviders (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Web.Http.Validation.ModelValidatorProvider&gt; GetModelValidatorProviders(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetModelValidatorProviders(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetModelValidatorProviders (services As ServicesContainer) As IEnumerable(Of ModelValidatorProvider)" />
        <MemberSignature Language="F#" Value="static member GetModelValidatorProviders : System.Web.Http.Controllers.ServicesContainer -&gt; seq&lt;System.Web.Http.Validation.ModelValidatorProvider&gt;" Usage="System.Web.Http.ServicesExtensions.GetModelValidatorProviders services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Web.Http.Validation.ModelValidatorProvider&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /> collection.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetModelValidatorProviders(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetTraceManager">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Tracing.ITraceManager GetTraceManager (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Tracing.ITraceManager GetTraceManager(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetTraceManager(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetTraceManager (services As ServicesContainer) As ITraceManager" />
        <MemberSignature Language="F#" Value="static member GetTraceManager : System.Web.Http.Controllers.ServicesContainer -&gt; System.Web.Http.Tracing.ITraceManager" Usage="System.Web.Http.ServicesExtensions.GetTraceManager services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Tracing.ITraceManager</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Tracing.ITraceManager" /> service.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetTraceManager(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetTraceWriter">
        <MemberSignature Language="C#" Value="public static System.Web.Http.Tracing.ITraceWriter GetTraceWriter (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.Tracing.ITraceWriter GetTraceWriter(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetTraceWriter(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetTraceWriter (services As ServicesContainer) As ITraceWriter" />
        <MemberSignature Language="F#" Value="static member GetTraceWriter : System.Web.Http.Controllers.ServicesContainer -&gt; System.Web.Http.Tracing.ITraceWriter" Usage="System.Web.Http.ServicesExtensions.GetTraceWriter services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.Tracing.ITraceWriter</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.Tracing.ITraceWriter" />service.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetTraceWriter(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Controllers.ServicesContainer" />
      </Targets>
      <Member MemberName="GetValueProviderFactories">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Web.Http.ValueProviders.ValueProviderFactory&gt; GetValueProviderFactories (this System.Web.Http.Controllers.ServicesContainer services);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Web.Http.ValueProviders.ValueProviderFactory&gt; GetValueProviderFactories(class System.Web.Http.Controllers.ServicesContainer services) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.ServicesExtensions.GetValueProviderFactories(System.Web.Http.Controllers.ServicesContainer)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetValueProviderFactories (services As ServicesContainer) As IEnumerable(Of ValueProviderFactory)" />
        <MemberSignature Language="F#" Value="static member GetValueProviderFactories : System.Web.Http.Controllers.ServicesContainer -&gt; seq&lt;System.Web.Http.ValueProviders.ValueProviderFactory&gt;" Usage="System.Web.Http.ServicesExtensions.GetValueProviderFactories services" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Web.Http.ValueProviders.ValueProviderFactory&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="System.Web.Http.Controllers.ServicesContainer" RefType="this" />
        </Parameters>
        <Docs>
          <param name="services">The services container.</param>
          <summary>Gets the <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> collection.</summary>
        </Docs>
        <Link Type="System.Web.Http.ServicesExtensions" Member="M:System.Web.Http.ServicesExtensions.GetValueProviderFactories(System.Web.Http.Controllers.ServicesContainer)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Debug">
        <MemberSignature Language="C#" Value="public static void Debug (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, Exception exception);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Debug(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, class System.Exception exception) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)" />
        <MemberSignature Language="F#" Value="static member Debug : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * Exception -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Debug (traceWriter, request, category, exception)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="exception" Type="System.Exception" />
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="exception">The error occurred during execution.</param>
          <summary>Provides a set of methods and properties that help debug your code with the specified writer, request, category and exception.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Debug">
        <MemberSignature Language="C#" Value="public static void Debug (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, Exception exception, string messageFormat, params object[] messageArguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Debug(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, class System.Exception exception, string messageFormat, object[] messageArguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])" />
        <MemberSignature Language="F#" Value="static member Debug : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * Exception * string * obj[] -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Debug (traceWriter, request, category, exception, messageFormat, messageArguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="messageFormat" Type="System.String" />
          <Parameter Name="messageArguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="exception">The error occurred during execution.</param>
          <param name="messageFormat">The format of the message.</param>
          <param name="messageArguments">The message argument.</param>
          <summary>Provides a set of methods and properties that help debug your code with the specified writer, request, category, exception, message format and argument.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Debug">
        <MemberSignature Language="C#" Value="public static void Debug (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, string messageFormat, params object[] messageArguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Debug(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, string messageFormat, object[] messageArguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Debug (traceWriter As ITraceWriter, request As HttpRequestMessage, category As String, messageFormat As String, ParamArray messageArguments As Object())" />
        <MemberSignature Language="F#" Value="static member Debug : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * string * obj[] -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Debug (traceWriter, request, category, messageFormat, messageArguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="messageFormat" Type="System.String" />
          <Parameter Name="messageArguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="messageFormat">The format of the message.</param>
          <param name="messageArguments">The message argument.</param>
          <summary>Provides a set of methods and properties that help debug your code with the specified writer, request, category, exception, message format and argument.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Error">
        <MemberSignature Language="C#" Value="public static void Error (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, Exception exception);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Error(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, class System.Exception exception) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)" />
        <MemberSignature Language="F#" Value="static member Error : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * Exception -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Error (traceWriter, request, category, exception)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="exception" Type="System.Exception" />
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="exception">The error occurred during execution.</param>
          <summary>Displays an error message in the list with the specified writer, request, category and exception.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Error">
        <MemberSignature Language="C#" Value="public static void Error (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, Exception exception, string messageFormat, params object[] messageArguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Error(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, class System.Exception exception, string messageFormat, object[] messageArguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])" />
        <MemberSignature Language="F#" Value="static member Error : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * Exception * string * obj[] -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Error (traceWriter, request, category, exception, messageFormat, messageArguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="messageFormat" Type="System.String" />
          <Parameter Name="messageArguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="exception">The exception.</param>
          <param name="messageFormat">The format of the message.</param>
          <param name="messageArguments">The argument in the message.</param>
          <summary>Displays an error message in the list with the specified writer, request, category, exception, message format and argument.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Error">
        <MemberSignature Language="C#" Value="public static void Error (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, string messageFormat, params object[] messageArguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Error(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, string messageFormat, object[] messageArguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Error (traceWriter As ITraceWriter, request As HttpRequestMessage, category As String, messageFormat As String, ParamArray messageArguments As Object())" />
        <MemberSignature Language="F#" Value="static member Error : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * string * obj[] -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Error (traceWriter, request, category, messageFormat, messageArguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="messageFormat" Type="System.String" />
          <Parameter Name="messageArguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="messageFormat">The format of the message.</param>
          <param name="messageArguments">The argument in the message.</param>
          <summary>Displays an error message in the list with the specified writer, request, category, message format and argument.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Fatal">
        <MemberSignature Language="C#" Value="public static void Fatal (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, Exception exception);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fatal(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, class System.Exception exception) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)" />
        <MemberSignature Language="F#" Value="static member Fatal : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * Exception -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Fatal (traceWriter, request, category, exception)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="exception" Type="System.Exception" />
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="exception">The exception that appears during execution.</param>
          <summary>Displays an error message in the <see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> class with the specified writer, request, category and exception.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Fatal">
        <MemberSignature Language="C#" Value="public static void Fatal (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, Exception exception, string messageFormat, params object[] messageArguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fatal(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, class System.Exception exception, string messageFormat, object[] messageArguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])" />
        <MemberSignature Language="F#" Value="static member Fatal : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * Exception * string * obj[] -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Fatal (traceWriter, request, category, exception, messageFormat, messageArguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="messageFormat" Type="System.String" />
          <Parameter Name="messageArguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="exception">The exception.</param>
          <param name="messageFormat">The format of the message.</param>
          <param name="messageArguments">The message argument.</param>
          <summary>Displays an error message in the <see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> class with the specified writer, request, category and exception, message format and argument.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Fatal">
        <MemberSignature Language="C#" Value="public static void Fatal (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, string messageFormat, params object[] messageArguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fatal(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, string messageFormat, object[] messageArguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Fatal (traceWriter As ITraceWriter, request As HttpRequestMessage, category As String, messageFormat As String, ParamArray messageArguments As Object())" />
        <MemberSignature Language="F#" Value="static member Fatal : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * string * obj[] -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Fatal (traceWriter, request, category, messageFormat, messageArguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="messageFormat" Type="System.String" />
          <Parameter Name="messageArguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="messageFormat">The format of the message.</param>
          <param name="messageArguments">The message argument.</param>
          <summary>Displays an error message in the <see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> class with the specified writer, request, category and message format and argument.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Info">
        <MemberSignature Language="C#" Value="public static void Info (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, Exception exception);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Info(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, class System.Exception exception) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)" />
        <MemberSignature Language="F#" Value="static member Info : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * Exception -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Info (traceWriter, request, category, exception)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="exception" Type="System.Exception" />
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="exception">The error occurred during execution.</param>
          <summary>Displays the details in the <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" />.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Info">
        <MemberSignature Language="C#" Value="public static void Info (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, Exception exception, string messageFormat, params object[] messageArguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Info(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, class System.Exception exception, string messageFormat, object[] messageArguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])" />
        <MemberSignature Language="F#" Value="static member Info : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * Exception * string * obj[] -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Info (traceWriter, request, category, exception, messageFormat, messageArguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="messageFormat" Type="System.String" />
          <Parameter Name="messageArguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="exception">The error occurred during execution.</param>
          <param name="messageFormat">The format of the message.</param>
          <param name="messageArguments">The message argument.</param>
          <summary>Displays the details in the <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" />.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Info">
        <MemberSignature Language="C#" Value="public static void Info (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, string messageFormat, params object[] messageArguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Info(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, string messageFormat, object[] messageArguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Info (traceWriter As ITraceWriter, request As HttpRequestMessage, category As String, messageFormat As String, ParamArray messageArguments As Object())" />
        <MemberSignature Language="F#" Value="static member Info : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * string * obj[] -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Info (traceWriter, request, category, messageFormat, messageArguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="messageFormat" Type="System.String" />
          <Parameter Name="messageArguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="messageFormat">The format of the message.</param>
          <param name="messageArguments">The message argument.</param>
          <summary>Displays the details in the <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" />.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Trace">
        <MemberSignature Language="C#" Value="public static void Trace (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, System.Web.Http.Tracing.TraceLevel level, Exception exception);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Trace(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, valuetype System.Web.Http.Tracing.TraceLevel level, class System.Exception exception) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception)" />
        <MemberSignature Language="F#" Value="static member Trace : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * System.Web.Http.Tracing.TraceLevel * Exception -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Trace (traceWriter, request, category, level, exception)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="level" Type="System.Web.Http.Tracing.TraceLevel" />
          <Parameter Name="exception" Type="System.Exception" />
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="level">The trace level.</param>
          <param name="exception">The error occurred during execution.</param>
          <summary>Indicates the trace listeners in the Listeners collection.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Trace">
        <MemberSignature Language="C#" Value="public static void Trace (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, System.Web.Http.Tracing.TraceLevel level, Exception exception, string messageFormat, params object[] messageArguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Trace(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, valuetype System.Web.Http.Tracing.TraceLevel level, class System.Exception exception, string messageFormat, object[] messageArguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception,System.String,System.Object[])" />
        <MemberSignature Language="F#" Value="static member Trace : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * System.Web.Http.Tracing.TraceLevel * Exception * string * obj[] -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Trace (traceWriter, request, category, level, exception, messageFormat, messageArguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="level" Type="System.Web.Http.Tracing.TraceLevel" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="messageFormat" Type="System.String" />
          <Parameter Name="messageArguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="level">The trace level.</param>
          <param name="exception">The error occurred during execution.</param>
          <param name="messageFormat">The format of the message.</param>
          <param name="messageArguments">The message argument.</param>
          <summary>Indicates the trace listeners in the Listeners collection.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Trace">
        <MemberSignature Language="C#" Value="public static void Trace (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, System.Web.Http.Tracing.TraceLevel level, string messageFormat, params object[] messageArguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Trace(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, valuetype System.Web.Http.Tracing.TraceLevel level, string messageFormat, object[] messageArguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.Object[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Trace (traceWriter As ITraceWriter, request As HttpRequestMessage, category As String, level As TraceLevel, messageFormat As String, ParamArray messageArguments As Object())" />
        <MemberSignature Language="F#" Value="static member Trace : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * System.Web.Http.Tracing.TraceLevel * string * obj[] -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Trace (traceWriter, request, category, level, messageFormat, messageArguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="level" Type="System.Web.Http.Tracing.TraceLevel" />
          <Parameter Name="messageFormat" Type="System.String" />
          <Parameter Name="messageArguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel" /> of the trace.</param>
          <param name="messageFormat">The format of the message.</param>
          <param name="messageArguments">The message argument.</param>
          <summary>Indicates the trace listeners in the Listeners collection.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="TraceBeginEnd">
        <MemberSignature Language="C#" Value="public static void TraceBeginEnd (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, System.Web.Http.Tracing.TraceLevel level, string operatorName, string operationName, Action&lt;System.Web.Http.Tracing.TraceRecord&gt; beginTrace, Action execute, Action&lt;System.Web.Http.Tracing.TraceRecord&gt; endTrace, Action&lt;System.Web.Http.Tracing.TraceRecord&gt; errorTrace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void TraceBeginEnd(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, valuetype System.Web.Http.Tracing.TraceLevel level, string operatorName, string operationName, class System.Action`1&lt;class System.Web.Http.Tracing.TraceRecord&gt; beginTrace, class System.Action execute, class System.Action`1&lt;class System.Web.Http.Tracing.TraceRecord&gt; endTrace, class System.Action`1&lt;class System.Web.Http.Tracing.TraceRecord&gt; errorTrace) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEnd(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub TraceBeginEnd (traceWriter As ITraceWriter, request As HttpRequestMessage, category As String, level As TraceLevel, operatorName As String, operationName As String, beginTrace As Action(Of TraceRecord), execute As Action, endTrace As Action(Of TraceRecord), errorTrace As Action(Of TraceRecord))" />
        <MemberSignature Language="F#" Value="static member TraceBeginEnd : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * System.Web.Http.Tracing.TraceLevel * string * string * Action&lt;System.Web.Http.Tracing.TraceRecord&gt; * Action * Action&lt;System.Web.Http.Tracing.TraceRecord&gt; * Action&lt;System.Web.Http.Tracing.TraceRecord&gt; -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEnd (traceWriter, request, category, level, operatorName, operationName, beginTrace, execute, endTrace, errorTrace)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="level" Type="System.Web.Http.Tracing.TraceLevel" />
          <Parameter Name="operatorName" Type="System.String" />
          <Parameter Name="operationName" Type="System.String" />
          <Parameter Name="beginTrace" Type="System.Action&lt;System.Web.Http.Tracing.TraceRecord&gt;" />
          <Parameter Name="execute" Type="System.Action" />
          <Parameter Name="endTrace" Type="System.Action&lt;System.Web.Http.Tracing.TraceRecord&gt;" />
          <Parameter Name="errorTrace" Type="System.Action&lt;System.Web.Http.Tracing.TraceRecord&gt;" />
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace.  It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel" /> of the trace.</param>
          <param name="operatorName">The name of the object performing the operation. It may be null.</param>
          <param name="operationName">The name of the operation being performed.  It may be null.</param>
          <param name="beginTrace">The <see cref="T:System.Action" /> to invoke prior to performing the operation,  allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord" /> to be filled in. It may be null.</param>
          <param name="execute">An &lt;see cref="T:System.Func`1" /&gt; that returns the <see cref="T:System.Threading.Tasks.Task" /> that will perform the operation.</param>
          <param name="endTrace">The <see cref="T:System.Action" /> to invoke after successfully performing the operation, allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord" /> to be filled in.  It may be null.</param>
          <param name="errorTrace">The <see cref="T:System.Action" /> to invoke if an error was encountered performing the operation, allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord" /> to be filled in. It may be null.</param>
          <summary>Traces both a begin and an end trace around a specified operation.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEnd(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="TraceBeginEndAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task TraceBeginEndAsync (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, System.Web.Http.Tracing.TraceLevel level, string operatorName, string operationName, Action&lt;System.Web.Http.Tracing.TraceRecord&gt; beginTrace, Func&lt;System.Threading.Tasks.Task&gt; execute, Action&lt;System.Web.Http.Tracing.TraceRecord&gt; endTrace, Action&lt;System.Web.Http.Tracing.TraceRecord&gt; errorTrace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task TraceBeginEndAsync(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, valuetype System.Web.Http.Tracing.TraceLevel level, string operatorName, string operationName, class System.Action`1&lt;class System.Web.Http.Tracing.TraceRecord&gt; beginTrace, class System.Func`1&lt;class System.Threading.Tasks.Task&gt; execute, class System.Action`1&lt;class System.Web.Http.Tracing.TraceRecord&gt; endTrace, class System.Action`1&lt;class System.Web.Http.Tracing.TraceRecord&gt; errorTrace) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task},System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TraceBeginEndAsync (traceWriter As ITraceWriter, request As HttpRequestMessage, category As String, level As TraceLevel, operatorName As String, operationName As String, beginTrace As Action(Of TraceRecord), execute As Func(Of Task), endTrace As Action(Of TraceRecord), errorTrace As Action(Of TraceRecord)) As Task" />
        <MemberSignature Language="F#" Value="static member TraceBeginEndAsync : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * System.Web.Http.Tracing.TraceLevel * string * string * Action&lt;System.Web.Http.Tracing.TraceRecord&gt; * Func&lt;System.Threading.Tasks.Task&gt; * Action&lt;System.Web.Http.Tracing.TraceRecord&gt; * Action&lt;System.Web.Http.Tracing.TraceRecord&gt; -&gt; System.Threading.Tasks.Task" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync (traceWriter, request, category, level, operatorName, operationName, beginTrace, execute, endTrace, errorTrace)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="level" Type="System.Web.Http.Tracing.TraceLevel" />
          <Parameter Name="operatorName" Type="System.String" />
          <Parameter Name="operationName" Type="System.String" />
          <Parameter Name="beginTrace" Type="System.Action&lt;System.Web.Http.Tracing.TraceRecord&gt;" />
          <Parameter Name="execute" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
          <Parameter Name="endTrace" Type="System.Action&lt;System.Web.Http.Tracing.TraceRecord&gt;" />
          <Parameter Name="errorTrace" Type="System.Action&lt;System.Web.Http.Tracing.TraceRecord&gt;" />
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace.  It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel" /> of the trace.</param>
          <param name="operatorName">The name of the object performing the operation. It may be null.</param>
          <param name="operationName">The name of the operation being performed. It may be null.</param>
          <param name="beginTrace">The <see cref="T:System.Action" /> to invoke prior to performing the operation, allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord" /> to be filled in. It may be null.</param>
          <param name="execute">An &lt;see cref="T:System.Func`1" /&gt; that returns the <see cref="T:System.Threading.Tasks.Task" /> that will perform the operation.</param>
          <param name="endTrace">The <see cref="T:System.Action" /> to invoke after successfully performing the operation, allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord" /> to be filled in. It may be null.</param>
          <param name="errorTrace">The <see cref="T:System.Action" /> to invoke if an error was encountered performing the operation, allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord" /> to be filled in. It may be null.</param>
          <summary> Traces both a begin and an end trace around a specified operation. </summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task},System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="TraceBeginEndAsync&lt;TResult&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; TraceBeginEndAsync&lt;TResult&gt; (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, System.Web.Http.Tracing.TraceLevel level, string operatorName, string operationName, Action&lt;System.Web.Http.Tracing.TraceRecord&gt; beginTrace, Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; execute, Action&lt;System.Web.Http.Tracing.TraceRecord,TResult&gt; endTrace, Action&lt;System.Web.Http.Tracing.TraceRecord&gt; errorTrace);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; TraceBeginEndAsync&lt;TResult&gt;(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, valuetype System.Web.Http.Tracing.TraceLevel level, string operatorName, string operationName, class System.Action`1&lt;class System.Web.Http.Tracing.TraceRecord&gt; beginTrace, class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; execute, class System.Action`2&lt;class System.Web.Http.Tracing.TraceRecord, !!TResult&gt; endTrace, class System.Action`1&lt;class System.Web.Http.Tracing.TraceRecord&gt; errorTrace) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync``1(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task{``0}},System.Action{System.Web.Http.Tracing.TraceRecord,``0},System.Action{System.Web.Http.Tracing.TraceRecord})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TraceBeginEndAsync(Of TResult) (traceWriter As ITraceWriter, request As HttpRequestMessage, category As String, level As TraceLevel, operatorName As String, operationName As String, beginTrace As Action(Of TraceRecord), execute As Func(Of Task(Of TResult)), endTrace As Action(Of TraceRecord, TResult), errorTrace As Action(Of TraceRecord)) As Task(Of TResult)" />
        <MemberSignature Language="F#" Value="static member TraceBeginEndAsync : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * System.Web.Http.Tracing.TraceLevel * string * string * Action&lt;System.Web.Http.Tracing.TraceRecord&gt; * Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; * Action&lt;System.Web.Http.Tracing.TraceRecord, 'Result&gt; * Action&lt;System.Web.Http.Tracing.TraceRecord&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync (traceWriter, request, category, level, operatorName, operationName, beginTrace, execute, endTrace, errorTrace)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TResult" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="level" Type="System.Web.Http.Tracing.TraceLevel" />
          <Parameter Name="operatorName" Type="System.String" />
          <Parameter Name="operationName" Type="System.String" />
          <Parameter Name="beginTrace" Type="System.Action&lt;System.Web.Http.Tracing.TraceRecord&gt;" />
          <Parameter Name="execute" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" />
          <Parameter Name="endTrace" Type="System.Action&lt;System.Web.Http.Tracing.TraceRecord,TResult&gt;" />
          <Parameter Name="errorTrace" Type="System.Action&lt;System.Web.Http.Tracing.TraceRecord&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TResult">The type of result produced by the <see cref="T:System.Threading.Tasks.Task" />.</typeparam>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="level">The <see cref="T:System.Web.Http.Tracing.TraceLevel" /> of the trace.</param>
          <param name="operatorName">The name of the object performing the operation. It may be null.</param>
          <param name="operationName">The name of the operation being performed. It may be null.</param>
          <param name="beginTrace">The <see cref="T:System.Action" /> to invoke prior to performing the operation, allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord" /> to be filled in. It may be null.</param>
          <param name="execute">An &lt;see cref="T:System.Func`1" /&gt; that returns the <see cref="T:System.Threading.Tasks.Task" /> that will perform the operation.</param>
          <param name="endTrace">The <see cref="T:System.Action" /> to invoke after successfully performing the operation, allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord" /> to be filled in. The result of the completed task will also be passed to this action. This action may be null.</param>
          <param name="errorTrace">The <see cref="T:System.Action" /> to invoke if an error was encountered performing the operation, allowing the given <see cref="T:System.Web.Http.Tracing.TraceRecord" /> to be filled in. It may be null.</param>
          <summary> Traces both a begin and an end trace around a specified operation. </summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync``1(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task{``0}},System.Action{System.Web.Http.Tracing.TraceRecord,``0},System.Action{System.Web.Http.Tracing.TraceRecord})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Warn">
        <MemberSignature Language="C#" Value="public static void Warn (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, Exception exception);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Warn(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, class System.Exception exception) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)" />
        <MemberSignature Language="F#" Value="static member Warn : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * Exception -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Warn (traceWriter, request, category, exception)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="exception" Type="System.Exception" />
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="exception">The error occurred during execution.</param>
          <summary>Indicates the warning level of execution.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Warn">
        <MemberSignature Language="C#" Value="public static void Warn (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, Exception exception, string messageFormat, params object[] messageArguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Warn(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, class System.Exception exception, string messageFormat, object[] messageArguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])" />
        <MemberSignature Language="F#" Value="static member Warn : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * Exception * string * obj[] -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Warn (traceWriter, request, category, exception, messageFormat, messageArguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="exception" Type="System.Exception" />
          <Parameter Name="messageFormat" Type="System.String" />
          <Parameter Name="messageArguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="exception">The error occurred during execution.</param>
          <param name="messageFormat">The format of the message.</param>
          <param name="messageArguments">The message argument.</param>
          <summary>Indicates the warning level of execution.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.Tracing.ITraceWriter" />
      </Targets>
      <Member MemberName="Warn">
        <MemberSignature Language="C#" Value="public static void Warn (this System.Web.Http.Tracing.ITraceWriter traceWriter, System.Net.Http.HttpRequestMessage request, string category, string messageFormat, params object[] messageArguments);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Warn(class System.Web.Http.Tracing.ITraceWriter traceWriter, class System.Net.Http.HttpRequestMessage request, string category, string messageFormat, object[] messageArguments) cil managed" />
        <MemberSignature Language="DocId" Value="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Warn (traceWriter As ITraceWriter, request As HttpRequestMessage, category As String, messageFormat As String, ParamArray messageArguments As Object())" />
        <MemberSignature Language="F#" Value="static member Warn : System.Web.Http.Tracing.ITraceWriter * System.Net.Http.HttpRequestMessage * string * string * obj[] -&gt; unit" Usage="System.Web.Http.Tracing.ITraceWriterExtensions.Warn (traceWriter, request, category, messageFormat, messageArguments)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="traceWriter" Type="System.Web.Http.Tracing.ITraceWriter" RefType="this" />
          <Parameter Name="request" Type="System.Net.Http.HttpRequestMessage" />
          <Parameter Name="category" Type="System.String" />
          <Parameter Name="messageFormat" Type="System.String" />
          <Parameter Name="messageArguments" Type="System.Object[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="traceWriter">The <see cref="T:System.Web.Http.Tracing.ITraceWriter" />.</param>
          <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> with which to associate the trace. It may be null.</param>
          <param name="category">The logical category of the trace.</param>
          <param name="messageFormat">The format of the message.</param>
          <param name="messageArguments">The message argument.</param>
          <summary>Indicates the warning level of execution.</summary>
        </Docs>
        <Link Type="System.Web.Http.Tracing.ITraceWriterExtensions" Member="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])" />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
